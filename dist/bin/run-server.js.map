{"version":3,"sources":["../../bin/run-server.js"],"names":["openRunServer","compileURL","url","then","runServer","addRequestHandler","request","fileRelativeToRoot","pathname","slice","script","html","status","headers","Buffer","byteLength","body","open","root","compiledFolder","rootLocation","compiledFolderRelativeLocation","compileServer","abstractFolderRelativeLocation","runURL"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,OAAyB;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAC7C,SAAO,4BAAW,EAAEA,QAAF,EAAX,EAAoBC,IAApB,CAAyB,UAACC,SAAD,EAAe;AAC7CA,cAAUC,iBAAV,CAA4B,UAACC,OAAD,EAAa;AACvC,UAAMC,qBAAqBD,QAAQJ,GAAR,CAAYM,QAAZ,CAAqBC,KAArB,CAA2B,CAA3B,CAA3B;;AAEA,aAAO,gDAAqB;AAC1BC,4CAAiCT,UAAjC,SAA+CM,kBAA/C;AAD0B,OAArB,EAEJJ,IAFI,CAEC,UAACQ,IAAD,EAAU;AAChB,eAAO;AACLC,kBAAQ,GADH;AAELC,mBAAS;AACP,4BAAgB,WADT;AAEP,8BAAkBC,OAAOC,UAAP,CAAkBJ,IAAlB,CAFX;AAGP,6BAAiB;AAHV,WAFJ;AAOLK,gBAAML;AAPD,SAAP;AASD,OAZM,CAAP;AAaD,KAhBD;;AAkBA,WAAOP,SAAP;AACD,GApBM,CAAP;AAqBD,CAtBD;;AAwBO,IAAMa,sBAAO,SAAPA,IAAO,QAAmC;AAAA,MAAhCC,IAAgC,SAAhCA,IAAgC;AAAA,MAA1BhB,GAA0B,SAA1BA,GAA0B;AAAA,MAArBiB,cAAqB,SAArBA,cAAqB;;AACrD,SAAO,0CAAkB;AACvBC,kBAAcF,IADS;AAEvBG,oCAAgCF,cAFT;AAGvBjB,SAAK,uBAHkB,CAGO;AAHP,GAAlB,EAIJC,IAJI,CAIC,UAACmB,aAAD,EAAmB;AACzB,QAAMrB,kBAAgBqB,cAAcpB,GAA9B,GAAoCoB,cAAcC,8BAAxD;;AAEA,WAAOvB,cAAc;AACnBC,4BADmB;AAEnBC;AAFmB,KAAd,EAGJC,IAHI,CAGC,UAACC,SAAD,EAAe;AACrB,aAAO;AACLH,8BADK;AAELuB,gBAAQpB,UAAUF;AAFb,OAAP;AAID,KARM,CAAP;AASD,GAhBM,CAAP;AAiBD,CAlBM","file":"run-server.js","sourcesContent":["\n\nimport { openCompileServer } from \"../src/openCompileServer/openCompileServer.js\"\nimport { openServer } from \"../src/openServer/openServer.js\"\nimport { createHTMLForBrowser } from \"../src/createHTMLForBrowser.js\"\n\nconst openRunServer = ({ compileURL, url }) => {\n  return openServer({ url }).then((runServer) => {\n    runServer.addRequestHandler((request) => {\n      const fileRelativeToRoot = request.url.pathname.slice(1)\n\n      return createHTMLForBrowser({\n        script: `window.System.import(\"${compileURL}/${fileRelativeToRoot}\")`,\n      }).then((html) => {\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"text/html\",\n            \"content-length\": Buffer.byteLength(html),\n            \"cache-control\": \"no-store\",\n          },\n          body: html,\n        }\n      })\n    })\n\n    return runServer\n  })\n}\n\nexport const open = ({ root, url, compiledFolder }) => {\n  return openCompileServer({\n    rootLocation: root,\n    compiledFolderRelativeLocation: compiledFolder,\n    url: \"http://127.0.0.1:3001\", // avoid https for now because certificates are self signed\n  }).then((compileServer) => {\n    const compileURL = `${compileServer.url}${compileServer.abstractFolderRelativeLocation}`\n\n    return openRunServer({\n      compileURL,\n      url,\n    }).then((runServer) => {\n      return {\n        compileURL,\n        runURL: runServer.url,\n      }\n    })\n  })\n}\n"]}