{"version":3,"sources":["../../bin/start.js"],"names":["getFromArguments","name","foundRawArg","process","argv","find","arg","startsWith","slice","length","projectRoot","resolve","__dirname","port","Number","file","Error","fileRelativeToProjectRoot","Promise","all","rootLocation","url","then","compileServer","indexServer","console","log","toString","loaderSrc","indexBody","addRequestHandler","status","headers","Buffer","byteLength","body"],"mappings":";;;;AAEA;;AACA;;AACA;;;;;;AAEA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACjC,MAAMC,cAAcC,QAAQC,IAAR,CAAaC,IAAb,CAAkB,UAACC,GAAD,EAAS;AAC7C,WAAOA,IAAIC,UAAJ,QAAoBN,IAApB,OAAP;AACD,GAFmB,CAApB;AAGA,MAAI,CAACC,WAAL,EAAkB;AAChB;AACD;AACD,SAAOA,YAAYM,KAAZ,CAAkB,QAAKP,IAAL,QAAaQ,MAA/B,CAAP;AACD,CARD;;AAUA,IAAMC,cAAc,kBAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,CAApB;AACA,IAAMC,OAAOC,OAAOd,iBAAiB,MAAjB,KAA4B,GAAnC,CAAb;AACA,IAAMe,OAAOf,iBAAiB,MAAjB,KAA+BU,WAA/B,cAAb;AACA,IAAIK,KAAKR,UAAL,CAAgBG,WAAhB,MAAiC,KAArC,EAA4C;AAC1C,QAAM,IAAIM,KAAJ,6DACsDD,IADtD,uBAC4EL,WAD5E,CAAN;AAGD;AACD,IAAMO,4BAA4BF,KAAKP,KAAL,CAAWE,YAAYD,MAAZ,GAAqB,CAAhC,CAAlC;;AAEAS,QAAQC,GAAR,CAAY,CACV,0CAAkB;AAChBC,gBAAcV,WADE;AAEhBW,OAAK,oBAFW,CAEW;AAFX,CAAlB,CADU,EAKV,4BAAW;AACTA,6BAAyBR;AADhB,CAAX,CALU,CAAZ,EAQGS,IARH,CAQQ,gBAAkC;AAAA;AAAA,MAAhCC,aAAgC;AAAA,MAAjBC,WAAiB;;AACxCC,UAAQC,GAAR,CAAY,6BAAZ,EAA2CH,cAAcF,GAAd,CAAkBM,QAAlB,EAA3C;AACAF,UAAQC,GAAR,iBAA0BT,yBAA1B,sBAAoEO,YAAYH,GAAhF;;AAEA,MAAMO,YAAeL,cAAcF,GAA7B,2DAAN;AACA,MAAMQ,iJAKWD,SALX,kKAQsBL,cAAcF,GARpC,iBAQmDJ,yBARnD,yFAAN;;AAkBAO,cAAYM,iBAAZ,CAA8B,YAAM;AAClC,WAAO;AACLC,cAAQ,GADH;AAELC,eAAS;AACP,wBAAgB,WADT;AAEP,0BAAkBC,OAAOC,UAAP,CAAkBL,SAAlB,CAFX;AAGP,yBAAiB;AAHV,OAFJ;AAOLM,YAAMN;AAPD,KAAP;AASD,GAVD;AAWD,CA1CD","file":"start.js","sourcesContent":["\n\nimport { openCompileServer } from \"../src/openCompileServer/openCompileServer.js\"\nimport { openServer } from \"../src/openServer/openServer.js\"\nimport path from \"path\"\n\nconst getFromArguments = (name) => {\n  const foundRawArg = process.argv.find((arg) => {\n    return arg.startsWith(`--${name}=`)\n  })\n  if (!foundRawArg) {\n    return\n  }\n  return foundRawArg.slice(`--${name}=`.length)\n}\n\nconst projectRoot = path.resolve(__dirname, \"../../\")\nconst port = Number(getFromArguments(\"port\") || \"0\")\nconst file = getFromArguments(\"file\") || `${projectRoot}/index.js`\nif (file.startsWith(projectRoot) === false) {\n  throw new Error(\n    `The file to execute must be inside the project folder: ${file} is not inside ${projectRoot}`,\n  )\n}\nconst fileRelativeToProjectRoot = file.slice(projectRoot.length + 1)\n\nPromise.all([\n  openCompileServer({\n    rootLocation: projectRoot,\n    url: \"http://127.0.0.1:0\", // avoid https for now because certificates are self signed\n  }),\n  openServer({\n    url: `http://127.0.0.1:${port}`,\n  }),\n]).then(([compileServer, indexServer]) => {\n  console.log(\"compile server listening at\", compileServer.url.toString())\n  console.log(`server for ${fileRelativeToProjectRoot} listening at ${indexServer.url}`)\n\n  const loaderSrc = `${compileServer.url}node_modules/@dmail/module-loader/src/browser/index.js`\n  const indexBody = `<!doctype html>\n\n  <head>\n    <title>Skeleton for chrome headless</title>\n    <meta charset=\"utf-8\" />\n    <script src=\"${loaderSrc}\"></script>\n    <script type=\"text/javascript\">\n      window.System = window.createBrowserLoader.createBrowserLoader()\n      window.System.import(\"${compileServer.url}compiled/${fileRelativeToProjectRoot}\")\n    </script>\n  </head>\n\n  <body>\n    <main></main>\n  </body>\n\n  </html>`\n\n  indexServer.addRequestHandler(() => {\n    return {\n      status: 200,\n      headers: {\n        \"content-type\": \"text/html\",\n        \"content-length\": Buffer.byteLength(indexBody),\n        \"cache-control\": \"no-store\",\n      },\n      body: indexBody,\n    }\n  })\n})\n"]}