{"version":3,"sources":["../index.js"],"names":["testProject","createCoverageFromTestReport","openCompileServer","openChromiumClient","createModuleRunner","params","then","server","runInsideNode","file","rest","nodeClient","execute","runInsideChromium","headless","cover","compileURL","chromiumClient","collectCoverage","promise"],"mappings":";;;;;;;;;AAOA;;AACA;;AACA;;AACA;;6NAVA;AACA;;AAEA;AACA;AACA;;QAOSA,W;QAAaC,4B;QACbC,iB;QACAC,kB;AAEF,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,MAAD,EAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,0CAAkBA,MAAlB,EAA0BC,IAA1B,CAA+B,UAACC,MAAD,EAAY;AAChD,QAAMC,gBAAgB,SAAhBA,aAAgB,OAAuB;AAAA,UAApBC,IAAoB,QAApBA,IAAoB;AAAA,UAAXC,IAAW;;AAC3C,aAAO,oCAAe,EAAEH,cAAF,EAAf,EAA2BD,IAA3B,CAAgC,UAACK,UAAD,EAAgB;AACrD;AACA,eAAOA,WAAWC,OAAX;AACLH;AADK,WAEFC,IAFE,EAAP;AAID,OANM,CAAP;AAOD,KARD;;AAUA,QAAMG,oBAAoB,SAApBA,iBAAoB,QAA8C;AAAA,UAA3CJ,IAA2C,SAA3CA,IAA2C;AAAA,iCAArCK,QAAqC;AAAA,UAArCA,QAAqC,kCAA1B,IAA0B;AAAA,8BAApBC,KAAoB;AAAA,UAApBA,KAAoB,+BAAZ,KAAY;;AACtE,aAAO,4CAAmB;AACxBC,oBAAYT,OAAOS,UADK;AAExBF;AAFwB,OAAnB,EAGJR,IAHI,CAGC,UAACW,cAAD,EAAoB;AAC1B,eAAOA,eACJL,OADI,CACI;AACPH,oBADO;AAEPS,2BAAiBH;AAFV,SADJ,EAKJT,IALI,CAKC;AAAA,cAAGa,OAAH,SAAGA,OAAH;AAAA,iBAAiBA,OAAjB;AAAA,SALD,CAAP;AAMD,OAVM,CAAP;AAWD,KAZD;;AAcA,WAAO,EAAEX,4BAAF,EAAiBK,oCAAjB,EAAP;AACD,GA1BM,CAAP;AA2BD,CAtCM","file":"index.js","sourcesContent":["// https://github.com/jsenv/core/blob/master/src/api/api.js\n// https://github.com/ModuleLoader/system-register-loader/blob/master/src/system-register-loader.js\n\n// pour le coverage\n// https://github.com/jsenv/core/blob/master/more/test/playground/coverage/run.js\n// https://github.com/jsenv/core/blob/master/more/to-externalize/module-cover/index.js\n\nimport { openChromiumClient } from \"./src/openChromiumClient/openChromiumClient.js\"\nimport { openCompileServer } from \"./src/openCompileServer/openCompileServer.js\"\nimport { openNodeClient } from \"./src/openNodeClient/openNodeClient.js\"\nimport { testProject, createCoverageFromTestReport } from \"./src/coverFolder/coverFolder.js\"\n\nexport { testProject, createCoverageFromTestReport }\nexport { openCompileServer }\nexport { openChromiumClient }\n\nexport const createModuleRunner = (params) => {\n  // if there is already a compileServer running for that location\n  // they will work as long as the code which created them run in the same terminal\n  // if two terminal spawns a server trying to compile a given project they will concurrently\n  // read/write filesystem.\n  // To fix that we could:\n  // - update createLock.js so that, somehow, it can lock calls from different terminals\n  // - save somewhere the port used for that specific project and reuse when existing\n  // save used port is the easiest solution but we'll ignore this issue for now\n  // and assume noone will try to open two server for the same location\n\n  return openCompileServer(params).then((server) => {\n    const runInsideNode = ({ file, ...rest }) => {\n      return openNodeClient({ server }).then((nodeClient) => {\n        // we should return a way to close?\n        return nodeClient.execute({\n          file,\n          ...rest,\n        })\n      })\n    }\n\n    const runInsideChromium = ({ file, headless = true, cover = false }) => {\n      return openChromiumClient({\n        compileURL: server.compileURL,\n        headless,\n      }).then((chromiumClient) => {\n        return chromiumClient\n          .execute({\n            file,\n            collectCoverage: cover,\n          })\n          .then(({ promise }) => promise)\n      })\n    }\n\n    return { runInsideNode, runInsideChromium }\n  })\n}\n"]}