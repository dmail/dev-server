{
  "version": 3,
  "sources": [
    "../helpers/babel/defineProperty/defineProperty.js",
    "../helpers/babel/objectSpread2/objectSpread2.js",
    "../helpers/babel/typeof/typeof.js",
    "../helpers/babel/arrayLikeToArray/arrayLikeToArray.js",
    "../helpers/babel/arrayWithoutHoles/arrayWithoutHoles.js",
    "../helpers/babel/iterableToArray/iterableToArray.js",
    "../helpers/babel/unsupportedIterableToArray/unsupportedIterableToArray.js",
    "../helpers/babel/nonIterableSpread/nonIterableSpread.js",
    "../helpers/babel/toConsumableArray/toConsumableArray.js",
    "../node_modules/@jsenv/uneval/src/internal/isComposite.js",
    "../node_modules/@jsenv/uneval/src/internal/global-value-path.js",
    "../node_modules/@jsenv/uneval/src/internal/decompose.js",
    "../node_modules/@jsenv/uneval/src/internal/sortRecipe.js",
    "../node_modules/@jsenv/uneval/src/internal/escapeString.js",
    "../node_modules/@jsenv/uneval/src/uneval.js",
    "../src/internal/unevalException.js",
    "../node_modules/@jsenv/import-map/src/internal/assertImportMap.js",
    "../node_modules/@jsenv/import-map/src/internal/hasScheme.js",
    "../node_modules/@jsenv/import-map/src/internal/urlToScheme.js",
    "../node_modules/@jsenv/import-map/src/internal/urlToPathname.js",
    "../node_modules/@jsenv/import-map/src/internal/urlToOrigin.js",
    "../node_modules/@jsenv/import-map/src/internal/pathnameToParentPathname.js",
    "../node_modules/@jsenv/import-map/src/resolveUrl.js",
    "../node_modules/@jsenv/import-map/src/internal/tryUrlResolution.js",
    "../node_modules/@jsenv/import-map/src/resolveSpecifier.js",
    "../node_modules/@jsenv/import-map/src/sortImportMap.js",
    "../node_modules/@jsenv/import-map/src/normalizeImportMap.js",
    "../src/internal/memoize.js",
    "../helpers/babel/objectWithoutPropertiesLoose/objectWithoutPropertiesLoose.js",
    "../helpers/babel/objectWithoutProperties/objectWithoutProperties.js",
    "../node_modules/@jsenv/cancellation/src/createCancellationToken.js",
    "../node_modules/@jsenv/logger/src/createDetailedMessage.js",
    "../src/internal/browser-utils/fetchUsingXHR.js",
    "../src/internal/browser-utils/fetch-browser.js",
    "../node_modules/@jsenv/import-map/src/internal/pathnameToExtension.js",
    "../node_modules/@jsenv/import-map/src/applyImportMap.js",
    "../node_modules/@jsenv/import-map/src/resolveImport.js",
    "../src/internal/runtime/module-registration.js",
    "../src/internal/import-resolution/default-extension.js",
    "../src/internal/import-resolution/import-resolver-importmap.js",
    "../src/internal/perf_browser.js",
    "../src/internal/runtime/s.js",
    "../src/internal/runtime/valueInstall.js",
    "../src/internal/runtime/createBrowserRuntime/evalSource.js",
    "../src/internal/runtime/createBrowserRuntime/createBrowserSystem.js",
    "../src/internal/runtime/createBrowserRuntime/displayErrorInDocument.js",
    "../src/internal/runtime/createBrowserRuntime/displayErrorNotification.js",
    "../src/internal/runtime/createBrowserRuntime/makeNamespaceTransferable.js",
    "../src/internal/runtime/createBrowserRuntime/createBrowserRuntime.js",
    "../src/internal/error-stack-remapping/stackToString.js",
    "../src/internal/dataUrl.utils.js",
    "../src/internal/sourceMappingURLUtils.js",
    "../src/internal/filePathUtils.js",
    "../src/internal/error-stack-remapping/remapCallSite.js",
    "../src/internal/error-stack-remapping/getOriginalCallsites.js",
    "../src/internal/error-stack-remapping/installErrorStackRemapping.js",
    "../src/internal/error-stack-remapping/installBrowserErrorStackRemapping.js",
    "../src/internal/browser-utils/fetchAndEvalUsingFetch.js",
    "../src/internal/browser-launcher/jsenv-browser-system.js"
  ],
  "names": [
    "key",
    "Object",
    "value",
    "enumerable",
    "configurable",
    "writable",
    "obj",
    "keys",
    "symbols",
    "i",
    "arguments",
    "source",
    "ownKeys",
    "defineProperty",
    "nativeTypeOf",
    "customTypeOf",
    "Symbol",
    "len",
    "arr",
    "arr2",
    "Array",
    "arrayLikeToArray",
    "iter",
    "n",
    "o",
    "arrayWithoutHoles",
    "iterableToArray",
    "unsupportedIterableToArray",
    "nonIterableSpread",
    "isComposite",
    "type",
    "compositeWellKnownMap",
    "primitiveWellKnownMap",
    "getCompositeGlobalPath",
    "getPrimitiveGlobalPath",
    "visitGlobalObject",
    "visitValue",
    "visitProperty",
    "descriptor",
    "e",
    "propertyValue",
    "decompose",
    "functionAllowed",
    "prototypeStrict",
    "ignoreSymbols",
    "valueMap",
    "recipeArray",
    "valueToIdentifier",
    "path",
    "existingIdentifier",
    "identifierForPrimitive",
    "identifier",
    "identifierForNewValue",
    "primitiveToRecipe",
    "createPromiseAreNotSupportedMessage",
    "createWeakSetAreNotSupportedMessage",
    "createWeakMapAreNotSupportedMessage",
    "createForbiddenFunctionMessage",
    "identifierForComposite",
    "compositeGlobalPath",
    "createGlobalReferenceRecipe",
    "propertyDescriptionArray",
    "propertyDescriptor",
    "propertyNameIdentifier",
    "propertyDescription",
    "computePropertyDescription",
    "symbolDescriptionArray",
    "symbolIdentifier",
    "symbol",
    "methodDescriptionArray",
    "computeMethodDescriptionArray",
    "extensible",
    "createCompositeRecipe",
    "createForbiddenPropertySetterMessage",
    "propertyNameOrSymbol",
    "createForbiddenPropertyGetterMessage",
    "getIdentifier",
    "String",
    "setIdentifier",
    "valueIdentifier",
    "undefined",
    "callArray",
    "entryValueIdentifier",
    "methodNameIdentifier",
    "entryKeyIdentifier",
    "existingValue",
    "nextIdentifier",
    "currentIdentifier",
    "parseInt",
    "mainIdentifier",
    "prototypeValueToIdentifier",
    "prototypeValue",
    "prototypeExistingIdentifier",
    "prototypeIdentifier",
    "prototypeGlobalPath",
    "createUnknownPrototypeMessage",
    "identifierForValueOf",
    "valueOfReturnValue",
    "createUnexpectedValueOfReturnValueMessage",
    "recipe",
    "valueOfIdentifier",
    "symbolToRecipe",
    "createPimitiveRecipe",
    "globalSymbolKey",
    "createGlobalSymbolRecipe",
    "symbolGlobalPath",
    "createUnknownSymbolMessage",
    "sortRecipe",
    "findInRecipePrototypeChain",
    "currentRecipe",
    "callback",
    "recipeArrayOrdered",
    "leftType",
    "leftRecipe",
    "rightType",
    "rightRecipe",
    "rightRecipeIsInLeftRecipePrototypeChain",
    "recipeCandidate",
    "leftRecipeIsInRightRecipePrototypeChain",
    "leftIndex",
    "rightIndex",
    "escapeString",
    "string",
    "j",
    "escapedString",
    "char",
    "escapedChar",
    "uneval",
    "recipeArraySorted",
    "variableNameMap",
    "indexSorted",
    "identifierToVariableName",
    "recipeToSetupSource",
    "primitiveRecipeToSetupSource",
    "globalSymbolRecipeToSetupSource",
    "globalReferenceRecipeToSetupSource",
    "compositeRecipeToSetupSource",
    "pathSource",
    "prototypeConstructor",
    "recipeVariableName",
    "recipeToMutateSource",
    "compositeRecipeToMutateSource",
    "mutateSource",
    "generateDefinePropertySource",
    "generateMethodCallSource",
    "generatePreventExtensionSource",
    "propertyOrSymbolVariableName",
    "propertyDescriptorSource",
    "generatePropertyDescriptorSource",
    "methodCallSource",
    "methodVariableName",
    "argumentVariableNames",
    "unevalException",
    "assertImportMap",
    "hasScheme",
    "urlToScheme",
    "colonIndex",
    "urlString",
    "urlToPathname",
    "ressourceToPathname",
    "urlToRessource",
    "scheme",
    "afterProtocol",
    "pathnameSlashIndex",
    "searchSeparatorIndex",
    "ressource",
    "urlToOrigin",
    "secondProtocolSlashIndex",
    "pathnameToParentPathname",
    "slashLastIndex",
    "pathname",
    "resolveUrl",
    "writeBaseUrlMustBeAString",
    "baseUrl",
    "specifier",
    "writeBaseUrlMustBeAbsolute",
    "writeBaseUrlRequired",
    "baseOrigin",
    "basePathname",
    "baseDirectoryPathname",
    "unresolvedPathname",
    "importerFolders",
    "resolvedPathname",
    "tryUrlResolution",
    "result",
    "resolveSpecifier",
    "sortImports",
    "mappingsSorted",
    "imports",
    "sortScopes",
    "scopesSorted",
    "scopes",
    "compareLengthOrLocaleCompare",
    "b",
    "a",
    "normalizeImportMap",
    "isStringOrUrl",
    "formulateBaseUrlMustBeStringOrUrl",
    "importMap",
    "normalizeMappings",
    "normalizeScopes",
    "mappingsNormalized",
    "address",
    "mappings",
    "console",
    "formulateAddressMustBeAString",
    "specifierResolved",
    "addressUrl",
    "formulateAdressResolutionFailed",
    "formulateAddressUrlRequiresTrailingSlash",
    "scopesNormalized",
    "scopeMappings",
    "scopeUrl",
    "formulateScopeResolutionFailed",
    "scope",
    "scopeValueNormalized",
    "addressURL",
    "memoize",
    "memoized",
    "fnWithMemoization",
    "memoizedValue",
    "compute",
    "target",
    "sourceKeys",
    "excluded",
    "objectWithoutPropertiesLoose",
    "sourceSymbolKeys",
    "createCancellationToken",
    "register",
    "unregister",
    "throwIfRequested",
    "cancellationRequested",
    "createDetailedMessage",
    "details",
    "fetchUsingXHR",
    "cancellationToken",
    "method",
    "credentials",
    "headers",
    "body",
    "headersPromise",
    "createPromiseAndHooks",
    "bodyPromise",
    "xhr",
    "failure",
    "cleanup",
    "createRequestError",
    "url",
    "readyState",
    "args",
    "forEach",
    "withCredentials",
    "computeWithCredentials",
    "Promise",
    "f",
    "responseUrl",
    "responseStatus",
    "responseStatusText",
    "then",
    "responseHeaders",
    "getHeadersFromXHR",
    "readBody",
    "status",
    "responseBody",
    "responseBodyType",
    "detectBodyType",
    "text",
    "blobToText",
    "arrayBufferToText",
    "json",
    "JSON",
    "blob",
    "cloneBuffer",
    "arrayBuffer",
    "formData",
    "statusText",
    "canUseBlob",
    "window",
    "hasBlob",
    "hasFormData",
    "hasArrayBuffer",
    "hasSearchParams",
    "error",
    "promise",
    "resolve",
    "res",
    "reject",
    "rej",
    "originSameAsGlobalOrigin",
    "globalOrigin",
    "hrefToOrigin",
    "Blob",
    "FormData",
    "isDataView",
    "ArrayBuffer",
    "isArrayBufferView",
    "URLSearchParams",
    "headerMap",
    "headersString",
    "lines",
    "parts",
    "line",
    "name",
    "hrefToScheme",
    "href",
    "DataView",
    "viewClasses",
    "textToFormData",
    "form",
    "split",
    "bytes",
    "decodeURIComponent",
    "blobToArrayBuffer",
    "reader",
    "fileReaderReady",
    "view",
    "chars",
    "buffer",
    "fetchNative",
    "mode",
    "options",
    "abortController",
    "cancelError",
    "response",
    "signal",
    "responseToHeaders",
    "fetchUrl",
    "recover",
    "pathnameToExtension",
    "dotLastIndex",
    "applyImportMap",
    "importer",
    "createBareSpecifierError",
    "onImportMapping",
    "specifierUrl",
    "specifierNormalized",
    "scopeSpecifierMatching",
    "scopeSpecifier",
    "specifierIsPrefixOf",
    "mappingFromScopes",
    "applyMappings",
    "mappingFromImports",
    "specifierCandidates",
    "specifierCandidate",
    "from",
    "to",
    "before",
    "after",
    "afterSpecifier",
    "addressFinal",
    "specifierHref",
    "resolveImport",
    "defaultExtension",
    "applyDefaultExtension",
    "extension",
    "importerPathname",
    "importerExtension",
    "fromFunctionReturningNamespace",
    "fromFunctionReturningRegisteredModule",
    "execute",
    "namespace",
    "fn",
    "_export",
    "stack",
    "getModuleDetails",
    "fromUrl",
    "importerUrl",
    "fetchSource",
    "instantiateJavaScript",
    "compileServerOrigin",
    "compileDirectoryRelativeUrl",
    "moduleResponse",
    "notFound",
    "contentType",
    "bodyAsJson",
    "default",
    "contentTypeShouldBeReadAsText",
    "relativeUrl",
    "tryToFindProjectRelativeUrl",
    "importerRelativeUrl",
    "file",
    "afterOrigin",
    "afterCompileDirectory",
    "urlToExtension",
    "fakeUrl",
    "specifierExtension",
    "createImportResolverForImportmap",
    "importMapUrl",
    "importDefaultExtension",
    "onBareSpecifierError",
    "_resolveImport",
    "bareSpecifierError",
    "detailedMessage",
    "performance",
    "measureAsyncFnPerf",
    "perfMarkStartName",
    "finalizer",
    "msg",
    "hasSymbol",
    "hasSelf",
    "hasDocument",
    "envGlobal",
    "baseEl",
    "document",
    "location",
    "lastSepIndex",
    "backslashRegEx",
    "relUrl",
    "parentUrl",
    "parentProtocol",
    "segmented",
    "output",
    "segmentIndex",
    "resolveIfNotPlainOrUrl",
    "resolvedLhs",
    "rhs",
    "packages",
    "mapped",
    "resolveImportMap",
    "targetWarning",
    "outPackages",
    "resolveAndComposePackages",
    "outMap",
    "resolvedScope",
    "matchObj",
    "sepIndex",
    "segment",
    "pkgName",
    "getMatch",
    "pkg",
    "id",
    "errMsg",
    "packageResolution",
    "applyPackages",
    "resolvedOrPlain",
    "toStringTag",
    "REGISTRY",
    "systemJSPrototype",
    "SystemJS",
    "loader",
    "load",
    "getOrCreateLoad",
    "topLevelLoad",
    "lastRegister",
    "_lastRegister",
    "importerSetters",
    "ns",
    "instantiatePromise",
    "Error",
    "changed",
    "p",
    "setter",
    "declared",
    "import",
    "meta",
    "registration",
    "linkPromise",
    "instantiation",
    "depLoad",
    "I",
    "L",
    "h",
    "d",
    "er",
    "E",
    "C",
    "loaded",
    "instantiateAll",
    "postOrderExec",
    "nullContext",
    "seen",
    "depLoadPromise",
    "depLoadPromises",
    "doExec",
    "execPromise",
    "importMapPromise",
    "depcache",
    "integrity",
    "processFirst",
    "processScripts",
    "script",
    "System",
    "event",
    "fetchPromise",
    "err",
    "extendImportMap",
    "newMap",
    "resolveAndComposeImportMap",
    "lastWindowErrorUrl",
    "evt",
    "lastWindowError",
    "lastAutoImportTimeout",
    "autoImportCandidates",
    "systemRegister",
    "scripts",
    "lastScript",
    "lastAutoImportDeps",
    "setTimeout",
    "autoImportRegistration",
    "clearTimeout",
    "instantiate",
    "jsContentTypeRegEx",
    "throwUnresolved",
    "systemInstantiate",
    "preloads",
    "importScripts",
    "valueInstall",
    "has",
    "previous",
    "object",
    "evalSource",
    "appendSourceURL",
    "createBrowserSystem",
    "importResolver",
    "browserSystem",
    "uninstallSystemGlobal",
    "displayErrorInDocument",
    "title",
    "theme",
    "parsingError",
    "message",
    "errorToHTML",
    "escapeHtml",
    "css",
    "html",
    "removeJsenvConsole",
    "appendHMTLInside",
    "htmlWithCorrectLineBreaks",
    "htmlWithLinks",
    "stringToStringWithLink",
    "transform",
    "linkHTML",
    "lastChar",
    "match",
    "endsWithSeparationChar",
    "lineAndColumnPattern",
    "lineAndColumMatch",
    "lineAndColumnString",
    "lineNumber",
    "columnNumber",
    "link",
    "linePattern",
    "lineMatch",
    "lineString",
    "temoraryParent",
    "transferChildren",
    "childNodes",
    "fromNode",
    "toNode",
    "c",
    "Notification",
    "displayErrorNotificationNotAvailable",
    "displayErrorNotificationImplementation",
    "icon",
    "permission",
    "notification",
    "lang",
    "displayErrorNotification",
    "makeNamespaceTransferable",
    "transferableNamespace",
    "isTransferable",
    "hideNonTransferableValue",
    "seenArray",
    "visit",
    "constructorName",
    "supportedTypes",
    "maybe",
    "maybeTypes",
    "visited",
    "memoizedCreateBrowserSystem",
    "createBrowserRuntime",
    "outDirectoryRelativeUrl",
    "compileId",
    "htmlFileRelativeUrl",
    "fetchJson",
    "outDirectoryUrl",
    "envUrl",
    "importmapScript",
    "importmapRaw",
    "importmapFileResponse",
    "importFile",
    "executeFile",
    "errorExposureInConsole",
    "errorExposureInNotification",
    "errorExposureInDocument",
    "executionExposureOnWindow",
    "errorTransform",
    "measurePerformance",
    "importUsingSystemJs",
    "coverage",
    "readCoverage",
    "transformedError",
    "displayErrorInConsole",
    "exceptionSource",
    "stackToString",
    "indent",
    "stackString",
    "parseDataUrl",
    "afterDataProtocol",
    "dataUrl",
    "commaIndex",
    "beforeComma",
    "mediaType",
    "base64Flag",
    "afterComma",
    "data",
    "dataUrlToRawData",
    "base64ToString",
    "Buffer",
    "getJavaScriptSourceMappingUrl",
    "replaceSourceMappingUrl",
    "sourceMappingUrl",
    "javascriptSourceMappingUrlCommentRegexp",
    "matchSourceMappingUrl",
    "regexp",
    "lastSourceMappingUrl",
    "index",
    "mappedAfter",
    "startsWithWindowsDriveLetter",
    "firstChar",
    "secondChar",
    "windowsFilePathToUrl",
    "replaceBackSlashesWithSlashes",
    "remapCallSite",
    "urlToSourcemapConsumer",
    "resolveFile",
    "readErrorStack",
    "onFailure",
    "callSite",
    "column",
    "remapSourcePosition",
    "callSiteClone",
    "cloneCallSite",
    "originalPosition",
    "origin",
    "remapEvalOrigin",
    "methods",
    "callSiteToFunctionCall",
    "fileLocation",
    "callSiteToFileLocation",
    "isConstructor",
    "isMethodCall",
    "callSiteToMethodCall",
    "functionName",
    "typeName",
    "callSiteToType",
    "methodName",
    "as",
    "generateAs",
    "sourceFile",
    "callSiteToSourceFile",
    "fileName",
    "topLevelEvalMatch",
    "Number",
    "nestedEvalMatch",
    "position",
    "sourceToUrl",
    "sourceMapConsumer",
    "originalSource",
    "startsWithScheme",
    "getOriginalCallsites",
    "fetchFile",
    "SourceMapConsumer",
    "memoizeByFirstArgStringValue",
    "stackTraceFileUrl",
    "fileResponse",
    "jsSourcemapUrl",
    "sourcemapUrl",
    "sourcemapString",
    "sourcemapResponse",
    "sourceMap",
    "sourcesContent",
    "firstSourceMapSourceFailure",
    "sourcemapSourceUrl",
    "sourceResponse",
    "stringValueCache",
    "firstArgValue",
    "installErrorStackRemapping",
    "errorRemappingCache",
    "errorRemapFailureCallbackMap",
    "installed",
    "previousPrepareStackTrace",
    "install",
    "uninstall",
    "prepareStackTrace",
    "failureCallbackArray",
    "stackRemappingPromise",
    "memoizeFetch",
    "getErrorOriginalStackString",
    "remapFailureCallbackArray",
    "direct",
    "firstCall",
    "originalCallsites",
    "filename",
    "lineno",
    "columnno",
    "urlCache",
    "responsePromise",
    "installBrowserErrorStackRemapping",
    "fetchAndEvalUsingFetch",
    "getNavigationStartTime",
    "Date",
    "navigationStartTime",
    "readyPromise",
    "loadCallback",
    "fileExecutionMap",
    "executionResultPromise",
    "fileExecutionResultMap",
    "fileExecutionResultPromises",
    "fileExecutionResultPromise",
    "fileExecutionResult",
    "startTime",
    "endTime",
    "executeFileUsingDynamicImport",
    "currentScript",
    "executionResult",
    "onExecutionError",
    "executeFileUsingSystemJs",
    "collectPerformance",
    "originalError",
    "errorEvent",
    "globalErrorEvent",
    "getBrowserRuntime",
    "compileMetaResponse",
    "errorStackRemapping",
    "compileMeta",
    "afterOutDirectory",
    "remaining",
    "sourcemapMainFileRelativeUrl",
    "sourcemapMappingFileRelativeUrl",
    "browserRuntime"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export default (obj, key, value) => {\n  // Shortcircuit the slow defineProperty path when possible.\n  // We are trying to avoid issues where setters defined on the\n  // prototype cause side effects under the fast path of simple\n  // assignment. By checking for existence of the property with\n  // the in operator, we can optimize most of this overhead away.\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    })\n  } else {\n    obj[key] = value\n  }\n  return obj\n}\n",
    "import defineProperty from \"../defineProperty/defineProperty.js\"\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object)\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object)\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable\n      })\n    }\n    keys.push.apply(keys, symbols)\n  }\n  return keys\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {}\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key])\n      })\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))\n      })\n    }\n  }\n  return target\n}\n",
    "const nativeTypeOf = (obj) => typeof obj\n\nconst customTypeOf = (obj) => {\n  return obj &&\n    typeof Symbol === \"function\" &&\n    obj.constructor === Symbol &&\n    obj !== Symbol.prototype\n    ? \"symbol\"\n    : typeof obj\n}\n\nexport default typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"\n  ? nativeTypeOf\n  : customTypeOf\n",
    "/* eslint-disable no-eq-null, eqeqeq */\nexport default function arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length\n  var arr2 = new Array(len)\n  for (var i = 0; i < len; i++) arr2[i] = arr[i]\n  return arr2\n}\n",
    "import arrayLikeToArray from \"../arrayLikeToArray/arrayLikeToArray.js\"\n\n// eslint-disable-next-line consistent-return\nexport default (arr) => {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr)\n}\n",
    "export default function _iterableToArray(iter) {\n  if (\n    (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null) ||\n    iter[\"@@iterator\"] != null\n  )\n    return Array.from(iter)\n}\n",
    "/* eslint-disable consistent-return */\nimport arrayLikeToArray from \"../arrayLikeToArray/arrayLikeToArray.js\"\n\nexport default function unsupportedIterableToArray(o, minLen) {\n  if (!o) return\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen)\n  var n = Object.prototype.toString.call(o).slice(8, -1)\n  if (n === \"Object\" && o.constructor) n = o.constructor.name\n  if (n === \"Map\" || n === \"Set\") return Array.from(o)\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n    return arrayLikeToArray(o, minLen)\n}\n",
    "export default () => {\n  throw new TypeError(\n    \"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\",\n  )\n}\n",
    "import arrayWithoutHoles from \"../arrayWithoutHoles/arrayWithoutHoles.js\"\nimport iterableToArray from \"../iterableToArray/iterableToArray.js\"\nimport unsupportedIterableToArray from \"../unsupportedIterableToArray/unsupportedIterableToArray.js\"\nimport nonIterableSpread from \"../nonIterableSpread/nonIterableSpread.js\"\n\nexport default (arr) =>\n  arrayWithoutHoles(arr) ||\n  iterableToArray(arr) ||\n  unsupportedIterableToArray(arr) ||\n  nonIterableSpread()\n",
    "// https://developer.mozilla.org/en-US/docs/Glossary/Primitive\n\nexport const isComposite = (value) => {\n  if (value === null) {\n    return false\n  }\n\n  const type = typeof value\n  if (type === \"object\") {\n    return true\n  }\n\n  if (type === \"function\") {\n    return true\n  }\n\n  return false\n}\n",
    "import { isComposite } from \"./isComposite.js\"\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\nconst compositeWellKnownMap = new WeakMap()\nconst primitiveWellKnownMap = new Map()\n\nexport const getCompositeGlobalPath = (value) => compositeWellKnownMap.get(value)\n\nexport const getPrimitiveGlobalPath = (value) => primitiveWellKnownMap.get(value)\n\nconst visitGlobalObject = (value) => {\n  const visitValue = (value, path) => {\n    if (isComposite(value)) {\n      // prevent infinite recursion\n      if (compositeWellKnownMap.has(value)) {\n        return\n      }\n      compositeWellKnownMap.set(value, path)\n\n      const visitProperty = (property) => {\n        let descriptor\n        try {\n          descriptor = Object.getOwnPropertyDescriptor(value, property)\n        } catch (e) {\n          if (e.name === \"SecurityError\") {\n            return\n          }\n          throw e\n        }\n\n        if (!descriptor) {\n          // it's apparently possible to have getOwnPropertyNames returning\n          // a property that later returns a null descriptor\n          // for instance window.showModalDialog in webkit 13.0\n          return\n        }\n\n        // do not trigger getter/setter\n        if (\"value\" in descriptor) {\n          const propertyValue = descriptor.value\n          visitValue(propertyValue, [...path, property])\n        }\n      }\n\n      Object.getOwnPropertyNames(value).forEach((name) => visitProperty(name))\n      Object.getOwnPropertySymbols(value).forEach((symbol) => visitProperty(symbol))\n    }\n\n    primitiveWellKnownMap.set(value, path)\n    return\n  }\n\n  visitValue(value, [])\n}\n\nif (typeof window === \"object\") visitGlobalObject(window)\n\nif (typeof global === \"object\") visitGlobalObject(global)\n",
    "/**\n * transforms a javascript value into an object describing it.\n *\n */\n\nimport { isComposite } from \"./isComposite.js\"\nimport { getCompositeGlobalPath, getPrimitiveGlobalPath } from \"./global-value-path.js\"\n\nexport const decompose = (mainValue, { functionAllowed, prototypeStrict, ignoreSymbols }) => {\n  const valueMap = {}\n  const recipeArray = []\n\n  const valueToIdentifier = (value, path = []) => {\n    if (!isComposite(value)) {\n      const existingIdentifier = identifierForPrimitive(value)\n      if (existingIdentifier !== undefined) {\n        return existingIdentifier\n      }\n      const identifier = identifierForNewValue(value)\n      recipeArray[identifier] = primitiveToRecipe(value)\n      return identifier\n    }\n\n    if (typeof Promise === \"function\" && value instanceof Promise) {\n      throw new Error(createPromiseAreNotSupportedMessage({ path }))\n    }\n    if (typeof WeakSet === \"function\" && value instanceof WeakSet) {\n      throw new Error(createWeakSetAreNotSupportedMessage({ path }))\n    }\n    if (typeof WeakMap === \"function\" && value instanceof WeakMap) {\n      throw new Error(createWeakMapAreNotSupportedMessage({ path }))\n    }\n    if (typeof value === \"function\" && !functionAllowed) {\n      throw new Error(createForbiddenFunctionMessage({ path }))\n    }\n\n    const existingIdentifier = identifierForComposite(value)\n    if (existingIdentifier !== undefined) {\n      return existingIdentifier\n    }\n    const identifier = identifierForNewValue(value)\n\n    const compositeGlobalPath = getCompositeGlobalPath(value)\n    if (compositeGlobalPath) {\n      recipeArray[identifier] = createGlobalReferenceRecipe(compositeGlobalPath)\n      return identifier\n    }\n\n    const propertyDescriptionArray = []\n    Object.getOwnPropertyNames(value).forEach((propertyName) => {\n      const propertyDescriptor = Object.getOwnPropertyDescriptor(value, propertyName)\n      const propertyNameIdentifier = valueToIdentifier(propertyName, [...path, propertyName])\n      const propertyDescription = computePropertyDescription(propertyDescriptor, propertyName, path)\n      propertyDescriptionArray.push({ propertyNameIdentifier, propertyDescription })\n    })\n\n    const symbolDescriptionArray = []\n    if (!ignoreSymbols) {\n      Object.getOwnPropertySymbols(value).forEach((symbol) => {\n        const propertyDescriptor = Object.getOwnPropertyDescriptor(value, symbol)\n        const symbolIdentifier = valueToIdentifier(symbol, [...path, `[${symbol.toString()}]`])\n        const propertyDescription = computePropertyDescription(propertyDescriptor, symbol, path)\n        symbolDescriptionArray.push({ symbolIdentifier, propertyDescription })\n      })\n    }\n\n    const methodDescriptionArray = computeMethodDescriptionArray(value, path)\n\n    const extensible = Object.isExtensible(value)\n\n    recipeArray[identifier] = createCompositeRecipe({\n      propertyDescriptionArray,\n      symbolDescriptionArray,\n      methodDescriptionArray,\n      extensible,\n    })\n    return identifier\n  }\n\n  const computePropertyDescription = (propertyDescriptor, propertyNameOrSymbol, path) => {\n    if (propertyDescriptor.set && !functionAllowed) {\n      throw new Error(createForbiddenPropertySetterMessage({ path, propertyNameOrSymbol }))\n    }\n    if (propertyDescriptor.get && !functionAllowed) {\n      throw new Error(createForbiddenPropertyGetterMessage({ path, propertyNameOrSymbol }))\n    }\n\n    return {\n      configurable: propertyDescriptor.configurable,\n      writable: propertyDescriptor.writable,\n      enumerable: propertyDescriptor.enumerable,\n      getIdentifier:\n        \"get\" in propertyDescriptor\n          ? valueToIdentifier(propertyDescriptor.get, [\n              ...path,\n              String(propertyNameOrSymbol),\n              \"[[descriptor:get]]\",\n            ])\n          : undefined,\n      setIdentifier:\n        \"set\" in propertyDescriptor\n          ? valueToIdentifier(propertyDescriptor.set, [\n              ...path,\n              String(propertyNameOrSymbol),\n              \"[[descriptor:set]]\",\n            ])\n          : undefined,\n      valueIdentifier:\n        \"value\" in propertyDescriptor\n          ? valueToIdentifier(propertyDescriptor.value, [\n              ...path,\n              String(propertyNameOrSymbol),\n              \"[[descriptor:value]]\",\n            ])\n          : undefined,\n    }\n  }\n\n  const computeMethodDescriptionArray = (value, path) => {\n    const methodDescriptionArray = []\n\n    if (typeof Set === \"function\" && value instanceof Set) {\n      const callArray = []\n      value.forEach((entryValue, index) => {\n        const entryValueIdentifier = valueToIdentifier(entryValue, [\n          ...path,\n          `[[SetEntryValue]]`,\n          index,\n        ])\n        callArray.push([entryValueIdentifier])\n      })\n      methodDescriptionArray.push({ methodNameIdentifier: valueToIdentifier(\"add\"), callArray })\n    }\n\n    if (typeof Map === \"function\" && value instanceof Map) {\n      const callArray = []\n      value.forEach((entryValue, entryKey) => {\n        const entryKeyIdentifier = valueToIdentifier(entryKey, [\n          ...path,\n          \"[[MapEntryKey]]\",\n          entryKey,\n        ])\n        const entryValueIdentifier = valueToIdentifier(entryValue, [\n          ...path,\n          \"[[MapEntryValue]]\",\n          entryValue,\n        ])\n        callArray.push([entryKeyIdentifier, entryValueIdentifier])\n      })\n      methodDescriptionArray.push({ methodNameIdentifier: valueToIdentifier(\"set\"), callArray })\n    }\n\n    return methodDescriptionArray\n  }\n\n  const identifierForPrimitive = (value) => {\n    return Object.keys(valueMap).find((existingIdentifier) => {\n      const existingValue = valueMap[existingIdentifier]\n      if (Object.is(value, existingValue)) return true\n      return value === existingValue\n    })\n  }\n\n  const identifierForComposite = (value) => {\n    return Object.keys(valueMap).find((existingIdentifier) => {\n      const existingValue = valueMap[existingIdentifier]\n      return value === existingValue\n    })\n  }\n\n  const identifierForNewValue = (value) => {\n    const identifier = nextIdentifier()\n    valueMap[identifier] = value\n    return identifier\n  }\n\n  let currentIdentifier = -1\n  const nextIdentifier = () => {\n    const identifier = String(parseInt(currentIdentifier) + 1)\n    currentIdentifier = identifier\n    return identifier\n  }\n\n  const mainIdentifier = valueToIdentifier(mainValue)\n\n  // prototype, important to keep after the whole structure was visited\n  // so that we discover if any prototype is part of the value\n  const prototypeValueToIdentifier = (prototypeValue) => {\n    // prototype is null\n    if (prototypeValue === null) {\n      return valueToIdentifier(prototypeValue)\n    }\n\n    // prototype found somewhere already\n    const prototypeExistingIdentifier = identifierForComposite(prototypeValue)\n    if (prototypeExistingIdentifier !== undefined) {\n      return prototypeExistingIdentifier\n    }\n\n    // mark prototype as visited\n    const prototypeIdentifier = identifierForNewValue(prototypeValue)\n\n    // prototype is a global reference ?\n    const prototypeGlobalPath = getCompositeGlobalPath(prototypeValue)\n    if (prototypeGlobalPath) {\n      recipeArray[prototypeIdentifier] = createGlobalReferenceRecipe(prototypeGlobalPath)\n      return prototypeIdentifier\n    }\n\n    // otherwise prototype is unknown\n    if (prototypeStrict) {\n      throw new Error(createUnknownPrototypeMessage({ prototypeValue }))\n    }\n\n    return prototypeValueToIdentifier(Object.getPrototypeOf(prototypeValue), true)\n  }\n  const identifierForValueOf = (value, path = []) => {\n    if (value instanceof Array) {\n      return valueToIdentifier(value.length, [...path, \"length\"])\n    }\n\n    if (\"valueOf\" in value === false) {\n      return undefined\n    }\n\n    if (typeof value.valueOf !== \"function\") {\n      return undefined\n    }\n\n    const valueOfReturnValue = value.valueOf()\n    if (!isComposite(valueOfReturnValue)) {\n      return valueToIdentifier(valueOfReturnValue, [...path, \"valueOf()\"])\n    }\n\n    if (valueOfReturnValue === value) {\n      return undefined\n    }\n\n    throw new Error(createUnexpectedValueOfReturnValueMessage())\n  }\n\n  recipeArray.slice().forEach((recipe, index) => {\n    if (recipe.type === \"composite\") {\n      const value = valueMap[index]\n\n      if (typeof value === \"function\") {\n        const valueOfIdentifier = nextIdentifier()\n        recipeArray[valueOfIdentifier] = {\n          type: \"primitive\",\n          value,\n        }\n        recipe.valueOfIdentifier = valueOfIdentifier\n        return\n      }\n\n      if (value instanceof RegExp) {\n        const valueOfIdentifier = nextIdentifier()\n        recipeArray[valueOfIdentifier] = {\n          type: \"primitive\",\n          value,\n        }\n        recipe.valueOfIdentifier = valueOfIdentifier\n        return\n      }\n\n      // valueOf, mandatory to uneval new Date(10) for instance.\n      recipe.valueOfIdentifier = identifierForValueOf(value)\n      const prototypeValue = Object.getPrototypeOf(value)\n      recipe.prototypeIdentifier = prototypeValueToIdentifier(prototypeValue, true)\n    }\n  })\n\n  return {\n    recipeArray,\n    mainIdentifier,\n    valueMap,\n  }\n}\n\nconst primitiveToRecipe = (value) => {\n  if (typeof value === \"symbol\") {\n    return symbolToRecipe(value)\n  }\n\n  return createPimitiveRecipe(value)\n}\n\nconst symbolToRecipe = (symbol) => {\n  const globalSymbolKey = Symbol.keyFor(symbol)\n  if (globalSymbolKey !== undefined) {\n    return createGlobalSymbolRecipe(globalSymbolKey)\n  }\n\n  const symbolGlobalPath = getPrimitiveGlobalPath(symbol)\n  if (!symbolGlobalPath) {\n    throw new Error(createUnknownSymbolMessage({ symbol }))\n  }\n\n  return createGlobalReferenceRecipe(symbolGlobalPath)\n}\n\nconst createPimitiveRecipe = (value) => {\n  return {\n    type: \"primitive\",\n    value,\n  }\n}\n\nconst createGlobalReferenceRecipe = (path) => {\n  const recipe = {\n    type: \"global-reference\",\n    path,\n  }\n  return recipe\n}\n\nconst createGlobalSymbolRecipe = (key) => {\n  return {\n    type: \"global-symbol\",\n    key,\n  }\n}\n\nconst createCompositeRecipe = ({\n  prototypeIdentifier,\n  valueOfIdentifier,\n  propertyDescriptionArray,\n  symbolDescriptionArray,\n  methodDescriptionArray,\n  extensible,\n}) => {\n  return {\n    type: \"composite\",\n    prototypeIdentifier,\n    valueOfIdentifier,\n    propertyDescriptionArray,\n    symbolDescriptionArray,\n    methodDescriptionArray,\n    extensible,\n  }\n}\n\nconst createPromiseAreNotSupportedMessage = ({ path }) => {\n  if (path.length === 0) {\n    return `promise are not supported.`\n  }\n\n  return `promise are not supported.\npromise found at: ${path.join(\"\")}`\n}\n\nconst createWeakSetAreNotSupportedMessage = ({ path }) => {\n  if (path.length === 0) {\n    return `weakSet are not supported.`\n  }\n\n  return `weakSet are not supported.\nweakSet found at: ${path.join(\"\")}`\n}\n\nconst createWeakMapAreNotSupportedMessage = ({ path }) => {\n  if (path.length === 0) {\n    return `weakMap are not supported.`\n  }\n\n  return `weakMap are not supported.\nweakMap found at: ${path.join(\"\")}`\n}\n\nconst createForbiddenFunctionMessage = ({ path }) => {\n  if (path.length === 0) {\n    return `function are not allowed.`\n  }\n\n  return `function are not allowed.\nfunction found at: ${path.join(\"\")}`\n}\n\nconst createForbiddenPropertyGetterMessage = ({\n  path,\n  propertyNameOrSymbol,\n}) => `property getter are not allowed.\ngetter found on property: ${String(propertyNameOrSymbol)}\nat: ${path.join(\"\")}`\n\nconst createForbiddenPropertySetterMessage = ({\n  path,\n  propertyNameOrSymbol,\n}) => `property setter are not allowed.\nsetter found on property: ${String(propertyNameOrSymbol)}\nat: ${path.join(\"\")}`\n\nconst createUnexpectedValueOfReturnValueMessage = () =>\n  `valueOf() must return a primitive of the object itself.`\n\nconst createUnknownSymbolMessage = ({\n  symbol,\n}) => `symbol must be global, like Symbol.iterator, or created using Symbol.for().\nsymbol: ${symbol.toString()}`\n\nconst createUnknownPrototypeMessage = ({ prototypeValue }) =>\n  `prototype must be global, like Object.prototype, or somewhere in the value.\nprototype constructor name: ${prototypeValue.constructor.name}`\n",
    "// be carefull because this function is mutating recipe objects inside the recipeArray.\n// this is not an issue because each recipe object is not accessible from the outside\n// when used internally by uneval\nexport const sortRecipe = (recipeArray) => {\n  const findInRecipePrototypeChain = (recipe, callback) => {\n    let currentRecipe = recipe\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (currentRecipe.type !== \"composite\") {\n        break\n      }\n\n      const prototypeIdentifier = currentRecipe.prototypeIdentifier\n      if (prototypeIdentifier === undefined) {\n        break\n      }\n\n      currentRecipe = recipeArray[prototypeIdentifier]\n\n      if (callback(currentRecipe, prototypeIdentifier)) {\n        return prototypeIdentifier\n      }\n    }\n    return undefined\n  }\n\n  const recipeArrayOrdered = recipeArray.slice()\n  recipeArrayOrdered.sort((leftRecipe, rightRecipe) => {\n    const leftType = leftRecipe.type\n    const rightType = rightRecipe.type\n\n    if (leftType === \"composite\" && rightType === \"composite\") {\n      const rightRecipeIsInLeftRecipePrototypeChain = findInRecipePrototypeChain(\n        leftRecipe,\n        (recipeCandidate) => recipeCandidate === rightRecipe,\n      )\n      // if left recipe requires right recipe, left must be after right\n      if (rightRecipeIsInLeftRecipePrototypeChain) {\n        return 1\n      }\n\n      const leftRecipeIsInRightRecipePrototypeChain = findInRecipePrototypeChain(\n        rightRecipe,\n        (recipeCandidate) => recipeCandidate === leftRecipe,\n      )\n      // if right recipe requires left recipe, right must be after left\n      if (leftRecipeIsInRightRecipePrototypeChain) {\n        return -1\n      }\n    }\n\n    if (leftType !== rightType) {\n      // if left is a composite, left must be after right\n      if (leftType === \"composite\") {\n        return 1\n      }\n\n      // if right is a composite, right must be after left\n      if (rightType === \"composite\") {\n        return -1\n      }\n    }\n\n    const leftIndex = recipeArray.indexOf(leftRecipe)\n    const rightIndex = recipeArray.indexOf(rightRecipe)\n    // left was before right, don't change that\n    if (leftIndex < rightIndex) {\n      return -1\n    }\n\n    // right was after left, don't change that\n    return 1\n  })\n\n  return recipeArrayOrdered\n}\n",
    "// https://github.com/joliss/js-string-escape/blob/master/index.js\n// http://javascript.crockford.com/remedial.html\nexport const escapeString = (value) => {\n  const string = String(value)\n  let i = 0\n  const j = string.length\n  var escapedString = \"\"\n  while (i < j) {\n    const char = string[i]\n    let escapedChar\n    if (char === '\"' || char === \"'\" || char === \"\\\\\") {\n      escapedChar = `\\\\${char}`\n    } else if (char === \"\\n\") {\n      escapedChar = \"\\\\n\"\n    } else if (char === \"\\r\") {\n      escapedChar = \"\\\\r\"\n    } else if (char === \"\\u2028\") {\n      escapedChar = \"\\\\u2028\"\n    } else if (char === \"\\u2029\") {\n      escapedChar = \"\\\\u2029\"\n    } else {\n      escapedChar = char\n    }\n    escapedString += escapedChar\n    i++\n  }\n  return escapedString\n}\n",
    "import { decompose } from \"./internal/decompose.js\"\nimport { sortRecipe } from \"./internal/sortRecipe.js\"\nimport { escapeString } from \"./internal/escapeString.js\"\n\nexport const uneval = (\n  value,\n  { functionAllowed = false, prototypeStrict = false, ignoreSymbols = false } = {},\n) => {\n  const { recipeArray, mainIdentifier, valueMap } = decompose(value, {\n    functionAllowed,\n    prototypeStrict,\n    ignoreSymbols,\n  })\n  const recipeArraySorted = sortRecipe(recipeArray)\n\n  let source = `(function () {\nvar globalObject\ntry {\n  globalObject = Function('return this')() || (42, eval)('this');\n} catch(e) {\n  globalObject = window;\n}\n\nfunction safeDefineProperty(object, propertyNameOrSymbol, descriptor) {\n  var currentDescriptor = Object.getOwnPropertyDescriptor(object, propertyNameOrSymbol);\n  if (currentDescriptor && !currentDescriptor.configurable) return\n  Object.defineProperty(object, propertyNameOrSymbol, descriptor)\n};\n`\n\n  const variableNameMap = {}\n  recipeArray.forEach((recipe, index) => {\n    const indexSorted = recipeArraySorted.indexOf(recipe)\n    variableNameMap[index] = `_${indexSorted}`\n  })\n\n  const identifierToVariableName = (identifier) => variableNameMap[identifier]\n\n  const recipeToSetupSource = (recipe) => {\n    if (recipe.type === \"primitive\") return primitiveRecipeToSetupSource(recipe)\n    if (recipe.type === \"global-symbol\") return globalSymbolRecipeToSetupSource(recipe)\n    if (recipe.type === \"global-reference\") return globalReferenceRecipeToSetupSource(recipe)\n    return compositeRecipeToSetupSource(recipe)\n  }\n\n  const primitiveRecipeToSetupSource = ({ value }) => {\n    const type = typeof value\n\n    if (type === \"string\") {\n      return `\"${escapeString(value)}\";`\n    }\n\n    if (type === \"bigint\") {\n      return `${value.toString()}n`\n    }\n\n    if (Object.is(value, -0)) {\n      return \"-0;\"\n    }\n\n    return `${String(value)};`\n  }\n\n  const globalSymbolRecipeToSetupSource = (recipe) => {\n    return `Symbol.for(\"${escapeString(recipe.key)}\");`\n  }\n\n  const globalReferenceRecipeToSetupSource = (recipe) => {\n    const pathSource = recipe.path.map((part) => `[\"${escapeString(part)}\"]`).join(\"\")\n    return `globalObject${pathSource};`\n  }\n\n  const compositeRecipeToSetupSource = ({ prototypeIdentifier, valueOfIdentifier }) => {\n    if (prototypeIdentifier === undefined) {\n      return identifierToVariableName(valueOfIdentifier)\n    }\n\n    const prototypeValue = valueMap[prototypeIdentifier]\n    if (prototypeValue === null) {\n      return `Object.create(null);`\n    }\n\n    const prototypeConstructor = prototypeValue.constructor\n    if (prototypeConstructor === Object) {\n      return `Object.create(${identifierToVariableName(prototypeIdentifier)});`\n    }\n\n    if (valueOfIdentifier === undefined) {\n      return `new ${prototypeConstructor.name}();`\n    }\n\n    if (prototypeConstructor.name === \"BigInt\") {\n      return `Object(${identifierToVariableName(valueOfIdentifier)})`\n    }\n\n    return `new ${prototypeConstructor.name}(${identifierToVariableName(valueOfIdentifier)});`\n  }\n\n  recipeArraySorted.forEach((recipe) => {\n    const recipeVariableName = identifierToVariableName(recipeArray.indexOf(recipe))\n    source += `var ${recipeVariableName} = ${recipeToSetupSource(recipe, recipeVariableName)}\n`\n  })\n\n  const recipeToMutateSource = (recipe, recipeVariableName) => {\n    if (recipe.type === \"composite\") {\n      return compositeRecipeToMutateSource(recipe, recipeVariableName)\n    }\n    return ``\n  }\n\n  const compositeRecipeToMutateSource = (\n    { propertyDescriptionArray, symbolDescriptionArray, methodDescriptionArray, extensible },\n    recipeVariableName,\n  ) => {\n    let mutateSource = ``\n\n    propertyDescriptionArray.forEach(({ propertyNameIdentifier, propertyDescription }) => {\n      mutateSource += generateDefinePropertySource(\n        recipeVariableName,\n        propertyNameIdentifier,\n        propertyDescription,\n      )\n    })\n\n    symbolDescriptionArray.forEach(({ symbolIdentifier, propertyDescription }) => {\n      mutateSource += generateDefinePropertySource(\n        recipeVariableName,\n        symbolIdentifier,\n        propertyDescription,\n      )\n    })\n\n    methodDescriptionArray.forEach(({ methodNameIdentifier, callArray }) => {\n      mutateSource += generateMethodCallSource(recipeVariableName, methodNameIdentifier, callArray)\n    })\n\n    if (!extensible) {\n      mutateSource += generatePreventExtensionSource(recipeVariableName)\n    }\n\n    return mutateSource\n  }\n\n  const generateDefinePropertySource = (\n    recipeVariableName,\n    propertyNameOrSymbolIdentifier,\n    propertyDescription,\n  ) => {\n    const propertyOrSymbolVariableName = identifierToVariableName(propertyNameOrSymbolIdentifier)\n\n    const propertyDescriptorSource = generatePropertyDescriptorSource(propertyDescription)\n    return `safeDefineProperty(${recipeVariableName}, ${propertyOrSymbolVariableName}, ${propertyDescriptorSource});`\n  }\n\n  const generatePropertyDescriptorSource = ({\n    configurable,\n    writable,\n    enumerable,\n    getIdentifier,\n    setIdentifier,\n    valueIdentifier,\n  }) => {\n    if (valueIdentifier === undefined) {\n      return `{\n  configurable: ${configurable},\n  enumerable: ${enumerable},\n  get: ${getIdentifier === undefined ? undefined : identifierToVariableName(getIdentifier)},\n  set: ${setIdentifier === undefined ? undefined : identifierToVariableName(setIdentifier)},\n}`\n    }\n\n    return `{\n  configurable: ${configurable},\n  writable: ${writable},\n  enumerable: ${enumerable},\n  value: ${valueIdentifier === undefined ? undefined : identifierToVariableName(valueIdentifier)}\n}`\n  }\n\n  const generateMethodCallSource = (recipeVariableName, methodNameIdentifier, callArray) => {\n    let methodCallSource = ``\n\n    const methodVariableName = identifierToVariableName(methodNameIdentifier)\n    callArray.forEach((argumentIdentifiers) => {\n      const argumentVariableNames = argumentIdentifiers.map((argumentIdentifier) =>\n        identifierToVariableName(argumentIdentifier),\n      )\n\n      methodCallSource += `${recipeVariableName}[${methodVariableName}](${argumentVariableNames.join(\n        \",\",\n      )});`\n    })\n\n    return methodCallSource\n  }\n\n  const generatePreventExtensionSource = (recipeVariableName) => {\n    return `Object.preventExtensions(${recipeVariableName});`\n  }\n\n  recipeArraySorted.forEach((recipe) => {\n    const recipeVariableName = identifierToVariableName(recipeArray.indexOf(recipe))\n    source += `${recipeToMutateSource(recipe, recipeVariableName)}`\n  })\n\n  source += `return ${identifierToVariableName(mainIdentifier)}; })()`\n\n  return source\n}\n",
    "import { uneval } from \"@jsenv/uneval\"\n\nexport const unevalException = (value) => {\n  if (value.hasOwnProperty(\"toString\")) {\n    delete value.toString\n  }\n  return uneval(value, { ignoreSymbols: true })\n}\n",
    "export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(`an importMap must be an object, received array ${value}`)\n  }\n}\n",
    "export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n",
    "export const urlToScheme = (urlString) => {\n  const colonIndex = urlString.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return urlString.slice(0, colonIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToPathname = (urlString) => {\n  return ressourceToPathname(urlToRessource(urlString))\n}\n\nconst urlToRessource = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return urlString.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = urlString.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return urlString.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1 ? ressource : ressource.slice(0, searchSeparatorIndex)\n}\n",
    "import { urlToScheme } from \"./urlToScheme.js\"\n\nexport const urlToOrigin = (urlString) => {\n  const scheme = urlToScheme(urlString)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = urlString.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return urlString\n    return urlString.slice(0, pathnameSlashIndex)\n  }\n\n  return urlString.slice(0, scheme.length + 1)\n}\n",
    "export const pathnameToParentPathname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) {\n    return \"/\"\n  }\n\n  return pathname.slice(0, slashLastIndex + 1)\n}\n",
    "// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { urlToScheme } from \"./internal/urlToScheme.js\"\nimport { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { urlToOrigin } from \"./internal/urlToOrigin.js\"\nimport { pathnameToParentPathname } from \"./internal/pathnameToParentPathname.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${urlToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${urlToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = urlToOrigin(baseUrl)\n  const basePathname = urlToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirectoryPathname = pathnameToParentPathname(basePathname)\n    return `${baseOrigin}${baseDirectoryPathname}${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\"/\")}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToParentPathname(basePathname)}${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({ baseUrl, specifier }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({ baseUrl, specifier }) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n",
    "import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n",
    "import { hasScheme } from \"./internal/hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (\n    specifier === \".\" ||\n    specifier[0] === \"/\" ||\n    specifier.startsWith(\"./\") ||\n    specifier.startsWith(\"../\")\n  ) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n\n  return {\n    ...(imports ? { imports: sortImports(imports) } : {}),\n    ...(scopes ? { scopes: sortScopes(scopes) } : {}),\n  }\n}\n\nexport const sortImports = (imports) => {\n  const mappingsSorted = {}\n\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      mappingsSorted[name] = imports[name]\n    })\n\n  return mappingsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeSpecifier) => {\n      scopesSorted[scopeSpecifier] = sortImports(scopes[scopeSpecifier])\n    })\n\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n",
    "import { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\nimport { sortImports, sortScopes } from \"./sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n\n  if (!isStringOrUrl(baseUrl)) {\n    throw new TypeError(formulateBaseUrlMustBeStringOrUrl({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeMappings(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst isStringOrUrl = (value) => {\n  if (typeof value === \"string\") {\n    return true\n  }\n\n  if (typeof URL === \"function\" && value instanceof URL) {\n    return true\n  }\n\n  return false\n}\n\nconst normalizeMappings = (mappings, baseUrl) => {\n  const mappingsNormalized = {}\n\n  Object.keys(mappings).forEach((specifier) => {\n    const address = mappings[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    mappingsNormalized[specifierResolved] = addressUrl\n  })\n\n  return sortImports(mappingsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n\n  Object.keys(scopes).forEach((scopeSpecifier) => {\n    const scopeMappings = scopes[scopeSpecifier]\n    const scopeUrl = tryUrlResolution(scopeSpecifier, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope: scopeSpecifier,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeMappings(scopeMappings, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeStringOrUrl = ({ baseUrl }) => `baseUrl must be a string or an url.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({ specifier, address }) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({ scope, baseUrl }) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n",
    "export const memoize = (compute) => {\n  let memoized = false\n  let memoizedValue\n\n  const fnWithMemoization = (...args) => {\n    if (memoized) {\n      return memoizedValue\n    }\n    // if compute is recursive wait for it to be fully done before storing the lockValue\n    // so set locked later\n    memoizedValue = compute(...args)\n    memoized = true\n    return memoizedValue\n  }\n\n  fnWithMemoization.forget = () => {\n    const value = memoizedValue\n    memoized = false\n    memoizedValue = undefined\n    return value\n  }\n\n  return fnWithMemoization\n}\n",
    "export default (source, excluded) => {\n  if (source === null) return {}\n  var target = {}\n  var sourceKeys = Object.keys(source)\n  var key\n  var i\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i]\n    if (excluded.indexOf(key) >= 0) continue\n    target[key] = source[key]\n  }\n  return target\n}\n",
    "import objectWithoutPropertiesLoose from \"../objectWithoutPropertiesLoose/objectWithoutPropertiesLoose.js\"\n\nexport default (source, excluded) => {\n  if (source === null) return {}\n\n  var target = objectWithoutPropertiesLoose(source, excluded)\n  var key\n  var i\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source)\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i]\n      if (excluded.indexOf(key) >= 0) continue\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue\n      target[key] = source[key]\n    }\n  }\n  return target\n}\n",
    "export const createCancellationToken = () => {\n  const register = (callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error(`callback must be a function, got ${callback}`)\n    }\n\n    return {\n      callback,\n      unregister: () => {},\n    }\n  }\n\n  const throwIfRequested = () => undefined\n\n  return {\n    register,\n    cancellationRequested: false,\n    throwIfRequested,\n  }\n}\n",
    "export const createDetailedMessage = (message, details = {}) => {\n  let string = `${message}`\n\n  Object.keys(details).forEach((key) => {\n    const value = details[key]\n    string += `\n--- ${key} ---\n${\n  Array.isArray(value)\n    ? value.join(`\n`)\n    : value\n}`\n  })\n\n  return string\n}\n",
    "import { createCancellationToken } from \"@jsenv/cancellation/main.browser.js\"\nimport { createDetailedMessage } from \"@jsenv/logger\"\n// ideally we should do some window.fetch detection (ensuring it has cancellation) and accordingly\n// fallback to this polyfill (or even use an existing polyfill would be better)\n// https://github.com/github/fetch/blob/master/fetch.js\n\nexport const fetchUsingXHR = async (\n  url,\n  {\n    cancellationToken = createCancellationToken(),\n    method = \"GET\",\n    credentials = \"same-origin\",\n    headers = {},\n    body = null,\n  } = {},\n) => {\n  const headersPromise = createPromiseAndHooks()\n  const bodyPromise = createPromiseAndHooks()\n\n  const xhr = new XMLHttpRequest()\n\n  const failure = (error) => {\n    // if it was already resolved, we must reject the body promise\n    if (headersPromise.settled) {\n      bodyPromise.reject(error)\n    } else {\n      headersPromise.reject(error)\n    }\n  }\n\n  const cleanup = () => {\n    xhr.ontimeout = null\n    xhr.onerror = null\n    xhr.onload = null\n    xhr.onreadystatechange = null\n  }\n\n  xhr.ontimeout = () => {\n    cleanup()\n    failure(new Error(`xhr request timeout on ${url}.`))\n  }\n\n  xhr.onerror = (error) => {\n    cleanup()\n    // unfortunately with have no clue why it fails\n    // might be cors for instance\n    failure(createRequestError(error, { url }))\n  }\n\n  xhr.onload = () => {\n    cleanup()\n    bodyPromise.resolve()\n  }\n\n  cancellationToken.register((cancelError) => {\n    xhr.abort()\n    failure(cancelError)\n  })\n\n  xhr.onreadystatechange = () => {\n    // https://developer.mozilla.org/fr/docs/Web/API/XMLHttpRequest/readyState\n    const { readyState } = xhr\n\n    if (readyState === 2) {\n      headersPromise.resolve()\n    } else if (readyState === 4) {\n      cleanup()\n      bodyPromise.resolve()\n    }\n  }\n\n  xhr.open(method, url, true)\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key])\n  })\n  xhr.withCredentials = computeWithCredentials({ credentials, url })\n  if (\"responseType\" in xhr && hasBlob) {\n    xhr.responseType = \"blob\"\n  }\n  xhr.send(body)\n\n  await headersPromise\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n  const responseUrl = \"responseURL\" in xhr ? xhr.responseURL : headers[\"x-request-url\"]\n  let responseStatus = xhr.status\n  const responseStatusText = xhr.statusText\n  const responseHeaders = getHeadersFromXHR(xhr)\n\n  const readBody = async () => {\n    await bodyPromise\n\n    const { status } = xhr\n    // in Chrome on file:/// URLs, status is 0\n    if (status === 0) {\n      responseStatus = 200\n    }\n\n    const body = \"response\" in xhr ? xhr.response : xhr.responseText\n\n    return {\n      responseBody: body,\n      responseBodyType: detectBodyType(body),\n    }\n  }\n\n  const text = async () => {\n    const { responseBody, responseBodyType } = await readBody()\n\n    if (responseBodyType === \"blob\") {\n      return blobToText(responseBody)\n    }\n    if (responseBodyType === \"formData\") {\n      throw new Error(\"could not read FormData body as text\")\n    }\n    if (responseBodyType === \"dataView\") {\n      return arrayBufferToText(responseBody.buffer)\n    }\n    if (responseBodyType === \"arrayBuffer\") {\n      return arrayBufferToText(responseBody)\n    }\n    // if (responseBodyType === \"text\" || responseBodyType === 'searchParams') {\n    //   return body\n    // }\n    return String(responseBody)\n  }\n\n  const json = async () => {\n    const responseText = await text()\n    return JSON.parse(responseText)\n  }\n\n  const blob = async () => {\n    if (!hasBlob) {\n      throw new Error(`blob not supported`)\n    }\n\n    const { responseBody, responseBodyType } = await readBody()\n\n    if (responseBodyType === \"blob\") {\n      return responseBody\n    }\n    if (responseBodyType === \"dataView\") {\n      return new Blob([cloneBuffer(responseBody.buffer)])\n    }\n    if (responseBodyType === \"arrayBuffer\") {\n      return new Blob([cloneBuffer(responseBody)])\n    }\n    if (responseBodyType === \"formData\") {\n      throw new Error(\"could not read FormData body as blob\")\n    }\n    return new Blob([String(responseBody)])\n  }\n\n  const arrayBuffer = async () => {\n    const { responseBody, responseBodyType } = await readBody()\n\n    if (responseBodyType === \"arrayBuffer\") {\n      return cloneBuffer(responseBody)\n    }\n    const responseBlob = await blob()\n    return blobToArrayBuffer(responseBlob)\n  }\n\n  const formData = async () => {\n    if (!hasFormData) {\n      throw new Error(`formData not supported`)\n    }\n    const responseText = await text()\n    return textToFormData(responseText)\n  }\n\n  return {\n    url: responseUrl,\n    status: responseStatus,\n    statusText: responseStatusText,\n    headers: responseHeaders,\n    text,\n    json,\n    blob,\n    arrayBuffer,\n    formData,\n  }\n}\n\nconst canUseBlob = () => {\n  if (typeof window.FileReader !== \"function\") return false\n\n  if (typeof window.Blob !== \"function\") return false\n\n  try {\n    // eslint-disable-next-line no-new\n    new Blob()\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nconst hasBlob = canUseBlob()\n\nconst hasFormData = typeof window.FormData === \"function\"\n\nconst hasArrayBuffer = typeof window.ArrayBuffer === \"function\"\n\nconst hasSearchParams = typeof window.URLSearchParams === \"function\"\n\nconst createRequestError = (error, { url }) => {\n  return new Error(\n    createDetailedMessage(`error during xhr request on ${url}.`, {\n      [\"error stack\"]: error.stack,\n    }),\n  )\n}\n\nconst createPromiseAndHooks = () => {\n  let resolve\n  let reject\n  const promise = new Promise((res, rej) => {\n    resolve = (value) => {\n      promise.settled = true\n      res(value)\n    }\n    reject = (value) => {\n      promise.settled = true\n      rej(value)\n    }\n  })\n  promise.resolve = resolve\n  promise.reject = reject\n  return promise\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\nconst computeWithCredentials = ({ credentials, url }) => {\n  if (credentials === \"same-origin\") {\n    return originSameAsGlobalOrigin(url)\n  }\n  return credentials === \"include\"\n}\n\nconst originSameAsGlobalOrigin = (url) => {\n  // if we cannot read globalOrigin from window.location.origin, let's consider it's ok\n  if (typeof window !== \"object\") return true\n  if (typeof window.location !== \"object\") return true\n  const globalOrigin = window.location.origin\n  if (globalOrigin === \"null\") return true\n  return hrefToOrigin(url) === globalOrigin\n}\n\nconst detectBodyType = (body) => {\n  if (!body) {\n    return \"\"\n  }\n  if (typeof body === \"string\") {\n    return \"text\"\n  }\n  if (hasBlob && Blob.prototype.isPrototypeOf(body)) {\n    return \"blob\"\n  }\n  if (hasFormData && FormData.prototype.isPrototypeOf(body)) {\n    return \"formData\"\n  }\n  if (hasArrayBuffer) {\n    if (hasBlob && isDataView(body)) {\n      return `dataView`\n    }\n    if (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body)) {\n      return `arrayBuffer`\n    }\n  }\n  if (hasSearchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n    return \"searchParams\"\n  }\n  return \"\"\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\nconst getHeadersFromXHR = (xhr) => {\n  const headerMap = {}\n\n  const headersString = xhr.getAllResponseHeaders()\n  if (headersString === \"\") return headerMap\n\n  const lines = headersString.trim().split(/[\\r\\n]+/)\n  lines.forEach((line) => {\n    const parts = line.split(\": \")\n    const name = parts.shift()\n    const value = parts.join(\": \")\n    headerMap[name.toLowerCase()] = value\n  })\n\n  return headerMap\n}\n\nconst hrefToOrigin = (href) => {\n  const scheme = hrefToScheme(href)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = href.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return href\n    return href.slice(0, pathnameSlashIndex)\n  }\n\n  return href.slice(0, scheme.length + 1)\n}\n\nconst hrefToScheme = (href) => {\n  const colonIndex = href.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return href.slice(0, colonIndex)\n}\n\nconst isDataView = (obj) => {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nconst isArrayBufferView =\n  ArrayBuffer.isView ||\n  (() => {\n    const viewClasses = [\n      \"[object Int8Array]\",\n      \"[object Uint8Array]\",\n      \"[object Uint8ClampedArray]\",\n      \"[object Int16Array]\",\n      \"[object Uint16Array]\",\n      \"[object Int32Array]\",\n      \"[object Uint32Array]\",\n      \"[object Float32Array]\",\n      \"[object Float64Array]\",\n    ]\n\n    return (value) => {\n      return value && viewClasses.includes(Object.prototype.toString.call(value))\n    }\n  })()\n\nconst textToFormData = (text) => {\n  const form = new FormData()\n  text\n    .trim()\n    .split(\"&\")\n    .forEach(function (bytes) {\n      if (bytes) {\n        const split = bytes.split(\"=\")\n        const name = split.shift().replace(/\\+/g, \" \")\n        const value = split.join(\"=\").replace(/\\+/g, \" \")\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nconst blobToArrayBuffer = async (blob) => {\n  const reader = new FileReader()\n  const promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nconst blobToText = (blob) => {\n  const reader = new FileReader()\n  const promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nconst arrayBufferToText = (arrayBuffer) => {\n  const view = new Uint8Array(arrayBuffer)\n  const chars = new Array(view.length)\n  let i = 0\n  while (i < view.length) {\n    chars[i] = String.fromCharCode(view[i])\n\n    i++\n  }\n  return chars.join(\"\")\n}\n\nconst fileReaderReady = (reader) => {\n  return new Promise(function (resolve, reject) {\n    reader.onload = function () {\n      resolve(reader.result)\n    }\n    reader.onerror = function () {\n      reject(reader.error)\n    }\n  })\n}\n\nconst cloneBuffer = (buffer) => {\n  if (buffer.slice) {\n    return buffer.slice(0)\n  }\n  const view = new Uint8Array(buffer.byteLength)\n  view.set(new Uint8Array(buffer))\n  return view.buffer\n}\n",
    "import { createCancellationToken } from \"@jsenv/cancellation/main.browser.js\"\nimport { fetchUsingXHR } from \"./fetchUsingXHR.js\"\n\nconst fetchNative = async (\n  url,\n  { cancellationToken = createCancellationToken(), mode = \"cors\", ...options } = {},\n) => {\n  const abortController = new AbortController()\n\n  let cancelError\n  cancellationToken.register((reason) => {\n    cancelError = reason\n    abortController.abort(reason)\n  })\n\n  let response\n  try {\n    response = await window.fetch(url, {\n      signal: abortController.signal,\n      mode,\n      ...options,\n    })\n  } catch (e) {\n    if (cancelError && e.name === \"AbortError\") {\n      throw cancelError\n    }\n    throw e\n  }\n\n  return {\n    url: response.url,\n    status: response.status,\n    statusText: \"\",\n    headers: responseToHeaders(response),\n    text: () => response.text(),\n    json: () => response.json(),\n    blob: () => response.blob(),\n    arrayBuffer: () => response.arrayBuffer(),\n    formData: () => response.formData(),\n  }\n}\n\nconst responseToHeaders = (response) => {\n  const headers = {}\n  response.headers.forEach((value, name) => {\n    headers[name] = value\n  })\n  return headers\n}\n\nexport const fetchUrl =\n  typeof window.fetch === \"function\" && typeof window.AbortController === \"function\"\n    ? fetchNative\n    : fetchUsingXHR\n",
    "export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { assertImportMap } from \"./internal/assertImportMap.js\"\nimport { hasScheme } from \"./internal/hasScheme.js\"\nimport { tryUrlResolution } from \"./internal/tryUrlResolution.js\"\nimport { resolveSpecifier } from \"./resolveSpecifier.js\"\n\nexport const applyImportMap = ({\n  importMap,\n  specifier,\n  importer,\n  createBareSpecifierError = ({ specifier, importer }) => {\n    return new Error(createDetailedMessage(`Unmapped bare specifier.`, { specifier, importer }))\n  },\n  onImportMapping = () => {},\n}) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(\n      createDetailedMessage(\"specifier must be a string.\", {\n        specifier,\n        importer,\n      }),\n    )\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(\n        createDetailedMessage(\"importer must be a string.\", {\n          importer,\n          specifier,\n        }),\n      )\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(\n        createDetailedMessage(`importer must be an absolute url.`, {\n          importer,\n          specifier,\n        }),\n      )\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeSpecifierMatching = Object.keys(scopes).find((scopeSpecifier) => {\n      return scopeSpecifier === importer || specifierIsPrefixOf(scopeSpecifier, importer)\n    })\n    if (scopeSpecifierMatching) {\n      const scopeMappings = scopes[scopeSpecifierMatching]\n      const mappingFromScopes = applyMappings(\n        scopeMappings,\n        specifierNormalized,\n        scopeSpecifierMatching,\n        onImportMapping,\n      )\n      if (mappingFromScopes !== null) {\n        return mappingFromScopes\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const mappingFromImports = applyMappings(\n      imports,\n      specifierNormalized,\n      undefined,\n      onImportMapping,\n    )\n    if (mappingFromImports !== null) {\n      return mappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw createBareSpecifierError({ specifier, importer })\n}\n\nconst applyMappings = (mappings, specifierNormalized, scope, onImportMapping) => {\n  const specifierCandidates = Object.keys(mappings)\n\n  let i = 0\n  while (i < specifierCandidates.length) {\n    const specifierCandidate = specifierCandidates[i]\n    i++\n    if (specifierCandidate === specifierNormalized) {\n      const address = mappings[specifierCandidate]\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: address,\n      })\n      return address\n    }\n    if (specifierIsPrefixOf(specifierCandidate, specifierNormalized)) {\n      const address = mappings[specifierCandidate]\n      const afterSpecifier = specifierNormalized.slice(specifierCandidate.length)\n      const addressFinal = tryUrlResolution(afterSpecifier, address)\n      onImportMapping({\n        scope,\n        from: specifierCandidate,\n        to: address,\n        before: specifierNormalized,\n        after: addressFinal,\n      })\n      return addressFinal\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return specifierHref[specifierHref.length - 1] === \"/\" && href.startsWith(specifierHref)\n}\n",
    "import { urlToPathname } from \"./internal/urlToPathname.js\"\nimport { pathnameToExtension } from \"./internal/pathnameToExtension.js\"\nimport { resolveUrl } from \"./resolveUrl.js\"\nimport { applyImportMap } from \"./applyImportMap.js\"\n\nexport const resolveImport = ({\n  specifier,\n  importer,\n  importMap,\n  defaultExtension = true,\n  createBareSpecifierError,\n  onImportMapping = () => {},\n}) => {\n  return applyDefaultExtension({\n    url: importMap\n      ? applyImportMap({\n          importMap,\n          specifier,\n          importer,\n          createBareSpecifierError,\n          onImportMapping,\n        })\n      : resolveUrl(specifier, importer),\n    importer,\n    defaultExtension,\n  })\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (urlToPathname(url).endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = urlToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n  return url\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\n\nexport const fromFunctionReturningNamespace = (fn, data) => {\n  return fromFunctionReturningRegisteredModule(() => {\n    // should we compute the namespace here\n    // or as it is done below, defer to execute ?\n    // I think defer to execute is better\n    return [\n      [],\n      (_export) => {\n        return {\n          execute: () => {\n            const namespace = fn()\n            _export(namespace)\n          },\n        }\n      },\n    ]\n  }, data)\n}\n\nconst fromFunctionReturningRegisteredModule = (fn, data) => {\n  try {\n    return fn()\n  } catch (error) {\n    if (error.name === \"SyntaxError\") {\n      throw new Error(\n        createDetailedMessage(`Syntax error in module.`, {\n          \"syntax error stack\": error.stack,\n          ...getModuleDetails(data),\n        }),\n      )\n    }\n    throw new Error(\n      createDetailedMessage(`Module instantiation error.`, {\n        [\"instantiation error stack\"]: error.stack,\n        ...getModuleDetails(data),\n      }),\n    )\n  }\n}\n\nexport const fromUrl = async ({\n  url,\n  importerUrl,\n  fetchSource,\n  instantiateJavaScript,\n  compileServerOrigin,\n  compileDirectoryRelativeUrl,\n}) => {\n  let moduleResponse\n  try {\n    moduleResponse = await fetchSource(url, {\n      importerUrl,\n    })\n\n    if (moduleResponse.status === 404) {\n      throw new Error(\n        createDetailedMessage(\n          `Module file cannot be found.`,\n          getModuleDetails({\n            url,\n            importerUrl,\n            compileServerOrigin,\n            compileDirectoryRelativeUrl,\n            notFound: true,\n          }),\n        ),\n      )\n    }\n  } catch (e) {\n    e.code = \"NETWORK_FAILURE\"\n    throw e\n  }\n\n  const contentType = moduleResponse.headers[\"content-type\"] || \"\"\n\n  if (moduleResponse.status === 500 && contentType === \"application/json\") {\n    const bodyAsJson = await moduleResponse.json()\n    if (bodyAsJson.message && bodyAsJson.filename && \"columnNumber\" in bodyAsJson) {\n      const error = new Error(\n        createDetailedMessage(`Module file cannot be parsed.`, {\n          [\"parsing error message\"]: bodyAsJson.message,\n          ...getModuleDetails({\n            url,\n            importerUrl,\n            compileServerOrigin,\n            compileDirectoryRelativeUrl,\n          }),\n        }),\n      )\n      error.parsingError = bodyAsJson\n      throw error\n    }\n  }\n\n  if (moduleResponse.status < 200 || moduleResponse.status >= 300) {\n    throw new Error(\n      createDetailedMessage(`Module file response status is unexpected.`, {\n        [\"status\"]: moduleResponse.status,\n        [\"allowed status\"]: \"200 to 299\",\n        [\"statusText\"]: moduleResponse.statusText,\n        ...getModuleDetails({\n          url,\n          importerUrl,\n          compileServerOrigin,\n          compileDirectoryRelativeUrl,\n        }),\n      }),\n    )\n  }\n\n  // don't forget to keep it close to https://github.com/systemjs/systemjs/blob/9a15cfd3b7a9fab261e1848b1b2fa343d73afedb/src/extras/module-types.js#L21\n  // and in sync with loadModule in createJsenvRollupPlugin.js\n  if (contentType === \"application/javascript\" || contentType === \"text/javascript\") {\n    const bodyAsText = await moduleResponse.text()\n    return fromFunctionReturningRegisteredModule(\n      () => instantiateJavaScript(bodyAsText, moduleResponse.url),\n      {\n        url: moduleResponse.url,\n        importerUrl,\n        compileServerOrigin,\n        compileDirectoryRelativeUrl,\n      },\n    )\n  }\n\n  if (contentType === \"application/json\" || contentType === \"application/importmap+json\") {\n    const bodyAsJson = await moduleResponse.json()\n    return fromFunctionReturningNamespace(\n      () => {\n        return {\n          default: bodyAsJson,\n        }\n      },\n      {\n        url: moduleResponse.url,\n        importerUrl,\n        compileServerOrigin,\n        compileDirectoryRelativeUrl,\n      },\n    )\n  }\n\n  if (contentTypeShouldBeReadAsText(contentType)) {\n    return fromFunctionReturningNamespace(\n      () => {\n        return {\n          default: moduleResponse.url,\n        }\n      },\n      {\n        url: moduleResponse.url,\n        importerUrl,\n        compileServerOrigin,\n        compileDirectoryRelativeUrl,\n      },\n    )\n  }\n\n  if (contentType) {\n    // for now content type different of javascript are not unusual anymore\n    // ideally we would not use static import to tell rollup we have a dependency to an url\n    // insetad we would write something that would be compatible with web strandard such as\n    // new URL('./whatever', import.meta.url)\n    // or import.meta.resolve('./whatever')\n    //     console.warn(`Module content-type is unusual.\n    // ['content-type']:   // ${contentType}\n    // ['allowed content-type']:   // application/javascript\n    // application/json\n    // text/*\n    // ${getModuleDetails({ url, importerUrl, compileServerOrigin, outDirectoryRelativeUrl })}`)\n  } else {\n    console.warn(`Module content-type is missing.`, {\n      [\"allowed content-type\"]: [\"aplication/javascript\", \"application/json\", \"text/*\"],\n      ...getModuleDetails({\n        url,\n        importerUrl,\n        compileServerOrigin,\n        compileDirectoryRelativeUrl,\n      }),\n    })\n  }\n\n  return fromFunctionReturningNamespace(\n    () => {\n      return {\n        default: moduleResponse.url,\n      }\n    },\n    {\n      url: moduleResponse.url,\n      importerUrl,\n      compileServerOrigin,\n      compileDirectoryRelativeUrl,\n    },\n  )\n}\n\nconst contentTypeShouldBeReadAsText = (contentType) => {\n  if (contentType.startsWith(\"text/\")) {\n    return true\n  }\n  if (contentType === \"image/svg+xml\") {\n    return true\n  }\n  return false\n}\n\n// const textToBase64 =\n//   typeof window === \"object\"\n//     ? (text) => window.btoa(window.unescape(window.encodeURIComponent(text)))\n//     : (text) => Buffer.from(text, \"utf8\").toString(\"base64\")\n\nconst getModuleDetails = ({\n  url,\n  importerUrl,\n  compileServerOrigin,\n  compileDirectoryRelativeUrl,\n  notFound = false,\n}) => {\n  const relativeUrl = tryToFindProjectRelativeUrl(url, {\n    compileServerOrigin,\n    compileDirectoryRelativeUrl,\n  })\n\n  const importerRelativeUrl = tryToFindProjectRelativeUrl(importerUrl, {\n    compileServerOrigin,\n    compileDirectoryRelativeUrl,\n  })\n\n  const details = notFound\n    ? {\n        ...(importerUrl ? { [\"import declared in\"]: importerRelativeUrl || importerUrl } : {}),\n        ...(relativeUrl ? { file: relativeUrl } : {}),\n        [\"file url\"]: url,\n      }\n    : {\n        ...(relativeUrl ? { file: relativeUrl } : {}),\n        [\"file url\"]: url,\n        ...(importerUrl ? { [\"imported by\"]: importerRelativeUrl || importerUrl } : {}),\n      }\n\n  return details\n}\n\nexport const tryToFindProjectRelativeUrl = (\n  url,\n  { compileServerOrigin, compileDirectoryRelativeUrl },\n) => {\n  if (!url) {\n    return null\n  }\n\n  if (!url.startsWith(`${compileServerOrigin}/`)) {\n    return null\n  }\n\n  if (url === compileServerOrigin) {\n    return null\n  }\n\n  const afterOrigin = url.slice(`${compileServerOrigin}/`.length)\n  if (!afterOrigin.startsWith(compileDirectoryRelativeUrl)) {\n    return null\n  }\n\n  const afterCompileDirectory = afterOrigin.slice(compileDirectoryRelativeUrl.length)\n  return afterCompileDirectory\n}\n",
    "export const applyDefaultExtension = (specifier, importer) => {\n  if (!importer) {\n    return specifier\n  }\n\n  const importerExtension = urlToExtension(importer)\n  const fakeUrl = new URL(specifier, importer).href\n  const specifierExtension = urlToExtension(fakeUrl)\n  if (specifierExtension !== \"\") {\n    return specifier\n  }\n\n  // I guess typescript still expect default extension to be .ts\n  // in a tsx file.\n  if (importerExtension === \"tsx\") {\n    return `${specifier}.ts`\n  }\n\n  // extension magic\n  return `${specifier}${importerExtension}`\n}\n\nconst urlToExtension = (url) => {\n  return pathnameToExtension(urlToPathname(url))\n}\n\nconst urlToPathname = (url) => new URL(url).pathname\n\nconst pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  const extension = pathname.slice(dotLastIndex)\n  return extension\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { resolveImport } from \"@jsenv/import-map/src/resolveImport.js\"\n\nimport { tryToFindProjectRelativeUrl } from \"@jsenv/core/src/internal/runtime/module-registration.js\"\n\nimport { applyDefaultExtension } from \"./default-extension.js\"\n\nexport const createImportResolverForImportmap = async ({\n  // projectDirectoryUrl,\n  compileServerOrigin,\n  compileDirectoryRelativeUrl,\n  importMap,\n  importMapUrl,\n  importDefaultExtension,\n  onBareSpecifierError = () => {},\n}) => {\n  const _resolveImport = (specifier, importer) => {\n    if (importDefaultExtension) {\n      specifier = applyDefaultExtension(specifier, importer)\n    }\n    return resolveImport({\n      specifier,\n      importer,\n      importMap,\n      createBareSpecifierError: ({ specifier, importer }) => {\n        const bareSpecifierError = createBareSpecifierError({\n          specifier,\n          importer:\n            tryToFindProjectRelativeUrl(importer, {\n              compileServerOrigin,\n              compileDirectoryRelativeUrl,\n            }) || importer,\n          importMapUrl:\n            tryToFindProjectRelativeUrl(importMapUrl, {\n              compileServerOrigin,\n              compileDirectoryRelativeUrl,\n            }) || importMapUrl,\n          importMap,\n        })\n        onBareSpecifierError(bareSpecifierError)\n        return bareSpecifierError\n      },\n    })\n  }\n\n  return { resolveImport: _resolveImport }\n}\n\nconst createBareSpecifierError = ({ specifier, importer, importMapUrl }) => {\n  const detailedMessage = createDetailedMessage(\"Unmapped bare specifier.\", {\n    specifier,\n    importer,\n    ...(importMapUrl\n      ? {\n          \"how to fix\": `Add a mapping for \"${specifier}\" into the importmap file at ${importMapUrl}`,\n        }\n      : {\n          \"how to fix\": `Add an importmap with a mapping for \"${specifier}\"`,\n          \"suggestion\": `Generate importmap using https://github.com/jsenv/importmap-node-module`,\n        }),\n  })\n\n  return new Error(detailedMessage)\n}\n",
    "/* eslint-env browser */\n\nconst { performance } = window\n\nexport const measureAsyncFnPerf = performance\n  ? async (fn, name) => {\n      const perfMarkStartName = `${name}_start`\n\n      performance.mark(perfMarkStartName)\n      try {\n        const value = await fn()\n        return value\n      } finally {\n        performance.measure(name, perfMarkStartName)\n      }\n    }\n  : async (fn) => {\n      return fn()\n    }\n",
    "/*\n* SJS 6.10.2\n* Minimal SystemJS Build\n*/\n(function () {\n\n  function errMsg(errCode, msg) {\n    return (msg || \"\") + \" (SystemJS https://git.io/JvFET#\" + errCode + \")\";\n  }\n\n  var hasSymbol = typeof Symbol !== 'undefined';\n  var hasSelf = typeof self !== 'undefined';\n  var hasDocument = typeof document !== 'undefined';\n\n  var envGlobal = hasSelf ? self : global;\n\n  var baseUrl;\n\n  if (hasDocument) {\n    var baseEl = document.querySelector('base[href]');\n    if (baseEl)\n      baseUrl = baseEl.href;\n  }\n\n  if (!baseUrl && typeof location !== 'undefined') {\n    baseUrl = location.href.split('#')[0].split('?')[0];\n    var lastSepIndex = baseUrl.lastIndexOf('/');\n    if (lastSepIndex !== -1)\n      baseUrl = baseUrl.slice(0, lastSepIndex + 1);\n  }\n\n  var backslashRegEx = /\\\\/g;\n  function resolveIfNotPlainOrUrl (relUrl, parentUrl) {\n    if (relUrl.indexOf('\\\\') !== -1)\n      relUrl = relUrl.replace(backslashRegEx, '/');\n    // protocol-relative\n    if (relUrl[0] === '/' && relUrl[1] === '/') {\n      return parentUrl.slice(0, parentUrl.indexOf(':') + 1) + relUrl;\n    }\n    // relative-url\n    else if (relUrl[0] === '.' && (relUrl[1] === '/' || relUrl[1] === '.' && (relUrl[2] === '/' || relUrl.length === 2 && (relUrl += '/')) ||\n        relUrl.length === 1  && (relUrl += '/')) ||\n        relUrl[0] === '/') {\n      var parentProtocol = parentUrl.slice(0, parentUrl.indexOf(':') + 1);\n      // Disabled, but these cases will give inconsistent results for deep backtracking\n      //if (parentUrl[parentProtocol.length] !== '/')\n      //  throw Error('Cannot resolve');\n      // read pathname from parent URL\n      // pathname taken to be part after leading \"/\"\n      var pathname;\n      if (parentUrl[parentProtocol.length + 1] === '/') {\n        // resolving to a :// so we need to read out the auth and host\n        if (parentProtocol !== 'file:') {\n          pathname = parentUrl.slice(parentProtocol.length + 2);\n          pathname = pathname.slice(pathname.indexOf('/') + 1);\n        }\n        else {\n          pathname = parentUrl.slice(8);\n        }\n      }\n      else {\n        // resolving to :/ so pathname is the /... part\n        pathname = parentUrl.slice(parentProtocol.length + (parentUrl[parentProtocol.length] === '/'));\n      }\n\n      if (relUrl[0] === '/')\n        return parentUrl.slice(0, parentUrl.length - pathname.length - 1) + relUrl;\n\n      // join together and split for removal of .. and . segments\n      // looping the string instead of anything fancy for perf reasons\n      // '../../../../../z' resolved to 'x/y' is just 'z'\n      var segmented = pathname.slice(0, pathname.lastIndexOf('/') + 1) + relUrl;\n\n      var output = [];\n      var segmentIndex = -1;\n      for (var i = 0; i < segmented.length; i++) {\n        // busy reading a segment - only terminate on '/'\n        if (segmentIndex !== -1) {\n          if (segmented[i] === '/') {\n            output.push(segmented.slice(segmentIndex, i + 1));\n            segmentIndex = -1;\n          }\n        }\n\n        // new segment - check if it is relative\n        else if (segmented[i] === '.') {\n          // ../ segment\n          if (segmented[i + 1] === '.' && (segmented[i + 2] === '/' || i + 2 === segmented.length)) {\n            output.pop();\n            i += 2;\n          }\n          // ./ segment\n          else if (segmented[i + 1] === '/' || i + 1 === segmented.length) {\n            i += 1;\n          }\n          else {\n            // the start of a new segment as below\n            segmentIndex = i;\n          }\n        }\n        // it is the start of a new segment\n        else {\n          segmentIndex = i;\n        }\n      }\n      // finish reading out the last segment\n      if (segmentIndex !== -1)\n        output.push(segmented.slice(segmentIndex));\n      return parentUrl.slice(0, parentUrl.length - pathname.length) + output.join('');\n    }\n  }\n\n  /*\n   * Import maps implementation\n   *\n   * To make lookups fast we pre-resolve the entire import map\n   * and then match based on backtracked hash lookups\n   *\n   */\n\n  function resolveUrl (relUrl, parentUrl) {\n    return resolveIfNotPlainOrUrl(relUrl, parentUrl) || (relUrl.indexOf(':') !== -1 ? relUrl : resolveIfNotPlainOrUrl('./' + relUrl, parentUrl));\n  }\n\n  function resolveAndComposePackages (packages, outPackages, baseUrl, parentMap, parentUrl) {\n    for (var p in packages) {\n      var resolvedLhs = resolveIfNotPlainOrUrl(p, baseUrl) || p;\n      var rhs = packages[p];\n      // package fallbacks not currently supported\n      if (typeof rhs !== 'string')\n        continue;\n      var mapped = resolveImportMap(parentMap, resolveIfNotPlainOrUrl(rhs, baseUrl) || rhs, parentUrl);\n      if (!mapped) {\n        targetWarning('W1', p, rhs);\n      }\n      else\n        outPackages[resolvedLhs] = mapped;\n    }\n  }\n\n  function resolveAndComposeImportMap (json, baseUrl, outMap) {\n    if (json.imports)\n      resolveAndComposePackages(json.imports, outMap.imports, baseUrl, outMap, null);\n\n    var u;\n    for (u in json.scopes || {}) {\n      var resolvedScope = resolveUrl(u, baseUrl);\n      resolveAndComposePackages(json.scopes[u], outMap.scopes[resolvedScope] || (outMap.scopes[resolvedScope] = {}), baseUrl, outMap, resolvedScope);\n    }\n\n    for (u in json.depcache || {})\n      outMap.depcache[resolveUrl(u, baseUrl)] = json.depcache[u];\n\n    for (u in json.integrity || {})\n      outMap.integrity[resolveUrl(u, baseUrl)] = json.integrity[u];\n  }\n\n  function getMatch (path, matchObj) {\n    if (matchObj[path])\n      return path;\n    var sepIndex = path.length;\n    do {\n      var segment = path.slice(0, sepIndex + 1);\n      if (segment in matchObj)\n        return segment;\n    } while ((sepIndex = path.lastIndexOf('/', sepIndex - 1)) !== -1)\n  }\n\n  function applyPackages (id, packages) {\n    var pkgName = getMatch(id, packages);\n    if (pkgName) {\n      var pkg = packages[pkgName];\n      if (pkg === null) return;\n      if (id.length > pkgName.length && pkg[pkg.length - 1] !== '/') {\n        targetWarning('W2', pkgName, pkg);\n      }\n      else\n        return pkg + id.slice(pkgName.length);\n    }\n  }\n\n  function targetWarning (code, match, target, msg) {\n    console.warn(errMsg(code,  [target, match].join(', ') ));\n  }\n\n  function resolveImportMap (importMap, resolvedOrPlain, parentUrl) {\n    var scopes = importMap.scopes;\n    var scopeUrl = parentUrl && getMatch(parentUrl, scopes);\n    while (scopeUrl) {\n      var packageResolution = applyPackages(resolvedOrPlain, scopes[scopeUrl]);\n      if (packageResolution)\n        return packageResolution;\n      scopeUrl = getMatch(scopeUrl.slice(0, scopeUrl.lastIndexOf('/')), scopes);\n    }\n    return applyPackages(resolvedOrPlain, importMap.imports) || resolvedOrPlain.indexOf(':') !== -1 && resolvedOrPlain;\n  }\n\n  /*\n   * SystemJS Core\n   *\n   * Provides\n   * - System.import\n   * - System.register support for\n   *     live bindings, function hoisting through circular references,\n   *     reexports, dynamic import, import.meta.url, top-level await\n   * - System.getRegister to get the registration\n   * - Symbol.toStringTag support in Module objects\n   * - Hookable System.createContext to customize import.meta\n   * - System.onload(err, id, deps) handler for tracing / hot-reloading\n   *\n   * Core comes with no System.prototype.resolve or\n   * System.prototype.instantiate implementations\n   */\n\n  var toStringTag = hasSymbol && Symbol.toStringTag;\n  var REGISTRY = hasSymbol ? Symbol() : '@';\n\n  function SystemJS () {\n    this[REGISTRY] = {};\n  }\n\n  var systemJSPrototype = SystemJS.prototype;\n\n  systemJSPrototype.import = function (id, parentUrl) {\n    var loader = this;\n    return Promise.resolve(loader.prepareImport())\n    .then(function() {\n      return loader.resolve(id, parentUrl);\n    })\n    .then(function (id) {\n      var load = getOrCreateLoad(loader, id);\n      return load.C || topLevelLoad(loader, load);\n    });\n  };\n\n  // Hookable createContext function -> allowing eg custom import meta\n  systemJSPrototype.createContext = function (parentId) {\n    var loader = this;\n    return {\n      url: parentId,\n      resolve: function (id, parentUrl) {\n        return Promise.resolve(loader.resolve(id, parentUrl || parentId));\n      }\n    };\n  };\n  function loadToId (load) {\n    return load.id;\n  }\n  function triggerOnload (loader, load, err, isErrSource) {\n    loader.onload(err, load.id, load.d && load.d.map(loadToId), !!isErrSource);\n    if (err)\n      throw err;\n  }\n\n  var lastRegister;\n  systemJSPrototype.register = function (deps, declare) {\n    lastRegister = [deps, declare];\n  };\n\n  /*\n   * getRegister provides the last anonymous System.register call\n   */\n  systemJSPrototype.getRegister = function () {\n    var _lastRegister = lastRegister;\n    lastRegister = undefined;\n    return _lastRegister;\n  };\n\n  function getOrCreateLoad (loader, id, firstParentUrl) {\n    var load = loader[REGISTRY][id];\n    if (load)\n      return load;\n\n    var importerSetters = [];\n    var ns = Object.create(null);\n    if (toStringTag)\n      Object.defineProperty(ns, toStringTag, { value: 'Module' });\n\n    var instantiatePromise = Promise.resolve()\n    .then(function () {\n      return loader.instantiate(id, firstParentUrl);\n    })\n    .then(function (registration) {\n      if (!registration)\n        throw Error(errMsg(2,  id ));\n      function _export (name, value) {\n        // note if we have hoisted exports (including reexports)\n        load.h = true;\n        var changed = false;\n        if (typeof name === 'string') {\n          if (!(name in ns) || ns[name] !== value) {\n            ns[name] = value;\n            changed = true;\n          }\n        }\n        else {\n          for (var p in name) {\n            var value = name[p];\n            if (!(p in ns) || ns[p] !== value) {\n              ns[p] = value;\n              changed = true;\n            }\n          }\n\n          if (name && name.__esModule) {\n            ns.__esModule = name.__esModule;\n          }\n        }\n        if (changed)\n          for (var i = 0; i < importerSetters.length; i++) {\n            var setter = importerSetters[i];\n            if (setter) setter(ns);\n          }\n        return value;\n      }\n      var declared = registration[1](_export, registration[1].length === 2 ? {\n        import: function (importId) {\n          return loader.import(importId, id);\n        },\n        meta: loader.createContext(id)\n      } : undefined);\n      load.e = declared.execute || function () {};\n      return [registration[0], declared.setters || []];\n    }, function (err) {\n      load.e = null;\n      load.er = err;\n      throw err;\n    });\n\n    var linkPromise = instantiatePromise\n    .then(function (instantiation) {\n      return Promise.all(instantiation[0].map(function (dep, i) {\n        var setter = instantiation[1][i];\n        return Promise.resolve(loader.resolve(dep, id))\n        .then(function (depId) {\n          var depLoad = getOrCreateLoad(loader, depId, id);\n          // depLoad.I may be undefined for already-evaluated\n          return Promise.resolve(depLoad.I)\n          .then(function () {\n            if (setter) {\n              depLoad.i.push(setter);\n              // only run early setters when there are hoisted exports of that module\n              // the timing works here as pending hoisted export calls will trigger through importerSetters\n              if (depLoad.h || !depLoad.I)\n                setter(depLoad.n);\n            }\n            return depLoad;\n          });\n        });\n      }))\n      .then(function (depLoads) {\n        load.d = depLoads;\n      });\n    });\n\n    // Capital letter = a promise function\n    return load = loader[REGISTRY][id] = {\n      id: id,\n      // importerSetters, the setters functions registered to this dependency\n      // we retain this to add more later\n      i: importerSetters,\n      // module namespace object\n      n: ns,\n\n      // instantiate\n      I: instantiatePromise,\n      // link\n      L: linkPromise,\n      // whether it has hoisted exports\n      h: false,\n\n      // On instantiate completion we have populated:\n      // dependency load records\n      d: undefined,\n      // execution function\n      e: undefined,\n\n      // On execution we have populated:\n      // the execution error if any\n      er: undefined,\n      // in the case of TLA, the execution promise\n      E: undefined,\n\n      // On execution, L, I, E cleared\n\n      // Promise for top-level completion\n      C: undefined,\n\n      // parent instantiator / executor\n      p: undefined\n    };\n  }\n\n  function instantiateAll (loader, load, parent, loaded) {\n    if (!loaded[load.id]) {\n      loaded[load.id] = true;\n      // load.L may be undefined for already-instantiated\n      return Promise.resolve(load.L)\n      .then(function () {\n        if (!load.p || load.p.e === null)\n          load.p = parent;\n        return Promise.all(load.d.map(function (dep) {\n          return instantiateAll(loader, dep, parent, loaded);\n        }));\n      })\n      .catch(function (err) {\n        if (load.er)\n          throw err;\n        load.e = null;\n        throw err;\n      });\n    }\n  }\n\n  function topLevelLoad (loader, load) {\n    return load.C = instantiateAll(loader, load, load, {})\n    .then(function () {\n      return postOrderExec(loader, load, {});\n    })\n    .then(function () {\n      return load.n;\n    });\n  }\n\n  // the closest we can get to call(undefined)\n  var nullContext = Object.freeze(Object.create(null));\n\n  // returns a promise if and only if a top-level await subgraph\n  // throws on sync errors\n  function postOrderExec (loader, load, seen) {\n    if (seen[load.id])\n      return;\n    seen[load.id] = true;\n\n    if (!load.e) {\n      if (load.er)\n        throw load.er;\n      if (load.E)\n        return load.E;\n      return;\n    }\n\n    // deps execute first, unless circular\n    var depLoadPromises;\n    load.d.forEach(function (depLoad) {\n      try {\n        var depLoadPromise = postOrderExec(loader, depLoad, seen);\n        if (depLoadPromise)\n          (depLoadPromises = depLoadPromises || []).push(depLoadPromise);\n      }\n      catch (err) {\n        load.e = null;\n        load.er = err;\n        throw err;\n      }\n    });\n    if (depLoadPromises)\n      return Promise.all(depLoadPromises).then(doExec);\n\n    return doExec();\n\n    function doExec () {\n      try {\n        var execPromise = load.e.call(nullContext);\n        if (execPromise) {\n          execPromise = execPromise.then(function () {\n            load.C = load.n;\n            load.E = null; // indicates completion\n            if (!true) ;\n          }, function (err) {\n            load.er = err;\n            load.E = null;\n            if (!true) ;\n            throw err;\n          });\n          return load.E = execPromise;\n        }\n        // (should be a promise, but a minify optimization to leave out Promise.resolve)\n        load.C = load.n;\n        load.L = load.I = undefined;\n      }\n      catch (err) {\n        load.er = err;\n        throw err;\n      }\n      finally {\n        load.e = null;\n      }\n    }\n  }\n\n  envGlobal.System = new SystemJS();\n\n  /*\n   * SystemJS browser attachments for script and import map processing\n   */\n\n  var importMapPromise = Promise.resolve();\n  var importMap = { imports: {}, scopes: {}, depcache: {}, integrity: {} };\n\n  // Scripts are processed immediately, on the first System.import, and on DOMReady.\n  // Import map scripts are processed only once (by being marked) and in order for each phase.\n  // This is to avoid using DOM mutation observers in core, although that would be an alternative.\n  var processFirst = hasDocument;\n  systemJSPrototype.prepareImport = function (doProcessScripts) {\n    if (processFirst || doProcessScripts) {\n      processScripts();\n      processFirst = false;\n    }\n    return importMapPromise;\n  };\n  if (hasDocument) {\n    processScripts();\n    window.addEventListener('DOMContentLoaded', processScripts);\n  }\n\n  function processScripts () {\n    [].forEach.call(document.querySelectorAll('script'), function (script) {\n      if (script.sp) // sp marker = systemjs processed\n        return;\n      // TODO: deprecate systemjs-module in next major now that we have auto import\n      if (script.type === 'systemjs-module') {\n        script.sp = true;\n        if (!script.src)\n          return;\n        System.import(script.src.slice(0, 7) === 'import:' ? script.src.slice(7) : resolveUrl(script.src, baseUrl)).catch(function (e) {\n          // if there is a script load error, dispatch an \"error\" event\n          // on the script tag.\n          if (e.message.indexOf('https://git.io/JvFET#3') > -1) {\n            var event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            script.dispatchEvent(event);\n          }\n          return Promise.reject(e);\n        });\n      }\n      else if (script.type === 'systemjs-importmap') {\n        script.sp = true;\n        var fetchPromise = script.src ? fetch(script.src, { integrity: script.integrity }).then(function (res) {\n          if (!res.ok)\n            throw Error( res.status );\n          return res.text();\n        }).catch(function (err) {\n          err.message = errMsg('W4',  script.src ) + '\\n' + err.message;\n          console.warn(err);\n          if (typeof script.onerror === 'function') {\n              script.onerror();\n          }\n          return '{}';\n        }) : script.innerHTML;\n        importMapPromise = importMapPromise.then(function () {\n          return fetchPromise;\n        }).then(function (text) {\n          extendImportMap(importMap, text, script.src || baseUrl);\n        });\n      }\n    });\n  }\n\n  function extendImportMap (importMap, newMapText, newMapUrl) {\n    var newMap = {};\n    try {\n      newMap = JSON.parse(newMapText);\n    } catch (err) {\n      console.warn(Error(( errMsg('W5')  )));\n    }\n    resolveAndComposeImportMap(newMap, newMapUrl, importMap);\n  }\n\n  /*\n   * Script instantiation loading\n   */\n\n  if (hasDocument) {\n    window.addEventListener('error', function (evt) {\n      lastWindowErrorUrl = evt.filename;\n      lastWindowError = evt.error;\n    });\n    var baseOrigin = location.origin;\n  }\n\n  systemJSPrototype.createScript = function (url) {\n    var script = document.createElement('script');\n    script.async = true;\n    // Only add cross origin for actual cross origin\n    // this is because Safari triggers for all\n    // - https://bugs.webkit.org/show_bug.cgi?id=171566\n    if (url.indexOf(baseOrigin + '/'))\n      script.crossOrigin = 'anonymous';\n    var integrity = importMap.integrity[url];\n    if (integrity)\n      script.integrity = integrity;\n    script.src = url;\n    return script;\n  };\n\n  // Auto imports -> script tags can be inlined directly for load phase\n  var lastAutoImportUrl, lastAutoImportDeps, lastAutoImportTimeout;\n  var autoImportCandidates = {};\n  var systemRegister = systemJSPrototype.register;\n  systemJSPrototype.register = function (deps, declare) {\n    if (hasDocument && document.readyState === 'loading' && typeof deps !== 'string') {\n      var scripts = document.querySelectorAll('script[src]');\n      var lastScript = scripts[scripts.length - 1];\n      if (lastScript) {\n        lastAutoImportUrl = lastScript.src;\n        lastAutoImportDeps = deps;\n        // if this is already a System load, then the instantiate has already begun\n        // so this re-import has no consequence\n        var loader = this;\n        lastAutoImportTimeout = setTimeout(function () {\n          autoImportCandidates[lastScript.src] = [deps, declare];\n          loader.import(lastScript.src);\n        });\n      }\n    }\n    else {\n      lastAutoImportDeps = undefined;\n    }\n    return systemRegister.call(this, deps, declare);\n  };\n\n  var lastWindowErrorUrl, lastWindowError;\n  systemJSPrototype.instantiate = function (url, firstParentUrl) {\n    var autoImportRegistration = autoImportCandidates[url];\n    if (autoImportRegistration) {\n      delete autoImportCandidates[url];\n      return autoImportRegistration;\n    }\n    var loader = this;\n    return new Promise(function (resolve, reject) {\n      var script = systemJSPrototype.createScript(url);\n      script.addEventListener('error', function () {\n        reject(Error(errMsg(3,  [url, firstParentUrl].join(', ') )));\n      });\n      script.addEventListener('load', function () {\n        document.head.removeChild(script);\n        // Note that if an error occurs that isn't caught by this if statement,\n        // that getRegister will return null and a \"did not instantiate\" error will be thrown.\n        if (lastWindowErrorUrl === url) {\n          reject(lastWindowError);\n        }\n        else {\n          var register = loader.getRegister();\n          // Clear any auto import registration for dynamic import scripts during load\n          if (register && register[0] === lastAutoImportDeps)\n            clearTimeout(lastAutoImportTimeout);\n          resolve(register);\n        }\n      });\n      document.head.appendChild(script);\n    });\n  };\n\n  /*\n   * Fetch loader, sets up shouldFetch and fetch hooks\n   */\n  systemJSPrototype.shouldFetch = function () {\n    return false;\n  };\n  if (typeof fetch !== 'undefined')\n    systemJSPrototype.fetch = fetch;\n\n  var instantiate = systemJSPrototype.instantiate;\n  var jsContentTypeRegEx = /^(text|application)\\/(x-)?javascript(;|$)/;\n  systemJSPrototype.instantiate = function (url, parent) {\n    var loader = this;\n    if (!this.shouldFetch(url))\n      return instantiate.apply(this, arguments);\n    return this.fetch(url, {\n      credentials: 'same-origin',\n      integrity: importMap.integrity[url]\n    })\n    .then(function (res) {\n      if (!res.ok)\n        throw Error(errMsg(7,  [res.status, res.statusText, url, parent].join(', ') ));\n      var contentType = res.headers.get('content-type');\n      if (!contentType || !jsContentTypeRegEx.test(contentType))\n        throw Error(errMsg(4,  contentType ));\n      return res.text().then(function (source) {\n        if (source.indexOf('//# sourceURL=') < 0)\n          source += '\\n//# sourceURL=' + url;\n        (0, eval)(source);\n        return loader.getRegister();\n      });\n    });\n  };\n\n  systemJSPrototype.resolve = function (id, parentUrl) {\n    parentUrl = parentUrl || !true  || baseUrl;\n    return resolveImportMap(( importMap), resolveIfNotPlainOrUrl(id, parentUrl) || id, parentUrl) || throwUnresolved(id, parentUrl);\n  };\n\n  function throwUnresolved (id, parentUrl) {\n    throw Error(errMsg(8,  [id, parentUrl].join(', ') ));\n  }\n\n  var systemInstantiate = systemJSPrototype.instantiate;\n  systemJSPrototype.instantiate = function (url, firstParentUrl) {\n    var preloads = ( importMap).depcache[url];\n    if (preloads) {\n      for (var i = 0; i < preloads.length; i++)\n        getOrCreateLoad(this, this.resolve(preloads[i], url), url);\n    }\n    return systemInstantiate.call(this, url, firstParentUrl);\n  };\n\n  /*\n   * Supports loading System.register in workers\n   */\n\n  if (hasSelf && typeof importScripts === 'function')\n    systemJSPrototype.instantiate = function (url) {\n      var loader = this;\n      return Promise.resolve().then(function () {\n        importScripts(url);\n        return loader.getRegister();\n      });\n    };\n\n}());",
    "export const valueInstall = (object, name, value) => {\n  const has = name in object\n  const previous = object[name]\n\n  object[name] = value\n\n  return () => {\n    if (has) {\n      object[name] = previous\n    } else {\n      delete object[name]\n    }\n  }\n}\n",
    "// eslint-disable-next-line no-eval\nexport const evalSource = (code, href) => window.eval(appendSourceURL(code, href))\n\nconst appendSourceURL = (code, sourceURL) => {\n  return `${code}\n${\"//#\"} sourceURL=${sourceURL}`\n}\n",
    "import \"../s.js\"\nimport { valueInstall } from \"../valueInstall.js\"\nimport { fromUrl } from \"../module-registration.js\"\nimport { evalSource } from \"./evalSource.js\"\n\nexport const createBrowserSystem = ({\n  compileServerOrigin,\n  compileDirectoryRelativeUrl,\n  importResolver,\n  fetchSource,\n}) => {\n  if (typeof window.System === \"undefined\") {\n    throw new Error(`window.System is undefined`)\n  }\n\n  const browserSystem = new window.System.constructor()\n\n  const resolve = (specifier, importer = document.location.href) => {\n    return importResolver.resolveImport(specifier, importer)\n  }\n\n  browserSystem.resolve = resolve\n\n  browserSystem.instantiate = (url, importerUrl) => {\n    return fromUrl({\n      url,\n      importerUrl,\n      fetchSource,\n      instantiateJavaScript: (source, responseUrl) => {\n        const uninstallSystemGlobal = valueInstall(window, \"System\", browserSystem)\n        try {\n          evalSource(source, responseUrl)\n        } finally {\n          uninstallSystemGlobal()\n        }\n\n        return browserSystem.getRegister()\n      },\n      compileServerOrigin,\n      compileDirectoryRelativeUrl,\n    })\n  }\n\n  browserSystem.createContext = (importerUrl) => {\n    return {\n      url: importerUrl,\n      resolve: (specifier) => resolve(specifier, importerUrl),\n    }\n  }\n\n  return browserSystem\n}\n",
    "export const displayErrorInDocument = (error) => {\n  const title = \"An error occured\"\n  let theme\n  let message\n\n  if (error && error.parsingError) {\n    theme = \"light\"\n    const { parsingError } = error\n    message = errorToHTML(parsingError.messageHTML || escapeHtml(parsingError.message))\n  } else {\n    theme = \"dark\"\n    message = errorToHTML(error)\n  }\n\n  const css = `\n    .jsenv-console {\n      position: static;\n      left: 0;\n      top: 0;\n      z-index: 1000;\n    }\n\n    #button-close-jsenv-console {\n      position: absolute;\n      right: 8px;\n    }\n\n    .jsenv-console pre {\n      overflow: auto;\n      /* avoid scrollbar to hide the text behind it */\n      padding-top: 20px;\n      padding-right: 20px;\n      padding-bottom: 20px;\n    }\n\n    .jsenv-console pre[data-theme=\"dark\"] {\n      background: transparent;\n      border: 1px solid black;\n    }\n\n    .jsenv-console pre[data-theme=\"light\"] {\n      background: #1E1E1E;\n      border: 1px solid white;\n      color: #EEEEEE;\n    }\n\n    .jsenv-console pre[data-theme=\"light\"] a {\n      color: inherit;\n    }\n    `\n  const html = `\n      <style type=\"text/css\">${css}></style>\n      <div class=\"jsenv-console\">\n        <h1>${title} <button id=\"button-close-jsenv-console\">X</button></h1>\n        <pre data-theme=\"${theme}\">${message}</pre>\n      </div>\n      `\n  const removeJsenvConsole = appendHMTLInside(html, document.body)\n\n  document.querySelector(\"#button-close-jsenv-console\").onclick = () => {\n    removeJsenvConsole()\n  }\n}\n\nconst escapeHtml = (string) => {\n  return string\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\")\n}\n\nconst errorToHTML = (error) => {\n  let html\n\n  if (error && error instanceof Error) {\n    //  stackTrace formatted by V8\n    if (Error.captureStackTrace) {\n      html = escapeHtml(error.stack)\n    } else {\n      // other stack trace such as firefox do not contain error.message\n      html = escapeHtml(`${error.message}\n  ${error.stack}`)\n    }\n  } else if (typeof error === \"string\") {\n    html = error\n  } else {\n    html = JSON.stringify(error)\n  }\n\n  const htmlWithCorrectLineBreaks = html.replace(/\\n/g, \"\\n\")\n  const htmlWithLinks = stringToStringWithLink(htmlWithCorrectLineBreaks, {\n    transform: (url) => {\n      return { href: url, text: url }\n    },\n  })\n  return htmlWithLinks\n}\n\n// `Error: yo\n// at Object.execute (http://127.0.0.1:57300/build/src/__test__/file-throw.js:9:13)\n// at doExec (http://127.0.0.1:3000/src/__test__/file-throw.js:452:38)\n// at postOrderExec (http://127.0.0.1:3000/src/__test__/file-throw.js:448:16)\n// at http://127.0.0.1:3000/src/__test__/file-throw.js:399:18`.replace(/(?:https?|ftp|file):\\/\\/(.*+)$/gm, (...args) => {\n//   debugger\n// })\nconst stringToStringWithLink = (\n  source,\n  {\n    transform = (url) => {\n      return {\n        href: url,\n        text: url,\n      }\n    },\n  } = {},\n) => {\n  return source.replace(/(?:https?|ftp|file):\\/\\/\\S+/gm, (match) => {\n    let linkHTML = \"\"\n\n    const lastChar = match[match.length - 1]\n\n    // hotfix because our url regex sucks a bit\n    const endsWithSeparationChar = lastChar === \")\" || lastChar === \":\"\n    if (endsWithSeparationChar) {\n      match = match.slice(0, -1)\n    }\n\n    const lineAndColumnPattern = /:([0-9]+):([0-9]+)$/\n    const lineAndColumMatch = match.match(lineAndColumnPattern)\n    if (lineAndColumMatch) {\n      const lineAndColumnString = lineAndColumMatch[0]\n      const lineNumber = lineAndColumMatch[1]\n      const columnNumber = lineAndColumMatch[2]\n      const url = match.slice(0, -lineAndColumnString.length)\n      const { href, text } = transform(url)\n      linkHTML = link({ href, text: `${text}:${lineNumber}:${columnNumber}` })\n    } else {\n      const linePattern = /:([0-9]+)$/\n      const lineMatch = match.match(linePattern)\n      if (lineMatch) {\n        const lineString = lineMatch[0]\n        const lineNumber = lineMatch[1]\n        const url = match.slice(0, -lineString.length)\n        const { href, text } = transform(url)\n        linkHTML = link({\n          href,\n          text: `${text}:${lineNumber}`,\n        })\n      } else {\n        const url = match\n        const { href, text } = transform(url)\n        linkHTML = link({ href, text })\n      }\n    }\n\n    if (endsWithSeparationChar) {\n      return `${linkHTML}${lastChar}`\n    }\n    return linkHTML\n  })\n}\n\nconst link = ({ href, text = href }) => `<a href=\"${href}\">${text}</a>`\n\nconst appendHMTLInside = (html, parentNode) => {\n  const temoraryParent = document.createElement(\"div\")\n  temoraryParent.innerHTML = html\n  return transferChildren(temoraryParent, parentNode)\n}\n\nconst transferChildren = (fromNode, toNode) => {\n  const childNodes = [].slice.call(fromNode.childNodes, 0)\n  let i = 0\n  while (i < childNodes.length) {\n    toNode.appendChild(childNodes[i])\n    i++\n  }\n  return () => {\n    let c = 0\n    while (c < childNodes.length) {\n      fromNode.appendChild(childNodes[c])\n      c++\n    }\n  }\n}\n",
    "const { Notification } = window\n\nconst displayErrorNotificationNotAvailable = () => {}\n\nconst displayErrorNotificationImplementation = async (error, { icon } = {}) => {\n  const permission = await Notification.requestPermission()\n\n  if (permission === \"granted\") {\n    const notification = new Notification(\"An error occured\", {\n      lang: \"en\",\n      body: error.stack,\n      icon,\n    })\n    notification.onclick = () => {\n      window.focus()\n    }\n  }\n}\n\nexport const displayErrorNotification =\n  typeof Notification === \"function\"\n    ? displayErrorNotificationImplementation\n    : displayErrorNotificationNotAvailable\n",
    "export const makeNamespaceTransferable = (namespace) => {\n  const transferableNamespace = {}\n  Object.keys(namespace).forEach((key) => {\n    const value = namespace[key]\n    transferableNamespace[key] = isTransferable(value) ? value : hideNonTransferableValue(value)\n  })\n  return transferableNamespace\n}\n\nconst hideNonTransferableValue = (value) => {\n  if (typeof value === \"function\") {\n    return `[[HIDDEN: ${value.name} function cannot be transfered]]`\n  }\n\n  if (typeof value === \"symbol\") {\n    return `[[HIDDEN: symbol function cannot be transfered]]`\n  }\n\n  return `[[HIDDEN: ${value.constructor ? value.constructor.name : \"object\"} cannot be transfered]]`\n}\n\n// https://stackoverflow.com/a/32673910/2634179\nconst isTransferable = (value) => {\n  const seenArray = []\n  const visit = () => {\n    if (typeof value === \"function\") return false\n\n    if (typeof value === \"symbol\") return false\n\n    if (value === null) return false\n\n    if (typeof value === \"object\") {\n      const constructorName = value.constructor.namespace\n\n      if (supportedTypes.includes(constructorName)) {\n        return true\n      }\n\n      const maybe = maybeTypes.includes(constructorName)\n      if (maybe) {\n        const visited = seenArray.includes(value)\n        if (visited) {\n          // we don't really know until we are done visiting the object\n          // implementing it properly means waiting for the recursion to be done\n          // let's just\n          return true\n        }\n        seenArray.push(value)\n\n        if (constructorName === \"Array\" || constructorName === \"Object\") {\n          return Object.keys(value).every((key) => isTransferable(value[key]))\n        }\n        if (constructorName === \"Map\") {\n          return (\n            [...value.keys()].every(isTransferable) && [...value.values()].every(isTransferable)\n          )\n        }\n        if (constructorName === \"Set\") {\n          return [...value.keys()].every(isTransferable)\n        }\n      }\n\n      // Error, DOM Node and others\n      return false\n    }\n    return true\n  }\n\n  return visit(value)\n}\n\nconst supportedTypes = [\n  \"Boolean\",\n  \"Number\",\n  \"String\",\n  \"Date\",\n  \"RegExp\",\n  \"Blob\",\n  \"FileList\",\n  \"ImageData\",\n  \"ImageBitmap\",\n  \"ArrayBuffer\",\n]\n\nconst maybeTypes = [\"Array\", \"Object\", \"Map\", \"Set\"]\n",
    "import { normalizeImportMap } from \"@jsenv/import-map/src/normalizeImportMap.js\"\n\nimport { unevalException } from \"../../unevalException.js\"\n// do not use memoize from @jsenv/util to avoid pulling @jsenv/util code into the browser build\nimport { memoize } from \"../../memoize.js\"\nimport { fetchUrl } from \"../../browser-utils/fetch-browser.js\"\nimport { createImportResolverForImportmap } from \"../../import-resolution/import-resolver-importmap.js\"\nimport { measureAsyncFnPerf } from \"../../perf_browser.js\"\n\nimport { createBrowserSystem } from \"./createBrowserSystem.js\"\nimport { displayErrorInDocument } from \"./displayErrorInDocument.js\"\nimport { displayErrorNotification } from \"./displayErrorNotification.js\"\nimport { makeNamespaceTransferable } from \"./makeNamespaceTransferable.js\"\n\nconst memoizedCreateBrowserSystem = memoize(createBrowserSystem)\n\nexport const createBrowserRuntime = async ({\n  compileServerOrigin,\n  outDirectoryRelativeUrl,\n  compileId,\n  htmlFileRelativeUrl,\n}) => {\n  const fetchSource = (url) => {\n    return fetchUrl(url, {\n      credentials: \"include\",\n      headers: {\n        ...(htmlFileRelativeUrl ? { \"x-jsenv-execution-id\": htmlFileRelativeUrl } : {}),\n      },\n    })\n  }\n\n  const fetchJson = async (url) => {\n    const response = await fetchSource(url)\n    const json = await response.json()\n    return json\n  }\n\n  const outDirectoryUrl = `${compileServerOrigin}/${outDirectoryRelativeUrl}`\n  const envUrl = String(new URL(\"env.json\", outDirectoryUrl))\n  const { importDefaultExtension } = await fetchJson(envUrl)\n  const compileDirectoryRelativeUrl = `${outDirectoryRelativeUrl}${compileId}/`\n  // if there is an importmap in the document we use it instead of fetching.\n  // systemjs style with systemjs-importmap\n  const importmapScript = document.querySelector(`script[type=\"jsenv-importmap\"]`)\n  let importMap\n  let importMapUrl\n  if (importmapScript) {\n    let importmapRaw\n    if (importmapScript.src) {\n      importMapUrl = importmapScript.src\n      const importmapFileResponse = await fetchSource(importMapUrl)\n      importmapRaw = importmapFileResponse.status === 404 ? {} : await importmapFileResponse.json()\n    } else {\n      importMapUrl = document.location.href\n      importmapRaw = JSON.parse(importmapScript.textContent) || {}\n    }\n    importMap = normalizeImportMap(importmapRaw, importMapUrl)\n  }\n\n  const importResolver = await createImportResolverForImportmap({\n    // projectDirectoryUrl,\n    compileServerOrigin,\n    compileDirectoryRelativeUrl,\n    importMap,\n    importMapUrl,\n    importDefaultExtension,\n  })\n\n  const importFile = async (specifier) => {\n    const browserSystem = await memoizedCreateBrowserSystem({\n      compileServerOrigin,\n      compileDirectoryRelativeUrl,\n      fetchSource,\n      importResolver,\n    })\n    return browserSystem.import(specifier)\n  }\n\n  const executeFile = async (\n    specifier,\n    {\n      transferableNamespace = false,\n      errorExposureInConsole = true,\n      errorExposureInNotification = false,\n      errorExposureInDocument = true,\n      executionExposureOnWindow = false,\n      errorTransform = (error) => error,\n      measurePerformance,\n    } = {},\n  ) => {\n    const browserSystem = await memoizedCreateBrowserSystem({\n      compileServerOrigin,\n      compileDirectoryRelativeUrl,\n      fetchSource,\n      importResolver,\n    })\n\n    const importUsingSystemJs = async () => {\n      try {\n        let namespace = await browserSystem.import(specifier)\n\n        if (transferableNamespace) {\n          namespace = makeNamespaceTransferable(namespace)\n        }\n\n        return {\n          status: \"completed\",\n          namespace,\n          coverage: readCoverage(),\n        }\n      } catch (error) {\n        let transformedError\n        try {\n          transformedError = await errorTransform(error)\n        } catch (e) {\n          transformedError = error\n        }\n\n        if (errorExposureInConsole) {\n          displayErrorInConsole(transformedError)\n        }\n        if (errorExposureInNotification) {\n          displayErrorNotification(transformedError)\n        }\n        if (errorExposureInDocument) {\n          displayErrorInDocument(transformedError)\n        }\n\n        return {\n          status: \"errored\",\n          exceptionSource: unevalException(transformedError),\n          coverage: readCoverage(),\n        }\n      }\n    }\n\n    const executionResult = await (measurePerformance\n      ? measureAsyncFnPerf(importUsingSystemJs, `jsenv_file_import`)\n      : importUsingSystemJs())\n    if (executionExposureOnWindow) {\n      window.__executionResult__ = executionResult\n    }\n    return executionResult\n  }\n\n  return {\n    compileDirectoryRelativeUrl,\n    importFile,\n    executeFile,\n  }\n}\n\nconst readCoverage = () => window.__coverage__\n\nconst displayErrorInConsole = (error) => {\n  console.error(error)\n}\n",
    "export const stackToString = (stack, { error, indent }) => {\n  const name = error.name || \"Error\"\n  const message = error.message || \"\"\n  const stackString = stack.map((callSite) => `\\n${indent}at ${callSite}`).join(\"\")\n\n  return `${name}: ${message}${stackString}`\n}\n",
    "/* eslint-env browser, node */\n\nexport const parseDataUrl = (dataUrl) => {\n  const afterDataProtocol = dataUrl.slice(\"data:\".length)\n  const commaIndex = afterDataProtocol.indexOf(\",\")\n  const beforeComma = afterDataProtocol.slice(0, commaIndex)\n\n  let mediaType\n  let base64Flag\n  if (beforeComma.endsWith(`;base64`)) {\n    mediaType = beforeComma.slice(0, -`;base64`.length)\n    base64Flag = true\n  } else {\n    mediaType = beforeComma\n    base64Flag = false\n  }\n\n  const afterComma = afterDataProtocol.slice(commaIndex + 1)\n  return {\n    mediaType: mediaType === \"\" ? \"text/plain;charset=US-ASCII\" : mediaType,\n    base64Flag,\n    data: afterComma,\n  }\n}\n\nexport const stringifyDataUrl = ({ mediaType, base64Flag = true, data }) => {\n  if (!mediaType || mediaType === \"text/plain;charset=US-ASCII\") {\n    // can be a buffer or a string, hence check on data.length instead of !data or data === ''\n    if (data.length === 0) {\n      return `data:,`\n    }\n    if (base64Flag) {\n      return `data:,${data}`\n    }\n    return `data:,${dataToBase64(data)}`\n  }\n  if (base64Flag) {\n    return `data:${mediaType};base64,${dataToBase64(data)}`\n  }\n  return `data:${mediaType},${data}`\n}\n\nexport const dataUrlToRawData = ({ base64Flag, data }) => {\n  return base64Flag ? base64ToString(data) : data\n}\n\nexport const dataToBase64 =\n  typeof window === \"object\" ? window.atob : (data) => Buffer.from(data).toString(\"base64\")\n\nexport const base64ToString =\n  typeof window === \"object\"\n    ? window.btoa\n    : (base64String) => Buffer.from(base64String, \"base64\").toString(\"utf8\")\n",
    "export const getJavaScriptSourceMappingUrl = (javaScriptSource) => {\n  let sourceMappingUrl\n  replaceSourceMappingUrl(javaScriptSource, javascriptSourceMappingUrlCommentRegexp, (value) => {\n    sourceMappingUrl = value\n  })\n  return sourceMappingUrl\n}\n\nexport const setJavaScriptSourceMappingUrl = (javaScriptSource, sourceMappingFileUrl) => {\n  let replaced\n  const sourceAfterReplace = replaceSourceMappingUrl(\n    javaScriptSource,\n    javascriptSourceMappingUrlCommentRegexp,\n    () => {\n      replaced = true\n      return sourceMappingFileUrl ? writeJavaScriptSourceMappingURL(sourceMappingFileUrl) : \"\"\n    },\n  )\n  if (replaced) {\n    return sourceAfterReplace\n  }\n\n  return sourceMappingFileUrl\n    ? `${javaScriptSource}\n${writeJavaScriptSourceMappingURL(sourceMappingFileUrl)}`\n    : javaScriptSource\n}\n\nexport const getCssSourceMappingUrl = (cssSource) => {\n  let sourceMappingUrl\n  replaceSourceMappingUrl(cssSource, cssSourceMappingUrlCommentRegExp, (value) => {\n    sourceMappingUrl = value\n  })\n  return sourceMappingUrl\n}\n\nexport const setCssSourceMappingUrl = (cssSource, sourceMappingFileUrl) => {\n  let replaced\n  const sourceAfterReplace = replaceSourceMappingUrl(\n    cssSource,\n    cssSourceMappingUrlCommentRegExp,\n    () => {\n      replaced = true\n      return sourceMappingFileUrl ? writeCssSourceMappingUrl(sourceMappingFileUrl) : \"\"\n    },\n  )\n  if (replaced) {\n    return sourceAfterReplace\n  }\n  return sourceMappingFileUrl\n    ? `${cssSource}\n${writeCssSourceMappingUrl(sourceMappingFileUrl)}`\n    : cssSource\n}\n\nconst javascriptSourceMappingUrlCommentRegexp = /\\/\\/ ?# ?sourceMappingURL=([^\\s'\"]+)/g\nconst cssSourceMappingUrlCommentRegExp = /\\/\\*# ?sourceMappingURL=([^\\s'\"]+) \\*\\//g\n\n// ${\"//#\"} is to avoid a parser thinking there is a sourceMappingUrl for this file\nconst writeJavaScriptSourceMappingURL = (value) => `${\"//#\"} sourceMappingURL=${value}`\nconst writeCssSourceMappingUrl = (value) => `/*# sourceMappingURL=${value} */`\n\nexport const sourcemapToBase64Url = (sourcemap) => {\n  const asBase64 = Buffer.from(JSON.stringify(sourcemap)).toString(\"base64\")\n  return `data:application/json;charset=utf-8;base64,${asBase64}`\n}\n\nconst replaceSourceMappingUrl = (source, regexp, callback) => {\n  let lastSourceMappingUrl\n  let matchSourceMappingUrl\n  while ((matchSourceMappingUrl = regexp.exec(source))) {\n    lastSourceMappingUrl = matchSourceMappingUrl\n  }\n  if (lastSourceMappingUrl) {\n    const index = lastSourceMappingUrl.index\n    const before = source.slice(0, index)\n    const after = source.slice(index)\n    const mappedAfter = after.replace(regexp, (match, firstGroup) => {\n      return callback(firstGroup)\n    })\n    return `${before}${mappedAfter}`\n  }\n  return source\n}\n",
    "export const isWindowsFilePath = (path) => startsWithWindowsDriveLetter(path) && path[2] === \"\\\\\"\n\nexport const startsWithWindowsDriveLetter = (string) => {\n  const firstChar = string[0]\n  if (!/[a-zA-Z]/.test(firstChar)) return false\n\n  const secondChar = string[1]\n  if (secondChar !== \":\") return false\n\n  return true\n}\n\nexport const windowsFilePathToUrl = (windowsFilePath) => {\n  return `file:///${replaceBackSlashesWithSlashes(windowsFilePath)}`\n}\n\nexport const replaceBackSlashesWithSlashes = (string) => string.replace(/\\\\/g, \"/\")\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { startsWithWindowsDriveLetter, windowsFilePathToUrl } from \"../filePathUtils.js\"\n\nexport const remapCallSite = async (\n  callSite,\n  { urlToSourcemapConsumer, resolveFile, readErrorStack, onFailure },\n) => {\n  if (callSite.isNative()) {\n    return callSite\n  }\n\n  // Most call sites will return the source file from getFileName(), but code\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\n  // from getScriptNameOrSourceURL() instead\n  const source = callSite.getFileName() || callSite.getScriptNameOrSourceURL()\n  if (source) {\n    const line = callSite.getLineNumber()\n    const column = callSite.getColumnNumber() - 1\n    const originalPosition = await remapSourcePosition({\n      source,\n      line,\n      column,\n      resolveFile,\n      urlToSourcemapConsumer,\n      readErrorStack,\n      onFailure,\n    })\n\n    const callSiteClone = cloneCallSite(callSite)\n\n    callSiteClone.getFunctionName = () => originalPosition.name || callSite.getFunctionName()\n    callSiteClone.getFileName = () => originalPosition.source\n    callSiteClone.getLineNumber = () => originalPosition.line\n    callSiteClone.getColumnNumber = () => originalPosition.column + 1\n    callSiteClone.getScriptNameOrSourceURL = () => originalPosition.source\n\n    return callSiteClone\n  }\n\n  // Code called using eval() needs special handling\n  if (callSite.isEval()) {\n    const origin = callSite.getEvalOrigin()\n    if (origin) {\n      const callSiteClone = cloneCallSite(callSite)\n      const originalEvalOrigin = await remapEvalOrigin(origin, {\n        resolveFile,\n        urlToSourcemapConsumer,\n        readErrorStack,\n        onFailure,\n      })\n      callSiteClone.getEvalOrigin = () => originalEvalOrigin\n      return callSiteClone\n    }\n    return callSite\n  }\n\n  // If we get here then we were unable to change the source position\n  return callSite\n}\n\nconst cloneCallSite = (callSite) => {\n  const callSiteClone = {}\n  methods.forEach((name) => {\n    callSiteClone[name] = () => callSite[name]()\n  })\n  callSiteClone.toString = () => callSiteToFunctionCall(callSiteClone)\n\n  return callSiteClone\n}\n\nconst methods = [\n  \"getColumnNumber\",\n  \"getEvalOrigin\",\n  \"getFileName\",\n  \"getFunction\",\n  \"getFunctionName\",\n  \"getLineNumber\",\n  \"getMethodName\",\n  \"getPosition\",\n  \"getScriptNameOrSourceURL\",\n  \"getThis\",\n  \"getTypeName\",\n  \"isConstructor\",\n  \"isEval\",\n  \"isNative\",\n  \"isToplevel\",\n  \"toString\",\n]\n\nconst callSiteToFunctionCall = (callSite) => {\n  const fileLocation = callSiteToFileLocation(callSite)\n  const isConstructor = callSite.isConstructor()\n  const isMethodCall = !callSite.isToplevel() && !isConstructor\n\n  if (isMethodCall) {\n    return `${callSiteToMethodCall(callSite)} (${fileLocation})`\n  }\n\n  const functionName = callSite.getFunctionName()\n  if (isConstructor) {\n    return `new ${functionName || \"<anonymous>\"} (${fileLocation})`\n  }\n\n  if (functionName) {\n    return `${functionName} (${fileLocation})`\n  }\n\n  return `${fileLocation}`\n}\n\nconst callSiteToMethodCall = (callSite) => {\n  const functionName = callSite.getFunctionName()\n  const typeName = callSiteToType(callSite)\n\n  if (!functionName) {\n    return `${typeName}.<anonymous>`\n  }\n\n  const methodName = callSite.getMethodName()\n  const as = generateAs({ methodName, functionName })\n\n  if (typeName && !functionName.startsWith(typeName)) {\n    return `${typeName}.${functionName}${as}`\n  }\n\n  return `${functionName}${as}`\n}\n\nconst generateAs = ({ methodName, functionName }) => {\n  if (!methodName) return \"\"\n  if (functionName.indexOf(`.${methodName}`) === functionName.length - methodName.length - 1)\n    return \"\"\n  return ` [as ${methodName}]`\n}\n\nconst callSiteToType = (callSite) => {\n  const typeName = callSite.getTypeName()\n  // Fixes shim to be backward compatible with Node v0 to v4\n  if (typeName === \"[object Object]\") {\n    return \"null\"\n  }\n  return typeName\n}\n\nconst callSiteToFileLocation = (callSite) => {\n  if (callSite.isNative()) return \"native\"\n\n  const sourceFile = callSiteToSourceFile(callSite)\n  const lineNumber = callSite.getLineNumber()\n  if (lineNumber === null) {\n    return sourceFile\n  }\n\n  const columnNumber = callSite.getColumnNumber()\n  if (!columnNumber) {\n    return `${sourceFile}:${lineNumber}`\n  }\n\n  return `${sourceFile}:${lineNumber}:${columnNumber}`\n}\n\nconst callSiteToSourceFile = (callSite) => {\n  const fileName = callSite.getScriptNameOrSourceURL()\n\n  if (fileName) {\n    return fileName\n  }\n\n  // Source code does not originate from a file and is not native, but we\n  // can still get the source position inside the source string, e.g. in\n  // an eval string.\n  if (callSite.isEval()) {\n    return `${callSite.getEvalOrigin()}, <anonymous>`\n  }\n\n  return \"<anonymous>\"\n}\n\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\nconst remapEvalOrigin = async (origin, { resolveFile, urlToSourcemapConsumer, onFailure }) => {\n  // Most eval() calls are in this format\n  const topLevelEvalMatch = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin)\n  if (topLevelEvalMatch) {\n    const source = topLevelEvalMatch[2]\n    const line = Number(topLevelEvalMatch[3])\n    const column = topLevelEvalMatch[4] - 1\n    const originalPosition = await remapSourcePosition({\n      source,\n      line,\n      column,\n      resolveFile,\n      urlToSourcemapConsumer,\n      onFailure,\n    })\n    return `eval at ${topLevelEvalMatch[1]} (${originalPosition.source}:${originalPosition.line}:${\n      originalPosition.column + 1\n    })`\n  }\n\n  // Parse nested eval() calls using recursion\n  const nestedEvalMatch = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin)\n  if (nestedEvalMatch) {\n    const originalEvalOrigin = await remapEvalOrigin(nestedEvalMatch[2], {\n      resolveFile,\n      urlToSourcemapConsumer,\n      onFailure,\n    })\n    return `eval at ${nestedEvalMatch[1]} (${originalEvalOrigin})`\n  }\n\n  // Make sure we still return useful information if we didn't find anything\n  return origin\n}\n\nconst remapSourcePosition = async ({\n  source,\n  line,\n  column,\n  resolveFile,\n  urlToSourcemapConsumer,\n  readErrorStack,\n  onFailure,\n}) => {\n  const position = { source, line, column }\n\n  const url = sourceToUrl(source, { resolveFile })\n  if (!url) return position\n\n  const sourceMapConsumer = await urlToSourcemapConsumer(url)\n\n  if (!sourceMapConsumer) return position\n\n  try {\n    const originalPosition = sourceMapConsumer.originalPositionFor(position)\n\n    // Only return the original position if a matching line was found. If no\n    // matching line is found then we return position instead, which will cause\n    // the stack trace to print the path and line for the compiled file. It is\n    // better to give a precise location in the compiled file than a vague\n    // location in the original file.\n    const originalSource = originalPosition.source\n\n    if (originalSource === null) return position\n    originalPosition.source = resolveFile(originalSource, url, { type: \"file-original\" })\n\n    return originalPosition\n  } catch (e) {\n    onFailure(\n      createDetailedMessage(`error while remapping position.`, {\n        [\"error stack\"]: readErrorStack(e),\n        [\"source\"]: source,\n        [\"line\"]: line,\n        [\"column\"]: column,\n      }),\n    )\n    return position\n  }\n}\n\nconst sourceToUrl = (source, { resolveFile }) => {\n  if (startsWithScheme(source)) {\n    return source\n  }\n\n  // linux filesystem path\n  if (source[0] === \"/\") {\n    return resolveFile(source)\n  }\n\n  // be careful, due to babel or something like that we might receive paths like\n  // C:/directory/file.js (without backslashes we would expect on windows)\n  // In that case we consider C: is the signe we are on windows\n  // And I avoid to rely on process.platform === \"win32\" because this file might be executed in chrome\n  if (startsWithWindowsDriveLetter(source)) {\n    return windowsFilePathToUrl(source)\n  }\n\n  // I don't think we will ever encounter relative file in the stack trace\n  // but if it ever happens we are safe :)\n  if (source.slice(0, 2) === \"./\" || source.slice(0, 3) === \"../\") {\n    return resolveFile(source)\n  }\n\n  // we have received a \"bare specifier\" for the source\n  // it happens for internal/process/task_queues.js for instance\n  // if we do return resolveFile(source) it will be converted to\n  // file:///C:/project-directory/internal/process/task_queues.js in node\n  // and\n  // http://domain.com/internal/process/task_queues.js\n  // but the file will certainly be a 404\n  // and if not it won't be the right file anyway\n  // for now we assume \"bare specifier\" in the stack trace\n  // are internal files that are pointless to try to remap\n  return null\n}\n\nconst startsWithScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { parseDataUrl, dataUrlToRawData } from \"../dataUrl.utils.js\"\nimport { getJavaScriptSourceMappingUrl } from \"../sourceMappingURLUtils.js\"\nimport { remapCallSite } from \"./remapCallSite.js\"\n\nexport const getOriginalCallsites = async ({\n  stack,\n  resolveFile,\n  fetchFile,\n  SourceMapConsumer,\n  readErrorStack,\n  onFailure,\n}) => {\n  const urlToSourcemapConsumer = memoizeByFirstArgStringValue(async (stackTraceFileUrl) => {\n    if (stackTraceFileUrl.startsWith(\"node:\")) {\n      return null\n    }\n\n    try {\n      let text\n      try {\n        const fileResponse = await fetchFile(stackTraceFileUrl)\n        const { status } = fileResponse\n        if (status !== 200) {\n          if (status === 404) {\n            onFailure(`stack trace file not found at ${stackTraceFileUrl}`)\n          } else {\n            onFailure(\n              createDetailedMessage(`unexpected response fetching stack trace file.`, {\n                [\"response status\"]: status,\n                [\"response text\"]: fileResponse.body,\n                [\"stack trace file\"]: stackTraceFileUrl,\n              }),\n            )\n          }\n          return null\n        }\n        text = await fileResponse.text()\n      } catch (e) {\n        onFailure(\n          createDetailedMessage(`error while fetching stack trace file.`, {\n            [\"fetch error stack\"]: readErrorStack(e),\n            [\"stack trace file\"]: stackTraceFileUrl,\n          }),\n        )\n\n        return null\n      }\n\n      const jsSourcemapUrl = getJavaScriptSourceMappingUrl(text)\n      if (!jsSourcemapUrl) {\n        return null\n      }\n\n      let sourcemapUrl\n      let sourcemapString\n      if (jsSourcemapUrl.startsWith(\"data:\")) {\n        sourcemapUrl = stackTraceFileUrl\n        sourcemapString = dataUrlToRawData(parseDataUrl(jsSourcemapUrl))\n      } else {\n        sourcemapUrl = resolveFile(jsSourcemapUrl, stackTraceFileUrl, {\n          type: \"source-map\",\n        })\n\n        try {\n          const sourcemapResponse = await fetchFile(sourcemapUrl)\n          const { status } = sourcemapResponse\n          if (status !== 200) {\n            if (status === 404) {\n              onFailure(`sourcemap file not found at ${sourcemapUrl}`)\n            } else {\n              onFailure(\n                createDetailedMessage(`unexpected response for sourcemap file.`, {\n                  [\"response status\"]: status,\n                  [\"response text\"]: await sourcemapResponse.text(),\n                  [\"sourcemap url\"]: sourcemapUrl,\n                }),\n              )\n            }\n            return null\n          }\n          sourcemapString = await sourcemapResponse.text()\n        } catch (e) {\n          onFailure(\n            createDetailedMessage(`error while fetching sourcemap.`, {\n              [\"fetch error stack\"]: readErrorStack(e),\n              [\"sourcemap url\"]: sourcemapUrl,\n            }),\n          )\n          return null\n        }\n      }\n\n      let sourceMap\n      try {\n        sourceMap = JSON.parse(sourcemapString)\n      } catch (e) {\n        onFailure(\n          createDetailedMessage(`error while parsing sourcemap.`, {\n            [\"parse error stack\"]: readErrorStack(e),\n            [\"sourcemap url\"]: sourcemapUrl,\n          }),\n        )\n        return null\n      }\n\n      let { sourcesContent } = sourceMap\n\n      if (!sourcesContent) {\n        sourcesContent = []\n        sourceMap.sourcesContent = sourcesContent\n      }\n\n      let firstSourceMapSourceFailure = null\n\n      await Promise.all(\n        sourceMap.sources.map(async (source, index) => {\n          if (index in sourcesContent) return\n\n          const sourcemapSourceUrl = resolveFile(source, sourcemapUrl, { type: \"source\" })\n          try {\n            const sourceResponse = await fetchFile(sourcemapSourceUrl)\n            const { status } = sourceResponse\n            if (status !== 200) {\n              if (firstSourceMapSourceFailure) return\n\n              if (status === 404) {\n                firstSourceMapSourceFailure = createDetailedMessage(`sourcemap source not found.`, {\n                  [\"sourcemap source url\"]: sourcemapSourceUrl,\n                  [\"sourcemap url\"]: sourcemapUrl,\n                })\n                return\n              }\n              firstSourceMapSourceFailure = createDetailedMessage(\n                `unexpected response for sourcemap source.`,\n                {\n                  [\"response status\"]: status,\n                  [\"response text\"]: await sourceResponse.text(),\n                  [\"sourcemap source url\"]: sourcemapSourceUrl,\n                  [\"sourcemap url\"]: sourcemapUrl,\n                },\n              )\n              return\n            }\n\n            const sourceString = await sourceResponse.text()\n            sourcesContent[index] = sourceString\n          } catch (e) {\n            if (firstSourceMapSourceFailure) return\n            firstSourceMapSourceFailure = createDetailedMessage(\n              `error while fetching sourcemap source.`,\n              {\n                [\"fetch error stack\"]: readErrorStack(e),\n                [\"sourcemap source url\"]: sourcemapSourceUrl,\n                [\"sourcemap url\"]: sourcemapUrl,\n              },\n            )\n          }\n        }),\n      )\n\n      if (firstSourceMapSourceFailure) {\n        onFailure(firstSourceMapSourceFailure)\n        return null\n      }\n\n      return new SourceMapConsumer(sourceMap)\n    } catch (e) {\n      onFailure(\n        createDetailedMessage(\n          `error while preparing a sourceMap consumer for a stack trace file.`,\n          {\n            [\"error stack\"]: readErrorStack(e),\n            [\"stack trace file\"]: stackTraceFileUrl,\n          },\n        ),\n      )\n      return null\n    }\n  })\n\n  const originalCallsites = await Promise.all(\n    stack.map((callSite) =>\n      remapCallSite(callSite, {\n        resolveFile,\n        urlToSourcemapConsumer,\n        readErrorStack,\n        onFailure,\n      }),\n    ),\n  )\n  return originalCallsites\n}\n\nconst memoizeByFirstArgStringValue = (fn) => {\n  const stringValueCache = {}\n  return (firstArgValue) => {\n    if (firstArgValue in stringValueCache) return stringValueCache[firstArgValue]\n    const value = fn(firstArgValue)\n    stringValueCache[firstArgValue] = value\n    return value\n  }\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { stackToString } from \"./stackToString.js\"\nimport { getOriginalCallsites } from \"./getOriginalCallsites.js\"\n\nexport const installErrorStackRemapping = ({\n  fetchFile,\n  resolveFile,\n  SourceMapConsumer,\n  indent = \"  \",\n}) => {\n  if (typeof fetchFile !== \"function\") {\n    throw new TypeError(`fetchFile must be a function, got ${fetchFile}`)\n  }\n  if (typeof SourceMapConsumer !== \"function\") {\n    throw new TypeError(`sourceMapConsumer must be a function, got ${SourceMapConsumer}`)\n  }\n  if (typeof indent !== \"string\") {\n    throw new TypeError(`indent must be a string, got ${indent}`)\n  }\n\n  const errorRemappingCache = new WeakMap()\n  const errorRemapFailureCallbackMap = new WeakMap()\n\n  let installed = false\n  const previousPrepareStackTrace = Error.prepareStackTrace\n  const install = () => {\n    if (installed) return\n    installed = true\n    Error.prepareStackTrace = prepareStackTrace\n  }\n\n  const uninstall = () => {\n    if (!installed) return\n    installed = false\n    Error.prepareStackTrace = previousPrepareStackTrace\n  }\n\n  // ensure we do not use prepareStackTrace for thoose error\n  // otherwise we would recursively remap error stack\n  // and if the reason causing the failure is still here\n  // it would create an infinite loop\n  const readErrorStack = (error) => {\n    uninstall()\n    const stack = error.stack\n    install()\n    return stack\n  }\n\n  const prepareStackTrace = (error, stack) => {\n    const onFailure = (failureData) => {\n      const failureCallbackArray = errorRemapFailureCallbackMap.get(error)\n      if (failureCallbackArray) {\n        failureCallbackArray.forEach((callback) => callback(failureData))\n      }\n    }\n\n    const stackRemappingPromise = getOriginalCallsites({\n      stack,\n      error,\n      resolveFile,\n      fetchFile: memoizeFetch(fetchFile),\n      SourceMapConsumer,\n      readErrorStack,\n      indent,\n      onFailure,\n    })\n    errorRemappingCache.set(error, stackRemappingPromise)\n\n    return stackToString(stack, { error, indent })\n  }\n\n  const getErrorOriginalStackString = async (\n    error,\n    {\n      onFailure = (message) => {\n        console.warn(message)\n      },\n    } = {},\n  ) => {\n    if (onFailure) {\n      const remapFailureCallbackArray = errorRemapFailureCallbackMap.get(error)\n      if (remapFailureCallbackArray) {\n        errorRemapFailureCallbackMap.set(error, [...remapFailureCallbackArray, onFailure])\n      } else {\n        errorRemapFailureCallbackMap.set(error, [onFailure])\n      }\n    }\n\n    // ensure Error.prepareStackTrace gets triggered by reading error.stack now\n    const { stack } = error\n    const promise = errorRemappingCache.get(error)\n\n    if (promise) {\n      try {\n        const originalCallsites = await promise\n        errorRemapFailureCallbackMap.get(error)\n\n        const firstCall = originalCallsites[0]\n        if (firstCall) {\n          Object.assign(error, {\n            filename: firstCall.getFileName(),\n            lineno: firstCall.getLineNumber(),\n            columnno: firstCall.getColumnNumber(),\n          })\n        }\n        return stackToString(originalCallsites, { error, indent })\n      } catch (e) {\n        onFailure(\n          createDetailedMessage(`error while computing original stack.`, {\n            [\"stack from error while computing\"]: readErrorStack(e),\n            [\"stack from error to remap\"]: stack,\n          }),\n        )\n        return stack\n      }\n    }\n\n    return stack\n  }\n\n  install()\n\n  return { getErrorOriginalStackString, uninstall }\n}\n\nconst memoizeFetch = (fetchUrl) => {\n  const urlCache = {}\n  return async (url) => {\n    if (url in urlCache) {\n      return urlCache[url]\n    }\n    const responsePromise = fetchUrl(url)\n    urlCache[url] = responsePromise\n    return responsePromise\n  }\n}\n",
    "/* eslint-env browser */\n\nimport { installErrorStackRemapping } from \"./installErrorStackRemapping.js\"\n\nexport const installBrowserErrorStackRemapping = (options = {}) =>\n  installErrorStackRemapping({\n    fetchFile: async (url) => {\n      // browser having Error.captureStackTrace got window.fetch\n      // and this executes only when Error.captureStackTrace exists\n      // so no need for polyfill or whatever here\n      const response = await window.fetch(url)\n      // we read response test before anything because once memoized fetch\n      // gets annoying preventing you to read\n      // body multiple times, even using response.clone()\n      const text = await response.text()\n      return {\n        status: response.status,\n        url: response.url,\n        statusText: response.statusText,\n        headers: responseToHeaders(response),\n        text: () => text,\n        json: response.json.bind(response),\n        blob: response.blob.bind(response),\n        arrayBuffer: response.arrayBuffer.bind(response),\n      }\n    },\n    resolveFile: (specifier, importer = window.location.href) => {\n      // browsers having Error.captureStrackTrace got window.URL\n      // and this executes only when Error.captureStackTrace exists\n      return String(new URL(specifier, importer))\n    },\n    ...options,\n  })\n\nconst responseToHeaders = (response) => {\n  const headers = {}\n  response.headers.forEach((value, name) => {\n    headers[name] = value\n  })\n  return headers\n}\n",
    "import { createDetailedMessage } from \"@jsenv/logger\"\nimport { fetchUrl } from \"./fetch-browser.js\"\n\nexport const fetchAndEvalUsingFetch = async (url) => {\n  const response = await fetchUrl(url)\n\n  if (response.status >= 200 && response.status <= 299) {\n    const text = await response.text()\n    // eslint-disable-next-line no-eval\n    window.eval(appendSourceURL(text, url))\n  } else {\n    const text = await response.text()\n    throw new Error(\n      createDetailedMessage(`Unexpected response for script.`, {\n        [\"script url\"]: url,\n        [\"response body\"]: text,\n        [\"response status\"]: response.status,\n      }),\n    )\n  }\n}\n\nconst appendSourceURL = (code, sourceURL) => {\n  return `${code}\n${\"//#\"} sourceURL=${sourceURL}`\n}\n",
    "/* eslint-env browser */\n\nimport { unevalException } from \"../unevalException.js\"\nimport { createBrowserRuntime } from \"../runtime/createBrowserRuntime/createBrowserRuntime.js\"\nimport { installBrowserErrorStackRemapping } from \"../error-stack-remapping/installBrowserErrorStackRemapping.js\"\nimport { fetchUrl } from \"../browser-utils/fetch-browser.js\"\nimport { fetchAndEvalUsingFetch } from \"../browser-utils/fetchAndEvalUsingFetch.js\"\nimport { memoize } from \"../memoize.js\"\n\nconst getNavigationStartTime = () => {\n  try {\n    return window.performance.timing.navigationStart\n  } catch (e) {\n    return Date.now()\n  }\n}\n\nconst navigationStartTime = getNavigationStartTime()\n\nconst readyPromise = new Promise((resolve) => {\n  if (document.readyState === \"complete\") {\n    resolve()\n  } else {\n    const loadCallback = () => {\n      window.removeEventListener(\"load\", loadCallback)\n      resolve()\n    }\n    window.addEventListener(\"load\", loadCallback)\n  }\n})\n\nconst fileExecutionMap = {}\n\nconst executionResultPromise = readyPromise.then(async () => {\n  const fileExecutionResultMap = {}\n  const fileExecutionResultPromises = []\n  let status = \"completed\"\n  let exceptionSource = \"\"\n  Object.keys(fileExecutionMap).forEach((key) => {\n    fileExecutionResultMap[key] = null // to get always same order for Object.keys(executionResult)\n    const fileExecutionResultPromise = fileExecutionMap[key]\n    fileExecutionResultPromises.push(fileExecutionResultPromise)\n    fileExecutionResultPromise.then((fileExecutionResult) => {\n      fileExecutionResultMap[key] = fileExecutionResult\n      if (fileExecutionResult.status === \"errored\") {\n        status = \"errored\"\n        exceptionSource = fileExecutionResult.exceptionSource\n      }\n    })\n  })\n  await Promise.all(fileExecutionResultPromises)\n\n  return {\n    status,\n    ...(status === \"errored\" ? { exceptionSource } : {}),\n    startTime: navigationStartTime,\n    endTime: Date.now(),\n    fileExecutionResultMap,\n  }\n})\n\nconst executeFileUsingDynamicImport = async (specifier, identifier = specifier) => {\n  const { currentScript } = document\n  const fileExecutionResultPromise = (async () => {\n    try {\n      const url = new URL(specifier, document.location.href).href\n      performance.mark(`jsenv_file_import_start`)\n      const namespace = await import(url)\n      performance.measure(`jsenv_file_import`, `jsenv_file_import_start`)\n      const executionResult = {\n        status: \"completed\",\n        namespace,\n      }\n      return executionResult\n    } catch (e) {\n      performance.measure(`jsenv_file_import`, `jsenv_file_import_start`)\n      const executionResult = {\n        status: \"errored\",\n        exceptionSource: unevalException(e),\n      }\n      onExecutionError(executionResult, { currentScript })\n      return executionResult\n    }\n  })()\n  fileExecutionMap[identifier] = fileExecutionResultPromise\n  return fileExecutionResultPromise\n}\n\nconst executeFileUsingSystemJs = (specifier) => {\n  // si on a déja importer ce fichier ??\n  // if (specifier in fileExecutionMap) {\n\n  // }\n\n  const { currentScript } = document\n\n  const fileExecutionResultPromise = (async () => {\n    const browserRuntime = await getBrowserRuntime()\n    const executionResult = await browserRuntime.executeFile(specifier, {\n      measurePerformance: true,\n      collectPerformance: true,\n    })\n    if (executionResult.status === \"errored\") {\n      onExecutionError(executionResult, { currentScript })\n    }\n    return executionResult\n  })()\n  fileExecutionMap[specifier] = fileExecutionResultPromise\n  return fileExecutionResultPromise\n}\n\nconst onExecutionError = (executionResult, { currentScript }) => {\n  // eslint-disable-next-line no-eval\n  const originalError = window.eval(executionResult.exceptionSource)\n  if (originalError.code === \"NETWORK_FAILURE\") {\n    if (currentScript) {\n      const errorEvent = new Event(\"error\")\n      currentScript.dispatchEvent(errorEvent)\n    }\n  } else {\n    const { parsingError } = originalError\n    const globalErrorEvent = new Event(\"error\")\n    if (parsingError) {\n      globalErrorEvent.filename = parsingError.filename\n      globalErrorEvent.lineno = parsingError.lineNumber\n      globalErrorEvent.message = parsingError.message\n      globalErrorEvent.colno = parsingError.columnNumber\n    } else {\n      globalErrorEvent.filename = originalError.filename\n      globalErrorEvent.lineno = originalError.lineno\n      globalErrorEvent.message = originalError.message\n      globalErrorEvent.colno = originalError.columnno\n    }\n    window.dispatchEvent(globalErrorEvent)\n  }\n}\n\nconst getBrowserRuntime = memoize(async () => {\n  const compileServerOrigin = document.location.origin\n  const compileMetaResponse = await fetchUrl(`${compileServerOrigin}/.jsenv/compile-meta.json`)\n  const compileMeta = await compileMetaResponse.json()\n  const { outDirectoryRelativeUrl, errorStackRemapping } = compileMeta\n  const outDirectoryUrl = `${compileServerOrigin}/${outDirectoryRelativeUrl}`\n  const afterOutDirectory = document.location.href.slice(outDirectoryUrl.length)\n  const parts = afterOutDirectory.split(\"/\")\n  const compileId = parts[0]\n  const remaining = parts.slice(1).join(\"/\")\n  const htmlFileRelativeUrl = remaining\n\n  const browserRuntime = await createBrowserRuntime({\n    compileServerOrigin,\n    outDirectoryRelativeUrl,\n    compileId,\n    htmlFileRelativeUrl,\n  })\n\n  if (errorStackRemapping && Error.captureStackTrace) {\n    const { sourcemapMainFileRelativeUrl, sourcemapMappingFileRelativeUrl } = compileMeta\n\n    await fetchAndEvalUsingFetch(`${compileServerOrigin}/${sourcemapMainFileRelativeUrl}`)\n    const { SourceMapConsumer } = window.sourceMap\n    SourceMapConsumer.initialize({\n      \"lib/mappings.wasm\": `${compileServerOrigin}/${sourcemapMappingFileRelativeUrl}`,\n    })\n    const { getErrorOriginalStackString } = installBrowserErrorStackRemapping({\n      SourceMapConsumer,\n    })\n\n    const errorTransform = async (error) => {\n      // code can throw something else than an error\n      // in that case return it unchanged\n      if (!error || !(error instanceof Error)) return error\n      const originalStack = await getErrorOriginalStackString(error)\n      error.stack = originalStack\n      return error\n    }\n\n    const executeFile = browserRuntime.executeFile\n    browserRuntime.executeFile = (file, options = {}) => {\n      return executeFile(file, { errorTransform, ...options })\n    }\n  }\n\n  return browserRuntime\n})\n\nwindow.__jsenv__ = {\n  executionResultPromise,\n  executeFileUsingDynamicImport,\n  executeFileUsingSystemJs,\n}\n"
  ]
}