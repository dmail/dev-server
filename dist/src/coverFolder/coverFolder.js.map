{"version":3,"sources":["../../../src/coverFolder/coverFolder.js"],"names":["mergeCoverage","coverages","mergedCoverageMap","reduce","previous","coverage","merge","toJSON","testProject","server","createClient","compileURL","root","process","cwd","beforeAll","beforeEach","afterEach","afterAll","sourceInclude","testInclude","sourceExclude","testExclude","getTestIgnoreString","filename","resolve","Promise","reject","readFile","error","buffer","code","toString","absoluteLocation","getSourceFiles","nodir","ignore","getTestFiles","then","ignoreRules","add","_rules","map","origin","all","client","testFiles","sourceFiles","testFile","path","type","sourceFile","files","getFileByPath","find","file","execute","collectCoverage","executeTest","autoClose","promise","output","Object","keys","forEach","untestedSourceFiles","filter","getEmptyCoverageFor","compileFile","outputAssets","coverageAsset","asset","name","JSON","parse","content","s","key","missingCoverage","createCoverageFromTestReport"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,GAAkB;AAAA,oCAAdC,SAAc;AAAdA,aAAc;AAAA;;AACtC;AACA,MAAMC,oBAAoBD,UAAUE,MAAV,CAAiB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACjE,WAAOD,SAASE,KAAT,CAAeD,QAAf,CAAP;AACD,GAFyB,EAEvB,4CAAkB,EAAlB,CAFuB,CAA1B;;AAIA,SAAOH,kBAAkBK,MAAlB,EAAP;AACD,CAPD;;AASO,IAAMC,oCAAc,SAAdA,WAAc,OA4BrB;AAAA,MA3BJC,MA2BI,QA3BJA,MA2BI;AAAA,+BA1BJC,YA0BI;AAAA,MA1BJA,YA0BI,qCA1BW;AAAA,WAAM,4CAAmB,EAAEC,YAAYF,OAAOE,UAArB,EAAnB,CAAN;AAAA,GA0BX;AAAA,uBAzBJC,IAyBI;AAAA,MAzBJA,IAyBI,6BAzBGC,QAAQC,GAAR,EAyBH;AAAA,4BAxBJC,SAwBI;AAAA,MAxBJA,SAwBI,kCAxBQ,YAAM,CAAE,CAwBhB;AAAA,6BAvBJC,UAuBI;AAAA,MAvBJA,UAuBI,mCAvBS,YAAM,CAAE,CAuBjB;AAAA,4BAtBJC,SAsBI;AAAA,MAtBJA,SAsBI,kCAtBQ,YAAM,CAAE,CAsBhB;AAAA,2BArBJC,QAqBI;AAAA,MArBJA,QAqBI,iCArBO,YAAM,CAAE,CAqBf;AAAA,gCApBJC,aAoBI;AAAA,MApBJA,aAoBI,sCApBY,CAAC,UAAD,EAAa,aAAb,CAoBZ;AAAA,8BAnBJC,WAmBI;AAAA,MAnBJA,WAmBI,oCAnBU,CAAC,eAAD,EAAkB,kBAAlB,CAmBV;AAAA,gCAlBJC,aAkBI;AAAA,MAlBJA,aAkBI,mEAlBgBD,WAkBhB;AAAA,8BAjBJE,WAiBI;AAAA,MAjBJA,WAiBI,oCAjBU,EAiBV;AAAA,mCAhBJC,mBAgBI;AAAA,MAhBJA,mBAgBI,yCAhBkB,YAAM;AAC1B,QAAMC,WAAW,kBAAKC,OAAL,CAAaZ,QAAQC,GAAR,EAAb,EAA4BF,IAA5B,EAAkC,aAAlC,CAAjB;;AAEA,WAAO,IAAIc,OAAJ,CAAY,UAACD,OAAD,EAAUE,MAAV,EAAqB;AACtC,sBAAGC,QAAH,CAAYJ,QAAZ,EAAsB,UAACK,KAAD,EAAQC,MAAR,EAAmB;AACvC,YAAID,KAAJ,EAAW;AACT,cAAIA,SAASA,MAAME,IAAN,KAAe,QAA5B,EAAsC;AACpCN,oBAAQ,EAAR;AACD;AACDE,iBAAOE,KAAP;AACD,SALD,MAKO;AACLJ,kBAAQK,OAAOE,QAAP,EAAR;AACD;AACF,OATD;AAUD,KAXM,CAAP;AAYD,GACG;;AACJ,MAAMC,mBAAmB,kBAAKR,OAAL,CAAaZ,QAAQC,GAAR,EAAb,EAA4BF,IAA5B,CAAzB;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMsB,iBAAiB,SAAjBA,cAAiB,GAAM;AAC3B,WAAO,yBAAKf,aAAL,EAAoB;AACzBgB,aAAO,IADkB;AAEzBrB,WAAKmB,gBAFoB;AAGzBG,cAAQf;AAHiB,KAApB,CAAP;AAKD,GAND;;AAQA,MAAMgB,eAAe,SAAfA,YAAe,GAAM;AACzB,WAAOd,sBACJe,IADI,CACC,UAACC,WAAD;AAAA,aACJ,2BACGC,GADH,CACOlB,WADP,EAEGkB,GAFH,CAEOD,WAFP,CADI;AAAA,KADD,EAMJD,IANI,CAMC,UAACF,MAAD;AAAA,aACJ,yBAAKhB,WAAL,EAAkB;AAChBe,eAAO,IADS;AAEhBrB,aAAKmB,gBAFW;AAGhBG,gBAAQA,OAAOK,MAAP,CAAcC,GAAd,CAAkB;AAAA,cAAGC,MAAH,SAAGA,MAAH;AAAA,iBAAgBA,MAAhB;AAAA,SAAlB;AAHQ,OAAlB,CADI;AAAA,KAND,CAAP;AAaD,GAdD;;AAgBA,SAAOjB,QAAQkB,GAAR,CAAY,CAAClC,cAAD,EAAiB2B,cAAjB,EAAiCH,gBAAjC,CAAZ,EAAgEI,IAAhE,CACL,iBAAsC;AAAA;AAAA,QAApCO,MAAoC;AAAA,QAA5BC,SAA4B;AAAA,QAAjBC,WAAiB;;AACpCD,gBAAYA,UAAUJ,GAAV,CAAc,UAACM,QAAD,EAAc;AACtC,aAAO;AACLC,cAAMD,QADD;AAELE,cAAM;AAFD,OAAP;AAID,KALW,CAAZ;AAMAH,kBAAcA,YAAYL,GAAZ,CAAgB,UAACS,UAAD,EAAgB;AAC5C,aAAO;AACLF,cAAME,UADD;AAELD,cAAM;AAFD,OAAP;AAID,KALa,CAAd;;AAOA,QAAME,qCAAYN,SAAZ,sBAA0BC,WAA1B,EAAN;;AAEA,QAAMM,gBAAgB,SAAhBA,aAAgB,CAACJ,IAAD;AAAA,aAAUG,MAAME,IAAN,CAAW,UAACC,IAAD;AAAA,eAAUA,KAAKN,IAAL,KAAcA,IAAxB;AAAA,OAAX,CAAV;AAAA,KAAtB;;AAEAlC,cAAU,EAAEqC,YAAF,EAAV;AACA,WAAO1B,QAAQkB,GAAR,CACLE,UAAUJ,GAAV,CAAc,UAACM,QAAD,EAAc;AAC1BhC,iBAAW,EAAEuC,MAAMP,QAAR,EAAX;;AAEA,aAAOH,OACJW,OADI,CACI;AACPD,cAAMP,SAASC,IADR;AAEPQ,yBAAiB,IAFV;AAGPC,qBAAa,IAHN;AAIPC,mBAAW;AAJJ,OADJ,EAOJrB,IAPI,CAOC;AAAA,YAAGsB,OAAH,SAAGA,OAAH;AAAA,eAAiBA,OAAjB;AAAA,OAPD,EAQJtB,IARI,CAQC,iBAA0B;AAAA,YAAvBuB,MAAuB,SAAvBA,MAAuB;AAAA,YAAfxD,QAAe,SAAfA,QAAe;;AAC9B;AACA;AACA;AACA;AACA;AACA2C,iBAASa,MAAT,GAAkBA,MAAlB;AACAC,eAAOC,IAAP,CAAY1D,QAAZ,EAAsB2D,OAAtB,CAA8B,UAACf,IAAD,EAAU;AACtC,cAAME,aAAaE,cAAcJ,IAAd,CAAnB;AACAE,qBAAW9C,QAAX,GAAsB8C,WAAW9C,QAAX,GAClBL,cAAcmD,WAAW9C,QAAzB,EAAmCA,SAAS4C,IAAT,CAAnC,CADkB,GAElB5C,SAAS4C,IAAT,CAFJ;AAGD,SALD;;AAOAhC,kBAAU,EAAEsC,MAAMP,QAAR,EAAV;AACD,OAvBI,CAAP;AAwBD,KA3BD,CADK,EA8BJV,IA9BI,CA8BC,YAAM;AACVpB,eAAS,EAAEkC,YAAF,EAAT;;AAEA,UAAMa,sBAAsBlB,YAAYmB,MAAZ,CAAmB,UAACf,UAAD,EAAgB;AAC7D,eAAO,CAACA,WAAW9C,QAAnB;AACD,OAF2B,CAA5B;;AAIA,UAAM8D,sBAAsB,SAAtBA,mBAAsB,CAACZ,IAAD,EAAU;AACpC;AACA;AACA;AACA,eAAO9C,OAAO2D,WAAP,CAAmBb,IAAnB,EAAyBjB,IAAzB,CAA8B,iBAAsB;AAAA,cAAnB+B,YAAmB,SAAnBA,YAAmB;;AACzD,cAAMC,gBAAgBD,aAAaf,IAAb,CAAkB,UAACiB,KAAD;AAAA,mBAAWA,MAAMC,IAAN,KAAe,UAA1B;AAAA,WAAlB,CAAtB;AACA,cAAMnE,WAAWoE,KAAKC,KAAL,CAAWJ,cAAcK,OAAzB,CAAjB;AACA;AACAb,iBAAOC,IAAP,CAAY1D,SAASuE,CAArB,EAAwBZ,OAAxB,CAAgC,UAASa,GAAT,EAAc;AAC5CxE,qBAASuE,CAAT,CAAWC,GAAX,IAAkB,CAAlB;AACD,WAFD;AAGA,iBAAOxE,QAAP;AACD,SARM,CAAP;AASD,OAbD;;AAeA,aAAOqB,QAAQkB,GAAR,CACLqB,oBAAoBvB,GAApB,CAAwB,UAACS,UAAD,EAAgB;AACtC,eAAOgB,oBAAoBhB,UAApB,EAAgCb,IAAhC,CAAqC,UAACwC,eAAD,EAAqB;AAC/D3B,qBAAW9C,QAAX,GAAsByE,eAAtB;AACD,SAFM,CAAP;AAGD,OAJD,CADK,CAAP;AAOD,KA3DI,EA4DJxC,IA5DI,CA4DC,YAAM;AACV,aAAOc,KAAP;AACD,KA9DI,CAAP;AA+DD,GAnFI,CAAP;AAqFD,CAjJM;;AAmJA,IAAM2B,sEAA+B,SAA/BA,4BAA+B,CAAC3B,KAAD,EAAW;AACrD,MAAM/C,WAAW,EAAjB;;AAEA+C,QAAMY,OAAN,CAAc,UAACT,IAAD,EAAU;AACtB,QAAIA,KAAKlD,QAAT,EAAmB;AACjBA,eAASkD,KAAKlD,QAAL,CAAc4C,IAAvB,IAA+BM,KAAKlD,QAApC;AACD;AACF,GAJD;;AAMA,SAAOA,QAAP;AACD,CAVM","file":"coverFolder.js","sourcesContent":["import { openChromiumClient } from \"../openChromiumClient/openChromiumClient.js\"\nimport { glob } from \"glob-gitignore\"\nimport ignore from \"ignore\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport { createCoverageMap } from \"istanbul-lib-coverage\"\n\nconst mergeCoverage = (...coverages) => {\n  // https://github.com/istanbuljs/istanbuljs/blob/5405550c3868712b14fd8bfe0cbd6f2e7ac42279/packages/istanbul-lib-coverage/lib/coverage-map.js#L43\n  const mergedCoverageMap = coverages.reduce((previous, coverage) => {\n    return previous.merge(coverage)\n  }, createCoverageMap({}))\n\n  return mergedCoverageMap.toJSON()\n}\n\nexport const testProject = ({\n  server,\n  createClient = () => openChromiumClient({ compileURL: server.compileURL }),\n  root = process.cwd(),\n  beforeAll = () => {},\n  beforeEach = () => {},\n  afterEach = () => {},\n  afterAll = () => {},\n  sourceInclude = [\"index.js\", \"src/**/*.js\"],\n  testInclude = [\"index.test.js\", \"src/**/*.test.js\"],\n  sourceExclude = [...testInclude],\n  testExclude = [],\n  getTestIgnoreString = () => {\n    const filename = path.resolve(process.cwd(), root, \".testignore\")\n\n    return new Promise((resolve, reject) => {\n      fs.readFile(filename, (error, buffer) => {\n        if (error) {\n          if (error && error.code === \"ENOENT\") {\n            resolve(\"\")\n          }\n          reject(error)\n        } else {\n          resolve(buffer.toString())\n        }\n      })\n    })\n  },\n}) => {\n  const absoluteLocation = path.resolve(process.cwd(), root)\n\n  // https://github.com/kaelzhang/node-ignore\n  // https://github.com/kaelzhang/node-glob-gitignore\n  // https://karma-runner.github.io/latest/config/plugins.html\n  // https://karma-runner.github.io/latest/dev/plugins.html\n  // https://www.npmjs.com/package/glob#options\n  const getSourceFiles = () => {\n    return glob(sourceInclude, {\n      nodir: true,\n      cwd: absoluteLocation,\n      ignore: sourceExclude,\n    })\n  }\n\n  const getTestFiles = () => {\n    return getTestIgnoreString()\n      .then((ignoreRules) =>\n        ignore()\n          .add(testExclude)\n          .add(ignoreRules),\n      )\n      .then((ignore) =>\n        glob(testInclude, {\n          nodir: true,\n          cwd: absoluteLocation,\n          ignore: ignore._rules.map(({ origin }) => origin),\n        }),\n      )\n  }\n\n  return Promise.all([createClient(), getTestFiles(), getSourceFiles()]).then(\n    ([client, testFiles, sourceFiles]) => {\n      testFiles = testFiles.map((testFile) => {\n        return {\n          path: testFile,\n          type: \"test\",\n        }\n      })\n      sourceFiles = sourceFiles.map((sourceFile) => {\n        return {\n          path: sourceFile,\n          type: \"source\",\n        }\n      })\n\n      const files = [...testFiles, ...sourceFiles]\n\n      const getFileByPath = (path) => files.find((file) => file.path === path)\n\n      beforeAll({ files })\n      return Promise.all(\n        testFiles.map((testFile) => {\n          beforeEach({ file: testFile })\n\n          return client\n            .execute({\n              file: testFile.path,\n              collectCoverage: true,\n              executeTest: true,\n              autoClose: true,\n            })\n            .then(({ promise }) => promise)\n            .then(({ output, coverage }) => {\n              // test = null means file.test.js do not set a global.__test\n              // which happens if file.test.js does not use @dmail/test or is empty for instance\n              // coverage = null means file.test.js do not set a global.__coverage__\n              // which happens if file.test.js was not instrumented.\n              // this is not supposed to happen so we should throw ?\n              testFile.output = output\n              Object.keys(coverage).forEach((path) => {\n                const sourceFile = getFileByPath(path)\n                sourceFile.coverage = sourceFile.coverage\n                  ? mergeCoverage(sourceFile.coverage, coverage[path])\n                  : coverage[path]\n              })\n\n              afterEach({ file: testFile })\n            })\n        }),\n      )\n        .then(() => {\n          afterAll({ files })\n\n          const untestedSourceFiles = sourceFiles.filter((sourceFile) => {\n            return !sourceFile.coverage\n          })\n\n          const getEmptyCoverageFor = (file) => {\n            // we must compileFile to get the coverage object\n            // without evaluating the file source because it would increment coverage\n            // and also execute code that is not supposed to be run\n            return server.compileFile(file).then(({ outputAssets }) => {\n              const coverageAsset = outputAssets.find((asset) => asset.name === \"coverage\")\n              const coverage = JSON.parse(coverageAsset.content)\n              // https://github.com/gotwarlost/istanbul/blob/bc84c315271a5dd4d39bcefc5925cfb61a3d174a/lib/command/common/run-with-cover.js#L229\n              Object.keys(coverage.s).forEach(function(key) {\n                coverage.s[key] = 0\n              })\n              return coverage\n            })\n          }\n\n          return Promise.all(\n            untestedSourceFiles.map((sourceFile) => {\n              return getEmptyCoverageFor(sourceFile).then((missingCoverage) => {\n                sourceFile.coverage = missingCoverage\n              })\n            }),\n          )\n        })\n        .then(() => {\n          return files\n        })\n    },\n  )\n}\n\nexport const createCoverageFromTestReport = (files) => {\n  const coverage = {}\n\n  files.forEach((file) => {\n    if (file.coverage) {\n      coverage[file.coverage.path] = file.coverage\n    }\n  })\n\n  return coverage\n}\n"]}