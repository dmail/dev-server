{
  "version": 3,
  "sources": [
    "../../../src/coverFolder/coverFolder.js"
  ],
  "names": [
    "mergeCoverage",
    "coverages",
    "mergedCoverageMap",
    "reduce",
    "previous",
    "coverage",
    "merge",
    "toJSON",
    "testProject",
    "server",
    "createClient",
    "compileURL",
    "root",
    "process",
    "cwd",
    "beforeAll",
    "beforeEach",
    "afterEach",
    "afterAll",
    "sourceInclude",
    "testInclude",
    "sourceExclude",
    "testExclude",
    "getTestIgnoreString",
    "filename",
    "path",
    "resolve",
    "Promise",
    "reject",
    "fs",
    "readFile",
    "error",
    "buffer",
    "code",
    "toString",
    "absoluteLocation",
    "getSourceFiles",
    "nodir",
    "ignore",
    "getTestFiles",
    "then",
    "ignoreRules",
    "add",
    "_rules",
    "map",
    "origin",
    "all",
    "client",
    "testFiles",
    "sourceFiles",
    "testFile",
    "type",
    "sourceFile",
    "files",
    "getFileByPath",
    "find",
    "file",
    "execute",
    "collectCoverage",
    "executeTest",
    "autoClose",
    "promise",
    "output",
    "Object",
    "keys",
    "forEach",
    "untestedSourceFiles",
    "filter",
    "getEmptyCoverageFor",
    "compileFile",
    "outputAssets",
    "coverageAsset",
    "asset",
    "name",
    "JSON",
    "parse",
    "content",
    "s",
    "key",
    "missingCoverage",
    "createCoverageFromTestReport"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { openChromiumClient } from \"../openChromiumClient/openChromiumClient.js\"\nimport { glob } from \"glob-gitignore\"\nimport ignore from \"ignore\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport { createCoverageMap } from \"istanbul-lib-coverage\"\n\nconst mergeCoverage = (...coverages) => {\n  // https://github.com/istanbuljs/istanbuljs/blob/5405550c3868712b14fd8bfe0cbd6f2e7ac42279/packages/istanbul-lib-coverage/lib/coverage-map.js#L43\n  const mergedCoverageMap = coverages.reduce((previous, coverage) => {\n    return previous.merge(coverage)\n  }, createCoverageMap({}))\n\n  return mergedCoverageMap.toJSON()\n}\n\nexport const testProject = ({\n  server,\n  createClient = () => openChromiumClient({ compileURL: server.compileURL }),\n  root = process.cwd(),\n  beforeAll = () => {},\n  beforeEach = () => {},\n  afterEach = () => {},\n  afterAll = () => {},\n  sourceInclude = [\"index.js\", \"src/**/*.js\"],\n  testInclude = [\"index.test.js\", \"src/**/*.test.js\"],\n  sourceExclude = [...testInclude],\n  testExclude = [],\n  getTestIgnoreString = () => {\n    const filename = path.resolve(process.cwd(), root, \".testignore\")\n\n    return new Promise((resolve, reject) => {\n      fs.readFile(filename, (error, buffer) => {\n        if (error) {\n          if (error && error.code === \"ENOENT\") {\n            resolve(\"\")\n          }\n          reject(error)\n        } else {\n          resolve(buffer.toString())\n        }\n      })\n    })\n  },\n}) => {\n  const absoluteLocation = path.resolve(process.cwd(), root)\n\n  // https://github.com/kaelzhang/node-ignore\n  // https://github.com/kaelzhang/node-glob-gitignore\n  // https://karma-runner.github.io/latest/config/plugins.html\n  // https://karma-runner.github.io/latest/dev/plugins.html\n  // https://www.npmjs.com/package/glob#options\n  const getSourceFiles = () => {\n    return glob(sourceInclude, {\n      nodir: true,\n      cwd: absoluteLocation,\n      ignore: sourceExclude,\n    })\n  }\n\n  const getTestFiles = () => {\n    return getTestIgnoreString()\n      .then((ignoreRules) =>\n        ignore()\n          .add(testExclude)\n          .add(ignoreRules),\n      )\n      .then((ignore) =>\n        glob(testInclude, {\n          nodir: true,\n          cwd: absoluteLocation,\n          ignore: ignore._rules.map(({ origin }) => origin),\n        }),\n      )\n  }\n\n  return Promise.all([createClient(), getTestFiles(), getSourceFiles()]).then(\n    ([client, testFiles, sourceFiles]) => {\n      testFiles = testFiles.map((testFile) => {\n        return {\n          path: testFile,\n          type: \"test\",\n        }\n      })\n      sourceFiles = sourceFiles.map((sourceFile) => {\n        return {\n          path: sourceFile,\n          type: \"source\",\n        }\n      })\n\n      const files = [...testFiles, ...sourceFiles]\n\n      const getFileByPath = (path) => files.find((file) => file.path === path)\n\n      beforeAll({ files })\n      return Promise.all(\n        testFiles.map((testFile) => {\n          beforeEach({ file: testFile })\n\n          return client\n            .execute({\n              file: testFile.path,\n              collectCoverage: true,\n              executeTest: true,\n              autoClose: true,\n            })\n            .then(({ promise }) => promise)\n            .then(({ output, coverage }) => {\n              // test = null means file.test.js do not set a global.__test\n              // which happens if file.test.js does not use @dmail/test or is empty for instance\n              // coverage = null means file.test.js do not set a global.__coverage__\n              // which happens if file.test.js was not instrumented.\n              // this is not supposed to happen so we should throw ?\n              testFile.output = output\n              Object.keys(coverage).forEach((path) => {\n                const sourceFile = getFileByPath(path)\n                sourceFile.coverage = sourceFile.coverage\n                  ? mergeCoverage(sourceFile.coverage, coverage[path])\n                  : coverage[path]\n              })\n\n              afterEach({ file: testFile })\n            })\n        }),\n      )\n        .then(() => {\n          afterAll({ files })\n\n          const untestedSourceFiles = sourceFiles.filter((sourceFile) => {\n            return !sourceFile.coverage\n          })\n\n          const getEmptyCoverageFor = (file) => {\n            // we must compileFile to get the coverage object\n            // without evaluating the file source because it would increment coverage\n            // and also execute code that is not supposed to be run\n            return server.compileFile(file).then(({ outputAssets }) => {\n              const coverageAsset = outputAssets.find((asset) => asset.name === \"coverage\")\n              const coverage = JSON.parse(coverageAsset.content)\n              // https://github.com/gotwarlost/istanbul/blob/bc84c315271a5dd4d39bcefc5925cfb61a3d174a/lib/command/common/run-with-cover.js#L229\n              Object.keys(coverage.s).forEach(function(key) {\n                coverage.s[key] = 0\n              })\n              return coverage\n            })\n          }\n\n          return Promise.all(\n            untestedSourceFiles.map((sourceFile) => {\n              return getEmptyCoverageFor(sourceFile).then((missingCoverage) => {\n                sourceFile.coverage = missingCoverage\n              })\n            }),\n          )\n        })\n        .then(() => {\n          return files\n        })\n    },\n  )\n}\n\nexport const createCoverageFromTestReport = (files) => {\n  const coverage = {}\n\n  files.forEach((file) => {\n    if (file.coverage) {\n      coverage[file.coverage.path] = file.coverage\n    }\n  })\n\n  return coverage\n}\n"
  ]
}