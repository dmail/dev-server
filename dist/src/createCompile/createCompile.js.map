{"version":3,"sources":["../../../src/createCompile/createCompile.js"],"names":["transform","context","transformer","Promise","resolve","inputSource","outputSource","inputSourceMap","outputSourceMap","inputAst","outputAst","then","result","createDefaultOptions","abstractFolderRelativeLocation","transpile","instrument","remap","identify","identifyMethod","minify","optimize","remapMethod","instrumentPredicate","inputRelativeLocation","startsWith","endsWith","createCompile","createOptions","transpiler","minifier","instrumenter","optimizer","compile","compileContext","all","defaultOptions","customOptions","options","generate","outputRelativeLocation","outputSourceMapName","basename","getSourceNameForSourceMap","rootLocation","getSourceLocationForSourceMap","outputAssets","output","Object","keys","map","name","content"],"mappings":"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","file":"createCompile.js","sourcesContent":["import { identifier } from \"./identifier.js\"\nimport { instrumenter as defaultInstrumenter } from \"./instrumenter-babel.js\"\nimport { minifier as defaultMinifier } from \"./minifier.js\"\nimport { optimizer as defaultOptimizer } from \"./optimizer.js\"\nimport { remapper } from \"./remapper.js\"\nimport { transpiler as defaultTranspiler } from \"./transpiler.js\"\nimport { resolvePath } from \"../createCompileService/helpers.js\"\nimport path from \"path\"\n\nconst transform = (context, transformer) => {\n  return Promise.resolve(\n    transformer({\n      ...context,\n      inputSource: context.outputSource,\n      inputSourceMap: context.outputSourceMap,\n      inputAst: context.outputAst,\n    }),\n  ).then((result) => {\n    // for now result is expected to null, undefined, or an object with any properties named\n    // outputSource, outputAst, outputSourceMap, outputSourceMapName, outputAssets\n\n    if (result) {\n      return {\n        ...context,\n        ...result,\n      }\n    }\n    return context\n  })\n}\n\nconst createDefaultOptions = ({ abstractFolderRelativeLocation }) => {\n  let transpile = false\n  if (abstractFolderRelativeLocation === \"compiled\") {\n    transpile = true\n  }\n\n  let instrument = false\n  if (abstractFolderRelativeLocation === \"instrumented\") {\n    transpile = true\n    instrument = true\n  }\n\n  const remap = true\n\n  return {\n    identify: false,\n    identifyMethod: \"relative\",\n    transpile,\n    minify: false,\n    instrument,\n    optimize: false,\n    remap,\n    remapMethod: \"comment\", // 'comment', 'inline'\n  }\n}\n\nconst instrumentPredicate = ({ inputRelativeLocation }) => {\n  if (inputRelativeLocation.startsWith(\"node_modules/\")) {\n    return false\n  }\n  // it should be passed by coverFolder\n  // because we are duplicating the logic about\n  // what is a test file and what is a source file there\n  if (inputRelativeLocation.endsWith(\".test.js\")) {\n    return false\n  }\n  return true\n}\n\nexport const createCompile = (\n  {\n    createOptions = () => {},\n    transpiler = defaultTranspiler,\n    minifier = defaultMinifier,\n    instrumenter = defaultInstrumenter,\n    optimizer = defaultOptimizer,\n  } = {},\n) => {\n  const compile = (compileContext) => {\n    return Promise.all([createDefaultOptions(compileContext), createOptions(compileContext)]).then(\n      ([defaultOptions, customOptions = {}]) => {\n        const options = {\n          ...defaultOptions,\n          ...customOptions,\n        }\n        let { identify, transpile, instrument, minify, optimize, remap } = options\n\n        const generate = ({ outputRelativeLocation }) => {\n          // outputRelativeLocation dependent from options:\n          // there is a 1/1 relationship between JSON.stringify(options) & outputRelativeLocation\n          // it means we can get options from outputRelativeLocation & vice versa\n          // this is how compile output gets cached\n\n          // no location -> cannot identify\n          if (!compileContext.inputRelativeLocation) {\n            identify = false\n          }\n          // if sourceMap are appended as comment do not put any //#sourceURL=../../file.js\n          // because sourceMappingURL will try to resolve against sourceURL\n          if (remap) {\n            identify = false\n          }\n\n          return Promise.resolve({\n            outputSource: compileContext.inputSource,\n            outputSourceMap: compileContext.inputSourceMap,\n            // folder/file.js -> file.js.map\n            outputSourceMapName: `${path.basename(compileContext.inputRelativeLocation)}.map`,\n            outputAst: compileContext.inputAst,\n            getSourceNameForSourceMap: ({ rootLocation, inputRelativeLocation }) => {\n              return resolvePath(rootLocation, inputRelativeLocation)\n            },\n            getSourceLocationForSourceMap: ({ inputRelativeLocation }) => {\n              return inputRelativeLocation\n            },\n            ...compileContext,\n            outputRelativeLocation,\n            options,\n          })\n            .then((context) => (transpile ? transform(context, transpiler) : context))\n            .then((context) => {\n              if (instrument && instrumentPredicate(context)) {\n                return transform(context, instrumenter)\n              }\n              return context\n            })\n            .then((context) => (minify ? transform(context, minifier) : context))\n            .then((context) => (optimize ? transform(context, optimizer) : context))\n            .then((context) => (identify ? transform(context, identifier) : context))\n            .then((context) => (remap ? transform(context, remapper) : context))\n            .then(({ outputSource, outputAssets = {} }) => {\n              return {\n                output: outputSource,\n                outputAssets: Object.keys(outputAssets).map((name) => {\n                  return {\n                    name,\n                    content: outputAssets[name],\n                  }\n                }),\n              }\n            })\n        }\n\n        return { options, generate }\n      },\n    )\n  }\n\n  return compile\n}\n"]}