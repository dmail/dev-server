{
  "version": 3,
  "sources": [
    "../../../src/createCompile/createCompile.js"
  ],
  "names": [
    "transform",
    "context",
    "transformer",
    "Promise",
    "resolve",
    "inputSource",
    "outputSource",
    "inputSourceMap",
    "outputSourceMap",
    "inputAst",
    "outputAst",
    "then",
    "result",
    "createDefaultOptions",
    "abstractFolderRelativeLocation",
    "transpile",
    "instrument",
    "remap",
    "identify",
    "identifyMethod",
    "minify",
    "optimize",
    "remapMethod",
    "instrumentPredicate",
    "inputRelativeLocation",
    "startsWith",
    "endsWith",
    "createCompile",
    "createOptions",
    "transpiler",
    "defaultTranspiler",
    "minifier",
    "defaultMinifier",
    "instrumenter",
    "defaultInstrumenter",
    "optimizer",
    "defaultOptimizer",
    "compile",
    "compileContext",
    "all",
    "defaultOptions",
    "customOptions",
    "options",
    "generate",
    "outputRelativeLocation",
    "outputSourceMapName",
    "path",
    "basename",
    "getSourceNameForSourceMap",
    "rootLocation",
    "getSourceLocationForSourceMap",
    "identifier",
    "remapper",
    "outputAssets",
    "output",
    "Object",
    "keys",
    "map",
    "name",
    "content"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,SAAS,GAAG,CAACC,OAAD,EAAUC,WAAV,KAA0B;AAC1C,SAAOC,OAAO,CAACC,OAAR,CACLF,WAAW,mBACND,OADM;AAETI,IAAAA,WAAW,EAAEJ,OAAO,CAACK,YAFZ;AAGTC,IAAAA,cAAc,EAAEN,OAAO,CAACO,eAHf;AAITC,IAAAA,QAAQ,EAAER,OAAO,CAACS;AAJT,KADN,EAOLC,IAPK,CAOCC,MAAD,IAAY;AACjB;AACA;AAEA,QAAIA,MAAJ,EAAY;AACV,+BACKX,OADL,EAEKW,MAFL;AAID;;AACD,WAAOX,OAAP;AACD,GAlBM,CAAP;AAmBD,CApBD;;AAsBA,MAAMY,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwC;AACnE,MAAIC,SAAS,GAAG,KAAhB;;AACA,MAAID,8BAA8B,KAAK,UAAvC,EAAmD;AACjDC,IAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,MAAIC,UAAU,GAAG,KAAjB;;AACA,MAAIF,8BAA8B,KAAK,cAAvC,EAAuD;AACrDC,IAAAA,SAAS,GAAG,IAAZ;AACAC,IAAAA,UAAU,GAAG,IAAb;AACD;;AAED,QAAMC,KAAK,GAAG,IAAd;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,cAAc,EAAE,UAFX;AAGLJ,IAAAA,SAHK;AAILK,IAAAA,MAAM,EAAE,KAJH;AAKLJ,IAAAA,UALK;AAMLK,IAAAA,QAAQ,EAAE,KANL;AAOLJ,IAAAA,KAPK;AAQLK,IAAAA,WAAW,EAAE,SARR,CAQmB;;AARnB,GAAP;AAUD,CAxBD;;AA0BA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AACzD,MAAIA,qBAAqB,CAACC,UAAtB,CAAiC,eAAjC,CAAJ,EAAuD;AACrD,WAAO,KAAP;AACD,GAHwD,CAIzD;AACA;AACA;;;AACA,MAAID,qBAAqB,CAACE,QAAtB,CAA+B,UAA/B,CAAJ,EAAgD;AAC9C,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CAXD;;AAaO,MAAMC,aAAa,GAAG,CAC3B;AACEC,EAAAA,aAAa,GAAG,MAAM,CAAE,CAD1B;AAEEC,EAAAA,UAAU,GAAGC,sBAFf;AAGEC,EAAAA,QAAQ,GAAGC,kBAHb;AAIEC,EAAAA,YAAY,GAAGC,+BAJjB;AAKEC,EAAAA,SAAS,GAAGC;AALd,IAMI,EAPuB,KAQxB;AACH,QAAMC,OAAO,GAAIC,cAAD,IAAoB;AAClC,WAAOnC,OAAO,CAACoC,GAAR,CAAY,CAAC1B,oBAAoB,CAACyB,cAAD,CAArB,EAAuCV,aAAa,CAACU,cAAD,CAApD,CAAZ,EAAmF3B,IAAnF,CACL,CAAC,CAAC6B,cAAD,EAAiBC,aAAa,GAAG,EAAjC,CAAD,KAA0C;AACxC,YAAMC,OAAO,qBACRF,cADQ,EAERC,aAFQ,CAAb;;AAIA,UAAI;AAAEvB,QAAAA,QAAF;AAAYH,QAAAA,SAAZ;AAAuBC,QAAAA,UAAvB;AAAmCI,QAAAA,MAAnC;AAA2CC,QAAAA,QAA3C;AAAqDJ,QAAAA;AAArD,UAA+DyB,OAAnE;;AAEA,YAAMC,QAAQ,GAAG,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgC;AAC/C;AACA;AACA;AACA;AAEA;AACA,YAAI,CAACN,cAAc,CAACd,qBAApB,EAA2C;AACzCN,UAAAA,QAAQ,GAAG,KAAX;AACD,SAT8C,CAU/C;AACA;;;AACA,YAAID,KAAJ,EAAW;AACTC,UAAAA,QAAQ,GAAG,KAAX;AACD;;AAED,eAAOf,OAAO,CAACC,OAAR;AACLE,UAAAA,YAAY,EAAEgC,cAAc,CAACjC,WADxB;AAELG,UAAAA,eAAe,EAAE8B,cAAc,CAAC/B,cAF3B;AAGL;AACAsC,UAAAA,mBAAmB,EAAG,GAAEC,cAAKC,QAAL,CAAcT,cAAc,CAACd,qBAA7B,CAAoD,MAJvE;AAKLd,UAAAA,SAAS,EAAE4B,cAAc,CAAC7B,QALrB;AAMLuC,UAAAA,yBAAyB,EAAE,CAAC;AAAEC,YAAAA,YAAF;AAAgBzB,YAAAA;AAAhB,WAAD,KAA6C;AACtE,mBAAO,0BAAYyB,YAAZ,EAA0BzB,qBAA1B,CAAP;AACD,WARI;AASL0B,UAAAA,6BAA6B,EAAE,CAAC;AAAE1B,YAAAA;AAAF,WAAD,KAA+B;AAC5D,mBAAOA,qBAAP;AACD;AAXI,WAYFc,cAZE;AAaLM,UAAAA,sBAbK;AAcLF,UAAAA;AAdK,YAgBJ/B,IAhBI,CAgBEV,OAAD,IAAcc,SAAS,GAAGf,SAAS,CAACC,OAAD,EAAU4B,UAAV,CAAZ,GAAoC5B,OAhB5D,EAiBJU,IAjBI,CAiBEV,OAAD,IAAa;AACjB,cAAIe,UAAU,IAAIO,mBAAmB,CAACtB,OAAD,CAArC,EAAgD;AAC9C,mBAAOD,SAAS,CAACC,OAAD,EAAUgC,YAAV,CAAhB;AACD;;AACD,iBAAOhC,OAAP;AACD,SAtBI,EAuBJU,IAvBI,CAuBEV,OAAD,IAAcmB,MAAM,GAAGpB,SAAS,CAACC,OAAD,EAAU8B,QAAV,CAAZ,GAAkC9B,OAvBvD,EAwBJU,IAxBI,CAwBEV,OAAD,IAAcoB,QAAQ,GAAGrB,SAAS,CAACC,OAAD,EAAUkC,SAAV,CAAZ,GAAmClC,OAxB1D,EAyBJU,IAzBI,CAyBEV,OAAD,IAAciB,QAAQ,GAAGlB,SAAS,CAACC,OAAD,EAAUkD,sBAAV,CAAZ,GAAoClD,OAzB3D,EA0BJU,IA1BI,CA0BEV,OAAD,IAAcgB,KAAK,GAAGjB,SAAS,CAACC,OAAD,EAAUmD,kBAAV,CAAZ,GAAkCnD,OA1BtD,EA2BJU,IA3BI,CA2BC,CAAC;AAAEL,UAAAA,YAAF;AAAgB+C,UAAAA,YAAY,GAAG;AAA/B,SAAD,KAAyC;AAC7C,iBAAO;AACLC,YAAAA,MAAM,EAAEhD,YADH;AAEL+C,YAAAA,YAAY,EAAEE,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BI,GAA1B,CAA+BC,IAAD,IAAU;AACpD,qBAAO;AACLA,gBAAAA,IADK;AAELC,gBAAAA,OAAO,EAAEN,YAAY,CAACK,IAAD;AAFhB,eAAP;AAID,aALa;AAFT,WAAP;AASD,SArCI,CAAP;AAsCD,OAtDD;;AAwDA,aAAO;AAAEhB,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAP;AACD,KAjEI,CAAP;AAmED,GApED;;AAsEA,SAAON,OAAP;AACD,CAhFM",
  "sourcesContent": [
    "import { identifier } from \"./identifier.js\"\nimport { instrumenter as defaultInstrumenter } from \"./instrumenter-babel.js\"\nimport { minifier as defaultMinifier } from \"./minifier.js\"\nimport { optimizer as defaultOptimizer } from \"./optimizer.js\"\nimport { remapper } from \"./remapper.js\"\nimport { transpiler as defaultTranspiler } from \"./transpiler.js\"\nimport { resolvePath } from \"../createCompileService/helpers.js\"\nimport path from \"path\"\n\nconst transform = (context, transformer) => {\n  return Promise.resolve(\n    transformer({\n      ...context,\n      inputSource: context.outputSource,\n      inputSourceMap: context.outputSourceMap,\n      inputAst: context.outputAst,\n    }),\n  ).then((result) => {\n    // for now result is expected to null, undefined, or an object with any properties named\n    // outputSource, outputAst, outputSourceMap, outputSourceMapName, outputAssets\n\n    if (result) {\n      return {\n        ...context,\n        ...result,\n      }\n    }\n    return context\n  })\n}\n\nconst createDefaultOptions = ({ abstractFolderRelativeLocation }) => {\n  let transpile = false\n  if (abstractFolderRelativeLocation === \"compiled\") {\n    transpile = true\n  }\n\n  let instrument = false\n  if (abstractFolderRelativeLocation === \"instrumented\") {\n    transpile = true\n    instrument = true\n  }\n\n  const remap = true\n\n  return {\n    identify: false,\n    identifyMethod: \"relative\",\n    transpile,\n    minify: false,\n    instrument,\n    optimize: false,\n    remap,\n    remapMethod: \"comment\", // 'comment', 'inline'\n  }\n}\n\nconst instrumentPredicate = ({ inputRelativeLocation }) => {\n  if (inputRelativeLocation.startsWith(\"node_modules/\")) {\n    return false\n  }\n  // it should be passed by coverFolder\n  // because we are duplicating the logic about\n  // what is a test file and what is a source file there\n  if (inputRelativeLocation.endsWith(\".test.js\")) {\n    return false\n  }\n  return true\n}\n\nexport const createCompile = (\n  {\n    createOptions = () => {},\n    transpiler = defaultTranspiler,\n    minifier = defaultMinifier,\n    instrumenter = defaultInstrumenter,\n    optimizer = defaultOptimizer,\n  } = {},\n) => {\n  const compile = (compileContext) => {\n    return Promise.all([createDefaultOptions(compileContext), createOptions(compileContext)]).then(\n      ([defaultOptions, customOptions = {}]) => {\n        const options = {\n          ...defaultOptions,\n          ...customOptions,\n        }\n        let { identify, transpile, instrument, minify, optimize, remap } = options\n\n        const generate = ({ outputRelativeLocation }) => {\n          // outputRelativeLocation dependent from options:\n          // there is a 1/1 relationship between JSON.stringify(options) & outputRelativeLocation\n          // it means we can get options from outputRelativeLocation & vice versa\n          // this is how compile output gets cached\n\n          // no location -> cannot identify\n          if (!compileContext.inputRelativeLocation) {\n            identify = false\n          }\n          // if sourceMap are appended as comment do not put any //#sourceURL=../../file.js\n          // because sourceMappingURL will try to resolve against sourceURL\n          if (remap) {\n            identify = false\n          }\n\n          return Promise.resolve({\n            outputSource: compileContext.inputSource,\n            outputSourceMap: compileContext.inputSourceMap,\n            // folder/file.js -> file.js.map\n            outputSourceMapName: `${path.basename(compileContext.inputRelativeLocation)}.map`,\n            outputAst: compileContext.inputAst,\n            getSourceNameForSourceMap: ({ rootLocation, inputRelativeLocation }) => {\n              return resolvePath(rootLocation, inputRelativeLocation)\n            },\n            getSourceLocationForSourceMap: ({ inputRelativeLocation }) => {\n              return inputRelativeLocation\n            },\n            ...compileContext,\n            outputRelativeLocation,\n            options,\n          })\n            .then((context) => (transpile ? transform(context, transpiler) : context))\n            .then((context) => {\n              if (instrument && instrumentPredicate(context)) {\n                return transform(context, instrumenter)\n              }\n              return context\n            })\n            .then((context) => (minify ? transform(context, minifier) : context))\n            .then((context) => (optimize ? transform(context, optimizer) : context))\n            .then((context) => (identify ? transform(context, identifier) : context))\n            .then((context) => (remap ? transform(context, remapper) : context))\n            .then(({ outputSource, outputAssets = {} }) => {\n              return {\n                output: outputSource,\n                outputAssets: Object.keys(outputAssets).map((name) => {\n                  return {\n                    name,\n                    content: outputAssets[name],\n                  }\n                }),\n              }\n            })\n        }\n\n        return { options, generate }\n      },\n    )\n  }\n\n  return compile\n}\n"
  ]
}