{
  "version": 3,
  "sources": [
    "../../../src/createCompile/identifier.js"
  ],
  "names": [
    "identifier"
  ],
  "mappings": ";;;;;;;AAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM,CAAE,CAA3B,C,CAEP;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "export const identifier = () => {}\n\n// import path from \"path\"\n\n// const writeSourceLocation = ({ source, location }) => {\n//   return `${source}\n// //# sourceURL=${location}`\n// }\n\n// export const identifier = ({\n//   rootLocation,\n//   filename,\n//   inputRelativeLocation,\n//   outputRelativeLocation,\n//   inputSource,\n//   options,\n// }) => {\n//   if (options.identifyMethod === \"relative\") {\n//     // client thinks we are at compiled/folder/file.js\n//     const clientLocation = filename\n//     // but the file is at build/folder/file.js/sjklqdjkljkljlk/file.js\n//     const serverLocation = path.resolve(rootLocation, outputRelativeLocation)\n//     // so client can found it at ../../build/folder/file.js/sjklqdjkljkljlk/file.js\n//     const relativeLocation = path.relative(clientLocation, serverLocation)\n\n//     return {\n//       outputSource: writeSourceLocation({ source: inputSource, location: relativeLocation }),\n//     }\n//   }\n\n//   if (options.identifyMethod === \"absolute\") {\n//     // we will return /Users/dmail/rootLocation/relativeLocation\n//     // we could also return https://ip:port/rootLocation/relativeLocation\n\n//     const serverLocation = path.resolve(rootLocation, inputRelativeLocation)\n//     return {\n//       outputSource: writeSourceLocation({ source: inputSource, location: serverLocation }),\n//     }\n//   }\n// }\n"
  ]
}