{
  "version": 3,
  "sources": [
    "../../../src/createCompile/instrumenter-babel.js"
  ],
  "names": [
    "createInstrumentPlugin",
    "filename",
    "useInlineSourceMaps",
    "types",
    "visitor",
    "Program",
    "enter",
    "path",
    "__dv__",
    "inputSourceMap",
    "opts",
    "file",
    "coverageVariable",
    "exit",
    "object",
    "metadata",
    "coverage",
    "fileCoverage",
    "instrumenter",
    "context",
    "rootLocation",
    "inputRelativeLocation",
    "inputSource",
    "inputAst",
    "outputSourceMapName",
    "options",
    "getSourceNameForSourceMap",
    "getSourceLocationForSourceMap",
    "remapOptions",
    "remap",
    "sourceMaps",
    "sourceMapTarget",
    "sourceFileName",
    "babelOptions",
    "root",
    "babelrc",
    "ast",
    "babelConfig",
    "plugins",
    "push",
    "result",
    "outputSource",
    "code",
    "outputSourceMap",
    "map",
    "outputAst",
    "outputAssets",
    "JSON",
    "stringify"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { createConfig, createSyntaxOptions, mergeOptions } from \"@dmail/shared-config/dist/babel.js\"\nimport { transform, transformFromAst } from \"babel-core\"\nimport { programVisitor } from \"istanbul-lib-instrument\"\n\n// https://github.com/istanbuljs/babel-plugin-istanbul/blob/321740f7b25d803f881466ea819d870f7ed6a254/src/index.js\n\nconst createInstrumentPlugin = ({ filename, useInlineSourceMaps = false } = {}) => {\n  return ({ types }) => {\n    return {\n      visitor: {\n        Program: {\n          enter(path) {\n            this.__dv__ = null\n\n            let inputSourceMap\n            if (useInlineSourceMaps) {\n              inputSourceMap = this.opts.inputSourceMap || this.file.opts.inputSourceMap\n            } else {\n              inputSourceMap = this.opts.inputSourceMap\n            }\n\n            this.__dv__ = programVisitor(types, filename, {\n              coverageVariable: \"__coverage__\",\n              inputSourceMap,\n            })\n            this.__dv__.enter(path)\n          },\n\n          exit(path) {\n            if (!this.__dv__) {\n              return\n            }\n            const object = this.__dv__.exit(path)\n            // object got two properties: fileCoverage and sourceMappingURL\n            this.file.metadata.coverage = object.fileCoverage\n          },\n        },\n      },\n    }\n  }\n}\n\nexport const instrumenter = (context) => {\n  const {\n    rootLocation,\n    inputRelativeLocation,\n    inputSource,\n    inputSourceMap,\n    inputAst,\n    outputSourceMapName,\n    options,\n    getSourceNameForSourceMap,\n    getSourceLocationForSourceMap,\n  } = context\n\n  const remapOptions = options.remap\n    ? {\n        sourceMaps: true,\n        sourceMapTarget: getSourceNameForSourceMap(context),\n        sourceFileName: getSourceLocationForSourceMap(context),\n      }\n    : {\n        sourceMaps: false,\n      }\n\n  const babelOptions = mergeOptions(\n    remapOptions,\n    // we need the syntax option to enable rest spread in case it's used\n    createSyntaxOptions(),\n    {\n      root: rootLocation,\n      filename: inputRelativeLocation,\n      inputSourceMap,\n      babelrc: false, // trust only these options, do not read any babelrc config file\n      ast: true,\n    },\n  )\n  const babelConfig = createConfig(babelOptions)\n  babelConfig.plugins.push(\n    createInstrumentPlugin({ filename: inputRelativeLocation, useInlineSourceMaps: false }),\n  )\n\n  if (inputAst) {\n    const result = transformFromAst(inputAst, inputSource, babelConfig)\n    return {\n      outputSource: result.code,\n      outputSourceMap: result.map,\n      outputAst: result.ast,\n      outputAssets: {\n        [outputSourceMapName]: JSON.stringify(result.map, null, \"  \"),\n        \"coverage.json\": JSON.stringify(result.metadata.coverage, null, \"  \"),\n      },\n    }\n  }\n\n  const { code, ast, map, metadata } = transform(inputSource, babelConfig)\n  return {\n    outputSource: code,\n    outputSourceMap: map,\n    outputAst: ast,\n    outputAssets: {\n      [outputSourceMapName]: JSON.stringify(map, null, \"  \"),\n      \"coverage.json\": JSON.stringify(metadata.coverage, null, \"  \"),\n    },\n  }\n}\n"
  ]
}