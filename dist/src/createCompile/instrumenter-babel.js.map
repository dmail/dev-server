{"version":3,"sources":["../../../src/createCompile/instrumenter-babel.js"],"names":["createInstrumentPlugin","filename","useInlineSourceMaps","types","visitor","Program","enter","path","__dv__","inputSourceMap","opts","file","coverageVariable","exit","object","metadata","coverage","fileCoverage","instrumenter","context","rootLocation","inputRelativeLocation","inputSource","inputAst","outputSourceMapName","options","getSourceNameForSourceMap","getSourceLocationForSourceMap","remapOptions","remap","sourceMaps","sourceMapTarget","sourceFileName","babelOptions","root","babelrc","ast","babelConfig","plugins","push","result","outputSource","code","outputSourceMap","map","outputAst","outputAssets","JSON","stringify"],"mappings":"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","file":"instrumenter-babel.js","sourcesContent":["import { createConfig, createSyntaxOptions, mergeOptions } from \"@dmail/shared-config/dist/babel.js\"\nimport { transform, transformFromAst } from \"babel-core\"\nimport { programVisitor } from \"istanbul-lib-instrument\"\n\n// https://github.com/istanbuljs/babel-plugin-istanbul/blob/321740f7b25d803f881466ea819d870f7ed6a254/src/index.js\n\nconst createInstrumentPlugin = ({ filename, useInlineSourceMaps = false } = {}) => {\n  return ({ types }) => {\n    return {\n      visitor: {\n        Program: {\n          enter(path) {\n            this.__dv__ = null\n\n            let inputSourceMap\n            if (useInlineSourceMaps) {\n              inputSourceMap = this.opts.inputSourceMap || this.file.opts.inputSourceMap\n            } else {\n              inputSourceMap = this.opts.inputSourceMap\n            }\n\n            this.__dv__ = programVisitor(types, filename, {\n              coverageVariable: \"__coverage__\",\n              inputSourceMap,\n            })\n            this.__dv__.enter(path)\n          },\n\n          exit(path) {\n            if (!this.__dv__) {\n              return\n            }\n            const object = this.__dv__.exit(path)\n            // object got two properties: fileCoverage and sourceMappingURL\n            this.file.metadata.coverage = object.fileCoverage\n          },\n        },\n      },\n    }\n  }\n}\n\nexport const instrumenter = (context) => {\n  const {\n    rootLocation,\n    inputRelativeLocation,\n    inputSource,\n    inputSourceMap,\n    inputAst,\n    outputSourceMapName,\n    options,\n    getSourceNameForSourceMap,\n    getSourceLocationForSourceMap,\n  } = context\n\n  const remapOptions = options.remap\n    ? {\n        sourceMaps: true,\n        sourceMapTarget: getSourceNameForSourceMap(context),\n        sourceFileName: getSourceLocationForSourceMap(context),\n      }\n    : {\n        sourceMaps: false,\n      }\n\n  const babelOptions = mergeOptions(\n    remapOptions,\n    // we need the syntax option to enable rest spread in case it's used\n    createSyntaxOptions(),\n    {\n      root: rootLocation,\n      filename: inputRelativeLocation,\n      inputSourceMap,\n      babelrc: false, // trust only these options, do not read any babelrc config file\n      ast: true,\n    },\n  )\n  const babelConfig = createConfig(babelOptions)\n  babelConfig.plugins.push(\n    createInstrumentPlugin({ filename: inputRelativeLocation, useInlineSourceMaps: false }),\n  )\n\n  if (inputAst) {\n    const result = transformFromAst(inputAst, inputSource, babelConfig)\n    return {\n      outputSource: result.code,\n      outputSourceMap: result.map,\n      outputAst: result.ast,\n      outputAssets: {\n        [outputSourceMapName]: JSON.stringify(result.map, null, \"  \"),\n        \"coverage.json\": JSON.stringify(result.metadata.coverage, null, \"  \"),\n      },\n    }\n  }\n\n  const { code, ast, map, metadata } = transform(inputSource, babelConfig)\n  return {\n    outputSource: code,\n    outputSourceMap: map,\n    outputAst: ast,\n    outputAssets: {\n      [outputSourceMapName]: JSON.stringify(map, null, \"  \"),\n      \"coverage.json\": JSON.stringify(metadata.coverage, null, \"  \"),\n    },\n  }\n}\n"]}