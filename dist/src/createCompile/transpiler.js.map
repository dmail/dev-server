{
  "version": 3,
  "sources": [
    "../../../src/createCompile/transpiler.js"
  ],
  "names": [
    "transpiler",
    "context",
    "inputRelativeLocation",
    "inputSource",
    "inputSourceMap",
    "inputAst",
    "options",
    "outputSourceMapName",
    "getSourceNameForSourceMap",
    "getSourceLocationForSourceMap",
    "babelOptions",
    "plugins",
    "platformName",
    "platformVersion",
    "moduleOutput",
    "filename",
    "remap",
    "sourceLocationForSourceMap",
    "sourceNameForSourceMap"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;;;;;AAEO,MAAMA,UAAU,GAAIC,OAAD,IAAa;AACrC,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA,yBAPI;AAQJC,IAAAA;AARI,MASFR,OATJ;AAWA,QAAMS,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAE,sDAAmB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,YAAY,EAAE,MAZY;AAa1BC,MAAAA,eAAe,EAAE,KAbS;AAc1BC,MAAAA,YAAY,EAAE;AAdY,KAAnB,CADU;AAiBnBC,IAAAA,QAAQ,EAAEb,qBAjBS;AAkBnBE,IAAAA;AAlBmB,GAArB;AAqBA,SAAO;AACLC,IAAAA,QADK;AAELF,IAAAA,WAFK;AAGLG,IAAAA,OAAO,EAAEI;AAHJ,KAIDJ,OAAO,CAACU,KAAR,GACA;AACET,IAAAA,mBADF;AAEEU,IAAAA,0BAA0B,EAAER,6BAA6B,CAACR,OAAD,CAF3D;AAGEiB,IAAAA,sBAAsB,EAAEV,yBAAyB,CAACP,OAAD;AAHnD,GADA,GAMA,EAVC,EAAP;AAYD,CA7CM",
  "sourcesContent": [
    "import { getBabelPluginsFor } from \"@dmail/project-structure-compile-babel\"\nimport { transpileWithBabel } from \"./transpileWithBabel.js\"\n\nexport const transpiler = (context) => {\n  const {\n    inputRelativeLocation,\n    inputSource,\n    inputSourceMap,\n    inputAst,\n    options,\n    outputSourceMapName,\n    getSourceNameForSourceMap,\n    getSourceLocationForSourceMap,\n  } = context\n\n  const babelOptions = {\n    plugins: getBabelPluginsFor({\n      // platformName below 'should' be dynamic and read from request user-agent to compile the right output\n      // an other problem is that the compile result will become different depending who is requesting it\n      // so we must have a smart strategy to cache the output\n      // we cannot create a cache entry per user agent, the cache would explode\n      // we could keep a cache per plugin set but the array returned by getBabelPluginsFor\n      // cannot be stringified for now (it's an array of function)\n      // we could also use an other approach 'ala' browser list so that we use browser list to get the list of plugins\n      // and use it to invalidate the cache\n      // it would be the easisest approach\n      // we could maintain 2-3 browserlist to serve depending the user -agent requesting us\n      // we would server one of the 3 build\n      platformName: \"node\",\n      platformVersion: \"5.0\",\n      moduleOutput: \"systemjs\",\n    }),\n    filename: inputRelativeLocation,\n    inputSourceMap,\n  }\n\n  return transpileWithBabel({\n    inputAst,\n    inputSource,\n    options: babelOptions,\n    ...(options.remap\n      ? {\n          outputSourceMapName,\n          sourceLocationForSourceMap: getSourceLocationForSourceMap(context),\n          sourceNameForSourceMap: getSourceNameForSourceMap(context),\n        }\n      : {}),\n  })\n}\n"
  ]
}