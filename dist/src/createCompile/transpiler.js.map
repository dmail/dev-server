{"version":3,"sources":["../../../src/createCompile/transpiler.js"],"names":["transpiler","context","inputRelativeLocation","inputSource","inputSourceMap","inputAst","options","outputSourceMapName","getSourceNameForSourceMap","getSourceLocationForSourceMap","moduleOptions","inputModuleFormat","outputModuleFormat","remapOptions","remap","sourceMaps","sourceMapTarget","sourceFileName","babelOptions","filename","babelrc","ast","babelConfig","code","map","outputSource","outputSourceMap","outputAst","outputAssets","JSON","stringify"],"mappings":";;;;;;;AAAA;;AAMA;;;;AAEO,IAAMA,kCAAa,SAAbA,UAAa,CAACC,OAAD,EAAa;AAAA,MAEnCC,qBAFmC,GAUjCD,OAViC,CAEnCC,qBAFmC;AAAA,MAGnCC,WAHmC,GAUjCF,OAViC,CAGnCE,WAHmC;AAAA,MAInCC,cAJmC,GAUjCH,OAViC,CAInCG,cAJmC;AAAA,MAKnCC,QALmC,GAUjCJ,OAViC,CAKnCI,QALmC;AAAA,MAMnCC,OANmC,GAUjCL,OAViC,CAMnCK,OANmC;AAAA,MAOnCC,mBAPmC,GAUjCN,OAViC,CAOnCM,mBAPmC;AAAA,MAQnCC,yBARmC,GAUjCP,OAViC,CAQnCO,yBARmC;AAAA,MASnCC,6BATmC,GAUjCR,OAViC,CASnCQ,6BATmC;;AAYrC;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,gCAAoB;AACxCC,uBAAmB,IADqB;AAExCC,wBAAoB;AAFoB,GAApB,CAAtB;;AAKA,MAAMC,eAAeP,QAAQQ,KAAR,GACjB;AACEC,gBAAY,IADd;AAEEC,qBAAiBR,0BAA0BP,OAA1B,CAFnB;AAGEgB,oBAAgBR,8BAA8BR,OAA9B;AAHlB,GADiB,GAMjB;AACEc,gBAAY;AADd,GANJ;;AAUA,MAAMG,eAAe,yBAAaR,aAAb,EAA4B,iCAA5B,EAAmDG,YAAnD,EAAiE;AACpFM,cAAUjB,qBAD0E;AAEpFE,kCAFoF;AAGpFgB,aAAS,KAH2E,EAGpE;AAChBC,SAAK;AAJ+E,GAAjE,CAArB;AAMA,MAAMC,cAAc,yBAAaJ,YAAb,CAApB;;AAEA,MAAIb,QAAJ,EAAc;AAAA,4BACe,iCAAiBA,QAAjB,EAA2BF,WAA3B,EAAwCmB,WAAxC,CADf;AAAA,QACJC,KADI,qBACJA,IADI;AAAA,QACEF,IADF,qBACEA,GADF;AAAA,QACOG,IADP,qBACOA,GADP;;AAEZ,WAAO;AACLC,oBAAcF,KADT;AAELG,uBAAiBF,IAFZ;AAGLG,iBAAWN,IAHN;AAILO,wCACGrB,mBADH,EACyBsB,KAAKC,SAAL,CAAeN,IAAf,EAAoB,IAApB,EAA0B,IAA1B,CADzB;AAJK,KAAP;AAQD;;AAlDoC,mBAoDV,0BAAUrB,WAAV,EAAuBmB,WAAvB,CApDU;AAAA,MAoD7BC,IApD6B,cAoD7BA,IApD6B;AAAA,MAoDvBF,GApDuB,cAoDvBA,GApDuB;AAAA,MAoDlBG,GApDkB,cAoDlBA,GApDkB;;AAqDrC,SAAO;AACLC,kBAAcF,IADT;AAELG,qBAAiBF,GAFZ;AAGLG,eAAWN,GAHN;AAILO,sCACGrB,mBADH,EACyBsB,KAAKC,SAAL,CAAeN,GAAf,EAAoB,IAApB,EAA0B,IAA1B,CADzB;AAJK,GAAP;AAQD,CA7DM","file":"transpiler.js","sourcesContent":["import {\n  createConfig,\n  createModuleOptions,\n  createSyntaxOptions,\n  mergeOptions,\n} from \"@dmail/shared-config/dist/babel\"\nimport { transform, transformFromAst } from \"babel-core\"\n\nexport const transpiler = (context) => {\n  const {\n    inputRelativeLocation,\n    inputSource,\n    inputSourceMap,\n    inputAst,\n    options,\n    outputSourceMapName,\n    getSourceNameForSourceMap,\n    getSourceLocationForSourceMap,\n  } = context\n\n  // the truth is that we don't support global, nor amd\n  // I have to check if we could support cjs but maybe we don't even support this\n  // at least we support the most important: inputFormat: \"es\" with outputFormat: \"systemjs\"\n  // https://github.com/systemjs/systemjs/blob/master/src/format-helpers.js#L5\n  // https://github.com/systemjs/babel-plugin-transform-global-system-wrapper/issues/1\n  const moduleOptions = createModuleOptions({\n    inputModuleFormat: \"es\",\n    outputModuleFormat: \"systemjs\",\n  })\n\n  const remapOptions = options.remap\n    ? {\n        sourceMaps: true,\n        sourceMapTarget: getSourceNameForSourceMap(context),\n        sourceFileName: getSourceLocationForSourceMap(context),\n      }\n    : {\n        sourceMaps: false,\n      }\n\n  const babelOptions = mergeOptions(moduleOptions, createSyntaxOptions(), remapOptions, {\n    filename: inputRelativeLocation,\n    inputSourceMap,\n    babelrc: false, // trust only these options, do not read any babelrc config file\n    ast: true,\n  })\n  const babelConfig = createConfig(babelOptions)\n\n  if (inputAst) {\n    const { code, ast, map } = transformFromAst(inputAst, inputSource, babelConfig)\n    return {\n      outputSource: code,\n      outputSourceMap: map,\n      outputAst: ast,\n      outputAssets: {\n        [outputSourceMapName]: JSON.stringify(map, null, \"  \"),\n      },\n    }\n  }\n\n  const { code, ast, map } = transform(inputSource, babelConfig)\n  return {\n    outputSource: code,\n    outputSourceMap: map,\n    outputAst: ast,\n    outputAssets: {\n      [outputSourceMapName]: JSON.stringify(map, null, \"  \"),\n    },\n  }\n}\n"]}