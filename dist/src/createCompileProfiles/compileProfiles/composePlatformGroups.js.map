{
  "version": 3,
  "sources": [
    "../../../../src/createCompileProfiles/compileProfiles/composePlatformGroups.js"
  ],
  "names": [
    "platformGroupReducer",
    "previous",
    "platformGroup",
    "groups",
    "forEach",
    "firstPlatformGroup",
    "push",
    "pluginNames",
    "slice",
    "compatMap",
    "secondPlatformGroup",
    "existingGroup",
    "find",
    "join",
    "composePlatformGroups",
    "platformGroups",
    "reduce"
  ],
  "mappings": ";;;;;;;;;;;AAAA,MAAMA,oBAAoB,GAAG,CAACC,QAAD,EAAWC,aAAX,KAA6B;AACxD,QAAMC,MAAM,GAAG,EAAf;AAEAF,EAAAA,QAAQ,CAACG,OAAT,CAAkBC,kBAAD,IAAwB;AACvCF,IAAAA,MAAM,CAACG,IAAP,CAAY;AACVC,MAAAA,WAAW,EAAEF,kBAAkB,CAACE,WAAnB,CAA+BC,KAA/B,EADH;AAEVC,MAAAA,SAAS,oBAAOJ,kBAAkB,CAACI,SAA1B;AAFC,KAAZ;AAID,GALD;AAOAP,EAAAA,aAAa,CAACE,OAAd,CAAuBM,mBAAD,IAAyB;AAC7C,UAAMH,WAAW,GAAGG,mBAAmB,CAACH,WAAxC;AACA,UAAMI,aAAa,GAAGR,MAAM,CAACS,IAAP,CAAaV,aAAD,IAAmB;AACnD,aAAOK,WAAW,CAACM,IAAZ,CAAiB,EAAjB,MAAyBX,aAAa,CAACK,WAAd,CAA0BM,IAA1B,CAA+B,EAA/B,CAAhC;AACD,KAFqB,CAAtB;;AAGA,QAAIF,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACF,SAAd,qBACKE,aAAa,CAACF,SADnB,EAEKC,mBAAmB,CAACD,SAFzB;AAID,KALD,MAKO;AACLN,MAAAA,MAAM,CAACG,IAAP,CAAY;AACVC,QAAAA,WAAW,EAAEG,mBAAmB,CAACH,WAApB,CAAgCC,KAAhC,EADH;AAEVC,QAAAA,SAAS,oBAAOC,mBAAmB,CAACD,SAA3B;AAFC,OAAZ;AAID;AACF,GAhBD;AAkBA,SAAON,MAAP;AACD,CA7BD;;AA+BO,MAAMW,qBAAqB,GAAG,CAAC,GAAGC,cAAJ,KAAuB;AAC1D,SAAOA,cAAc,CAACC,MAAf,CAAsBhB,oBAAtB,EAA4C,EAA5C,CAAP;AACD,CAFM",
  "sourcesContent": [
    "const platformGroupReducer = (previous, platformGroup) => {\n  const groups = []\n\n  previous.forEach((firstPlatformGroup) => {\n    groups.push({\n      pluginNames: firstPlatformGroup.pluginNames.slice(),\n      compatMap: { ...firstPlatformGroup.compatMap },\n    })\n  })\n\n  platformGroup.forEach((secondPlatformGroup) => {\n    const pluginNames = secondPlatformGroup.pluginNames\n    const existingGroup = groups.find((platformGroup) => {\n      return pluginNames.join(\"\") === platformGroup.pluginNames.join(\"\")\n    })\n    if (existingGroup) {\n      existingGroup.compatMap = {\n        ...existingGroup.compatMap,\n        ...secondPlatformGroup.compatMap,\n      }\n    } else {\n      groups.push({\n        pluginNames: secondPlatformGroup.pluginNames.slice(),\n        compatMap: { ...secondPlatformGroup.compatMap },\n      })\n    }\n  })\n\n  return groups\n}\n\nexport const composePlatformGroups = (...platformGroups) => {\n  return platformGroups.reduce(platformGroupReducer, [])\n}\n"
  ]
}