{
  "version": 3,
  "sources": [
    "../../../../src/createCompileProfiles/compileProfiles/createGetScoreForGroupCompatMap.test.js"
  ],
  "names": [
    "createGetScoreForGroupCompatMap",
    "require",
    "assert",
    "chrome50Score",
    "chrome49Score",
    "chromeBelow49Score",
    "otherScore",
    "getScore",
    "chrome",
    "other",
    "actual",
    "expected",
    "equal",
    "foo",
    "console",
    "log"
  ],
  "mappings": ";;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAsCC,OAAO,CAAC,sCAAD,CAAnD;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA;AACE,QAAME,aAAa,GAAG,CAAtB;AACA,QAAMC,aAAa,GAAG,CAAtB;AACA,QAAMC,kBAAkB,GAAG,CAA3B;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,QAAQ,GAAGP,+BAA+B,CAAC;AAC/CQ,IAAAA,MAAM,EAAE;AACN,YAAML,aADA;AAEN,YAAMC,aAFA;AAGN,WAAKC;AAHC,KADuC;AAM/CI,IAAAA,KAAK,EAAEH;AANwC,GAAD,CAAhD;AASA;AACE,UAAMI,MAAM,GAAGH,QAAQ,CAAC;AACtBC,MAAAA,MAAM,EAAE;AADc,KAAD,CAAvB;AAGA,UAAMG,QAAQ,GAAGN,kBAAjB;AACAH,IAAAA,MAAM,CAACU,KAAP,CAAaF,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGH,QAAQ,CAAC;AACtBC,MAAAA,MAAM,EAAE;AADc,KAAD,CAAvB;AAGA,UAAMG,QAAQ,GAAGP,aAAjB;AACAF,IAAAA,MAAM,CAACU,KAAP,CAAaF,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGH,QAAQ,CAAC;AACtBC,MAAAA,MAAM,EAAE;AADc,KAAD,CAAvB;AAGA,UAAMG,QAAQ,GAAGR,aAAjB;AACAD,IAAAA,MAAM,CAACU,KAAP,CAAaF,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGH,QAAQ,CAAC;AACtBC,MAAAA,MAAM,EAAE;AADc,KAAD,CAAvB;AAGA,UAAMG,QAAQ,GAAGR,aAAjB;AACAD,IAAAA,MAAM,CAACU,KAAP,CAAaF,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGH,QAAQ,CAAC;AACtBC,MAAAA,MAAM,EAAE,IADc;AAEtBK,MAAAA,GAAG,EAAE,CAAC,GAAD;AAFiB,KAAD,CAAvB;AAIA,UAAMF,QAAQ,GAAGR,aAAa,GAAGG,UAAjC;AACAJ,IAAAA,MAAM,CAACU,KAAP,CAAaF,MAAb,EAAqBC,QAArB;AACD;AACF;AAEDG,OAAO,CAACC,GAAR,CAAY,QAAZ",
  "sourcesContent": [
    "const { createGetScoreForGroupCompatMap } = require(\"./createGetScoreForGroupCompatMap.js\")\nconst assert = require(\"assert\")\n\n{\n  const chrome50Score = 1\n  const chrome49Score = 2\n  const chromeBelow49Score = 4\n  const otherScore = 8\n  const getScore = createGetScoreForGroupCompatMap({\n    chrome: {\n      \"50\": chrome50Score,\n      \"49\": chrome49Score,\n      \"0\": chromeBelow49Score,\n    },\n    other: otherScore,\n  })\n\n  {\n    const actual = getScore({\n      chrome: \"48\",\n    })\n    const expected = chromeBelow49Score\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getScore({\n      chrome: \"49\",\n    })\n    const expected = chrome49Score\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getScore({\n      chrome: \"50\",\n    })\n    const expected = chrome50Score\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getScore({\n      chrome: \"51\",\n    })\n    const expected = chrome50Score\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getScore({\n      chrome: \"51\",\n      foo: [\"0\"],\n    })\n    const expected = chrome50Score + otherScore\n    assert.equal(actual, expected)\n  }\n}\n\nconsole.log(\"passed\")\n"
  ]
}