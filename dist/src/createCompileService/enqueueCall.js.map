{"version":3,"sources":["../../../src/createCompileService/enqueueCall.js"],"names":["createExecutionQueue","pendings","running","enqueue","fn","args","action","push","onPassedOrFailed","length","shift","pass","then","enqueueCall","enqueueCallByArgs","transform"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,uBAAuB,SAAvBA,oBAAuB,GAAM;AACjC,MAAMC,WAAW,EAAjB;AACA,MAAIC,UAAU,KAAd;;AAEA,MAAMC,UAAU,SAAVA,OAAU,CAACC,EAAD,EAAiB;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AAC/B,QAAIH,OAAJ,EAAa;AACX,UAAMI,UAAS,4BAAf;AACAL,eAASM,IAAT,CAAc,EAAED,eAAF,EAAUF,MAAV,EAAcC,UAAd,EAAd;AACA,aAAOC,OAAP;AACD;AACDJ,cAAU,IAAV;AACA,QAAMI,SAAS,qBAAOF,oBAAMC,IAAN,CAAP,CAAf;AACA,QAAMG,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7BN,gBAAU,KAAV;AACA,UAAID,SAASQ,MAAT,GAAkB,CAAtB,EAAyB;AAAA,8BACMR,SAASS,KAAT,EADN;AAAA,YACfJ,QADe,mBACfA,MADe;AAAA,YACPF,GADO,mBACPA,EADO;AAAA,YACHC,KADG,mBACHA,IADG;;AAEvBC,iBAAOK,IAAP,CAAYR,0BAAQC,GAAR,4BAAeC,KAAf,GAAZ;AACD;AACF,KAND;AAOAC,WAAOM,IAAP,CAAYJ,gBAAZ,EAA8BA,gBAA9B;AACA,WAAOF,MAAP;AACD,GAjBD;;AAmBA,SAAOH,OAAP;AACD,CAxBD;;AA0BO,IAAMU,oCAAc,SAAdA,WAAc,CAACT,EAAD,EAAQ;AACjC,MAAMD,UAAUH,sBAAhB;AACA,SAAO;AAAA,uCAAIK,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaF,0BAAQC,EAAR,SAAeC,IAAf,EAAb;AAAA,GAAP;AACD,CAHM;;AAKA,IAAMS,gDAAoB,SAApBA,iBAAoB,CAACV,EAAD,EAAQ;AACvC,SAAO,0BACLJ,oBADK,EAEL,0BAAY;AACVe,eAAW,mBAACZ,OAAD;AAAA,yCAAaE,IAAb;AAAaA,YAAb;AAAA;;AAAA,aAAsBF,0BAAQC,EAAR,SAAeC,IAAf,EAAtB;AAAA;AADD,GAAZ,CAFK,CAAP;AAMD,CAPM","file":"enqueueCall.js","sourcesContent":["import { createAction, passed } from \"@dmail/action\"\nimport { createStore, memoizeSync } from \"../memoize.js\"\n\nconst createExecutionQueue = () => {\n  const pendings = []\n  let running = false\n\n  const enqueue = (fn, ...args) => {\n    if (running) {\n      const action = createAction()\n      pendings.push({ action, fn, args })\n      return action\n    }\n    running = true\n    const action = passed(fn(...args))\n    const onPassedOrFailed = () => {\n      running = false\n      if (pendings.length > 0) {\n        const { action, fn, args } = pendings.shift()\n        action.pass(enqueue(fn, ...args))\n      }\n    }\n    action.then(onPassedOrFailed, onPassedOrFailed)\n    return action\n  }\n\n  return enqueue\n}\n\nexport const enqueueCall = (fn) => {\n  const enqueue = createExecutionQueue()\n  return (...args) => enqueue(fn, ...args)\n}\n\nexport const enqueueCallByArgs = (fn) => {\n  return memoizeSync(\n    createExecutionQueue,\n    createStore({\n      transform: (enqueue, ...args) => enqueue(fn, ...args),\n    }),\n  )\n}\n"]}