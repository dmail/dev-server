{"version":3,"sources":["../../../src/createCompileService/enqueueCall.test.js"],"names":["isPassed","action","getState","isFailed","fn","value","returnedAction","equal","pass","getResult","fail","debounced","then","firstAction","firstCallAction","secondAction","secondCallAction","map","Map","restoreByArgs","get","memoizeArgs","set","thirdCallAction"],"mappings":"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","file":"enqueueCall.test.js","sourcesContent":["import { createAction } from \"@dmail/action\"\nimport { test } from \"@dmail/test\"\nimport assert from \"assert\"\nimport { enqueueCall, enqueueCallByArgs } from \"./enqueueCall.js\"\n\nconst isPassed = (action) => action.getState() === \"passed\"\n\nconst isFailed = (action) => action.getState() === \"failed\"\n\ntest(() => {\n  const fn = (value) => value\n  const action = createAction()\n  const returnedAction = enqueueCall(fn)(action)\n\n  assert.equal(isPassed(returnedAction), false)\n  action.pass(1)\n  assert.equal(isPassed(returnedAction), true)\n  assert.equal(returnedAction.getResult(), 1)\n})\n\ntest(() => {\n  const fn = (value) => value\n  const action = createAction()\n  const returnedAction = enqueueCall(fn)(action)\n\n  assert.equal(isFailed(returnedAction), false)\n  action.fail(1)\n  assert.equal(isFailed(returnedAction), true)\n  assert.equal(returnedAction.getResult(), 1)\n})\n\n// un appel attends la résolution de tout autre appel en cours\ntest(() => {\n  const debounced = enqueueCall((action, value) => action.then(() => value))\n  const firstAction = createAction()\n  const firstCallAction = debounced(firstAction, 1)\n  const secondAction = createAction()\n  const secondCallAction = debounced(secondAction, 2)\n\n  assert.equal(isPassed(firstCallAction), false)\n  assert.equal(isPassed(secondCallAction), false)\n  firstAction.pass()\n  assert.equal(isPassed(firstCallAction), true)\n  assert.equal(firstCallAction.getResult(), 1)\n  assert.equal(isPassed(secondCallAction), false)\n  secondAction.pass()\n  assert.equal(isPassed(secondCallAction), true)\n  assert.equal(secondCallAction.getResult(), 2)\n})\n\n// un appel atttends la fin de la résolution de tout autre appel ayant les \"même\" arguments\ntest(() => {\n  const map = new Map()\n  const restoreByArgs = (value) => map.get(value)\n  const memoizeArgs = (fn, value) => map.set(value, fn)\n  const fn = (action, value) => action.then(() => value)\n  const debounced = enqueueCallByArgs({ fn, restoreByArgs, memoizeArgs })\n\n  const firstAction = createAction()\n  const secondAction = createAction()\n\n  const firstCallAction = debounced(firstAction, 1)\n  const secondCallAction = debounced(secondAction, 2)\n  const thirdCallAction = debounced(firstAction, 3)\n\n  assert.equal(isPassed(firstCallAction), false)\n  assert.equal(isPassed(secondCallAction), false)\n  assert.equal(isPassed(thirdCallAction), false)\n  firstAction.pass()\n  assert.equal(isPassed(firstCallAction), true)\n  assert.equal(firstCallAction.getResult(), 1)\n  assert.equal(isPassed(secondCallAction), false)\n  assert.equal(isPassed(thirdCallAction), true)\n  assert.equal(thirdCallAction.getResult(), 3)\n  secondAction.pass()\n  assert.equal(isPassed(secondCallAction), true)\n  assert.equal(secondCallAction.getResult(), 2)\n})\n"]}