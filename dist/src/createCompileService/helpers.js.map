{
  "version": 3,
  "sources": [
    "../../../src/createCompileService/helpers.js"
  ],
  "names": [
    "createETag",
    "string",
    "length",
    "hash",
    "crypto",
    "createHash",
    "update",
    "result",
    "digest",
    "replace",
    "toString",
    "isFileNotFoundError",
    "error",
    "code",
    "normalizeSeparation",
    "filename",
    "resolvePath",
    "from",
    "paths",
    "path",
    "join",
    "isFolder",
    "Promise",
    "resolve",
    "reject",
    "fs",
    "lstat",
    "stat",
    "isDirectory",
    "readFolder",
    "location",
    "readdir",
    "filenames",
    "removeFile",
    "unlink",
    "removeFolderDeep"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,MAAMA,UAAU,GAAIC,MAAD,IAAY;AACpC,MAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB;AACvB;AACA,WAAO,iCAAP;AACD;;AAED,QAAMC,IAAI,GAAGC,gBAAOC,UAAP,CAAkB,MAAlB,CAAb;;AACAF,EAAAA,IAAI,CAACG,MAAL,CAAYL,MAAZ,EAAoB,MAApB;AACA,MAAIM,MAAM,GAAGJ,IAAI,CAACK,MAAL,CAAY,QAAZ,CAAb;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAT;AAEA,SAAQ,IAAGR,MAAM,CAACC,MAAP,CAAcQ,QAAd,CAAuB,EAAvB,CAA2B,IAAGH,MAAO,GAAhD;AACD,CAZM;;;;AAcA,MAAMI,mBAAmB,GAAIC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,QAA/D;;;;AAEA,MAAMC,mBAAmB,GAAIC,QAAD,IAAcA,QAAQ,CAACN,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAA1C;;;;AAEA,MAAMO,WAAW,GAAG,CAACC,IAAD,EAAO,GAAGC,KAAV,KAAoB;AAC7C,SAAOJ,mBAAmB,CAACK,cAAKC,IAAL,CAAUH,IAAV,EAAgB,GAAGC,KAAnB,CAAD,CAA1B;AACD,CAFM;;;;AAIA,MAAMG,QAAQ,GAAIN,QAAD,IAAc;AACpC,SAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,gBAAGC,KAAH,CAASX,QAAT,EAAmB,CAACH,KAAD,EAAQe,IAAR,KAAiB;AAClC,UAAIf,KAAJ,EAAW;AACTY,QAAAA,MAAM,CAACZ,KAAD,CAAN;AACD,OAFD,MAEO;AACLW,QAAAA,OAAO,CAACI,IAAI,CAACC,WAAL,EAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVM;;;;AAYA,MAAMC,UAAU,GAAIC,QAAD,IAAc;AACtC,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,gBAAGM,OAAH,CAAWD,QAAX,EAAqB,CAAClB,KAAD,EAAQoB,SAAR,KAAsB;AACzC,UAAIpB,KAAJ,EAAW;AACTY,QAAAA,MAAM,CAACZ,KAAD,CAAN;AACD,OAFD,MAEO;AACLW,QAAAA,OAAO,CAACS,SAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVM;;;;AAYA,MAAMC,UAAU,GAAIH,QAAD,IAAc;AACtC,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,gBAAGS,MAAH,CAAUJ,QAAV,EAAqBlB,KAAD,IAAW;AAC7B,UAAIA,KAAJ,EAAW;AACTY,QAAAA,MAAM,CAACZ,KAAD,CAAN;AACD,OAFD,MAEO;AACLW,QAAAA,OAAO;AACR;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVM;;;;AAYA,MAAMY,gBAAgB,GAAIL,QAAD,IAAc;AAC5C,SAAO,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,yBAAOM,QAAP,EAAkBlB,KAAD,IAAW;AAC1B,UAAIA,KAAJ,EAAW;AACTY,QAAAA,MAAM,CAACZ,KAAD,CAAN;AACD,OAFD,MAEO;AACLW,QAAAA,OAAO;AACR;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVM",
  "sourcesContent": [
    "import crypto from \"crypto\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport rimraf from \"rimraf\"\n\nexport const createETag = (string) => {\n  if (string.length === 0) {\n    // fast-path empty\n    return '\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\"'\n  }\n\n  const hash = crypto.createHash(\"sha1\")\n  hash.update(string, \"utf8\")\n  let result = hash.digest(\"base64\")\n  result = result.replace(/\\=+$/, \"\")\n\n  return `\"${string.length.toString(16)}-${result}\"`\n}\n\nexport const isFileNotFoundError = (error) => error && error.code === \"ENOENT\"\n\nexport const normalizeSeparation = (filename) => filename.replace(/\\\\/g, \"/\")\n\nexport const resolvePath = (from, ...paths) => {\n  return normalizeSeparation(path.join(from, ...paths))\n}\n\nexport const isFolder = (filename) => {\n  return new Promise((resolve, reject) => {\n    fs.lstat(filename, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat.isDirectory())\n      }\n    })\n  })\n}\n\nexport const readFolder = (location) => {\n  return new Promise((resolve, reject) => {\n    fs.readdir(location, (error, filenames) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(filenames)\n      }\n    })\n  })\n}\n\nexport const removeFile = (location) => {\n  return new Promise((resolve, reject) => {\n    fs.unlink(location, (error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\nexport const removeFolderDeep = (location) => {\n  return new Promise((resolve, reject) => {\n    rimraf(location, (error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n"
  ]
}