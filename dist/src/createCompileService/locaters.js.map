{
  "version": 3,
  "sources": [
    "../../../src/createCompileService/locaters.js"
  ],
  "names": [
    "getInputRelativeLocation",
    "abstractFolderRelativeLocation",
    "filename",
    "slice",
    "length",
    "getCacheFolderLocation",
    "rootLocation",
    "cacheFolderRelativeLocation",
    "rest",
    "getCacheDataLocation",
    "param",
    "JSON_FILE",
    "getBranchRelativeLocation",
    "branch",
    "name",
    "getOutputRelativeLocation",
    "path",
    "basename",
    "getBranchLocation",
    "getOutputLocation",
    "getOutputAssetLocation",
    "asset",
    "getSourceAbstractLocation",
    "inputRelativeLocation",
    "getSourceMapLocation",
    "outputRelativeLocation",
    "outputSourceMapName",
    "dirname",
    "getSourceMapAbstractLocation",
    "sourceMapKnowsExactLocation",
    "sourceMapUseAbsoluteLocation",
    "getSourceLocationForSourceMap",
    "context",
    "sourceLocation",
    "sourceMapLocation",
    "relative"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { JSON_FILE } from \"./cache.js\"\nimport { resolvePath, normalizeSeparation } from \"./helpers.js\"\nimport path from \"path\"\n\nexport const getInputRelativeLocation = ({ abstractFolderRelativeLocation, filename }) => {\n  // 'compiled/folder/file.js' -> 'folder/file.js'\n  return filename.slice(abstractFolderRelativeLocation.length + 1)\n}\n\nexport const getCacheFolderLocation = ({ rootLocation, cacheFolderRelativeLocation, ...rest }) => {\n  return resolvePath(rootLocation, cacheFolderRelativeLocation, getInputRelativeLocation(rest))\n}\n\nexport const getCacheDataLocation = (param) => {\n  return resolvePath(getCacheFolderLocation(param), JSON_FILE)\n}\n\nexport const getBranchRelativeLocation = ({ cacheFolderRelativeLocation, branch, ...rest }) => {\n  return resolvePath(cacheFolderRelativeLocation, getInputRelativeLocation(rest), branch.name)\n}\n\nexport const getOutputRelativeLocation = ({ filename, ...rest }) => {\n  return resolvePath(getBranchRelativeLocation({ filename, ...rest }), path.basename(filename))\n}\n\nexport const getBranchLocation = ({ rootLocation, ...rest }) => {\n  return resolvePath(rootLocation, getBranchRelativeLocation(rest))\n}\n\nexport const getOutputLocation = ({ rootLocation, ...rest }) => {\n  return resolvePath(rootLocation, getOutputRelativeLocation(rest))\n}\n\nexport const getOutputAssetLocation = ({ asset, ...rest }) => {\n  return resolvePath(getBranchLocation(rest), asset.name)\n}\n\nexport const getSourceAbstractLocation = ({ rootLocation, inputRelativeLocation }) =>\n  resolvePath(rootLocation, inputRelativeLocation)\n\nexport const getSourceMapLocation = ({\n  rootLocation,\n  outputRelativeLocation,\n  outputSourceMapName,\n}) => resolvePath(rootLocation, path.dirname(outputRelativeLocation), outputSourceMapName)\n\nexport const getSourceMapAbstractLocation = ({\n  rootLocation,\n  abstractFolderRelativeLocation,\n  inputRelativeLocation,\n  outputSourceMapName,\n}) =>\n  resolvePath(\n    rootLocation,\n    abstractFolderRelativeLocation,\n    path.dirname(inputRelativeLocation),\n    outputSourceMapName,\n  )\n\nconst sourceMapKnowsExactLocation = false\nconst sourceMapUseAbsoluteLocation = true\n\nexport const getSourceLocationForSourceMap = (context) => {\n  if (sourceMapUseAbsoluteLocation) {\n    return `/${context.inputRelativeLocation}`\n  }\n\n  const sourceLocation = getSourceAbstractLocation(context)\n  const sourceMapLocation = sourceMapKnowsExactLocation\n    ? getSourceMapLocation(context)\n    : getSourceMapAbstractLocation(context)\n\n  return normalizeSeparation(path.relative(path.dirname(sourceMapLocation), sourceLocation))\n}\n"
  ]
}