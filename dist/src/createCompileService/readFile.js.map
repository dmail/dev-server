{"version":3,"sources":["../../../src/createCompileService/readFile.js"],"names":["readFile","location","errorHandler","Promise","resolve","reject","error","buffer","content","String"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,IAAMA,8BAAW,SAAXA,QAAW,OAAgC;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oBAAGL,QAAH,CAAYC,QAAZ,EAAsB,UAACK,KAAD,EAAQC,MAAR,EAAmB;AACvC,UAAID,KAAJ,EAAW;AACT,YAAIJ,gBAAgBA,aAAaI,KAAb,CAApB,EAAyC;AACvCF,kBAAQ,EAAEE,YAAF,EAAR;AACD,SAFD,MAEO;AACLD,iBAAO,uDAA2CC,KAA3C,CAAP;AACD;AACF,OAND,MAMO;AACLF,gBAAQ,EAAEI,SAASC,OAAOF,MAAP,CAAX,EAAR;AACD;AACF,KAVD;AAWD,GAZM,CAAP;AAaD,CAdM","file":"readFile.js","sourcesContent":["import fs from \"fs\"\nimport { convertFileSystemErrorToResponseProperties } from \"../createFileService/index.js\"\n\nexport const readFile = ({ location, errorHandler }) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(location, (error, buffer) => {\n      if (error) {\n        if (errorHandler && errorHandler(error)) {\n          resolve({ error })\n        } else {\n          reject(convertFileSystemErrorToResponseProperties(error))\n        }\n      } else {\n        resolve({ content: String(buffer) })\n      }\n    })\n  })\n}\n"]}