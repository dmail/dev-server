{
  "version": 3,
  "sources": [
    "../../../src/createCompileService/sync.js"
  ],
  "names": [
    "sync",
    "rootLocation",
    "cacheFolderRelativeLocation",
    "cacheFolderLocation",
    "then",
    "report",
    "foldersInvalid",
    "filter",
    "status",
    "Promise",
    "all",
    "map",
    "folder"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AAEO,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAmD;AACrE,QAAMC,mBAAmB,GAAG,0BAAYF,YAAZ,EAA0BC,2BAA1B,CAA5B;AAEA,SAAO,sBAAQ;AAAED,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAR,EAAuDE,IAAvD,CAA6DC,MAAD,IAAY;AAC7E,UAAMC,cAAc,GAAGD,MAAM,CAACE,MAAP,CAAc,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgBA,MAAM,KAAK,OAAzC,CAAvB;AAEA,WAAOC,OAAO,CAACC,GAAR,CACLJ,cAAc,CAACK,GAAf,CAAmB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KACjB,+BAAiB,0BAAYT,mBAAZ,EAAiCS,MAAjC,CAAjB,CADF,CADK,CAAP;AAKD,GARM,CAAP;AASD,CAZM",
  "sourcesContent": [
    "import { removeFolderDeep, resolvePath } from \"./helpers.js\"\nimport { inspect } from \"./inspect.js\"\n\nexport const sync = ({ rootLocation, cacheFolderRelativeLocation }) => {\n  const cacheFolderLocation = resolvePath(rootLocation, cacheFolderRelativeLocation)\n\n  return inspect({ rootLocation, cacheFolderRelativeLocation }).then((report) => {\n    const foldersInvalid = report.filter(({ status }) => status !== \"valid\")\n\n    return Promise.all(\n      foldersInvalid.map(({ folder }) =>\n        removeFolderDeep(resolvePath(cacheFolderLocation, folder)),\n      ),\n    )\n  })\n}\n"
  ]
}