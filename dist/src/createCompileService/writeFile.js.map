{"version":3,"sources":["../../../src/createCompileService/writeFile.js"],"names":["getFileLStat","path","Promise","resolve","reject","lstat","error","status","reason","code","createFolder","location","mkdir","then","stat","isDirectory","createFolderUntil","pathStartsWithSlash","slice","folders","split","pop","map","_","index","folderLocation","join","writeFile","string"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oBAAGC,KAAH,CAASJ,IAAT,EAAe,UAACK,KAAD,EAAQD,KAAR,EAAkB;AAC/B,UAAIC,KAAJ,EAAW;AACTF,eAAO,EAAEG,QAAQ,GAAV,EAAeC,QAAQF,MAAMG,IAA7B,EAAP;AACD,OAFD,MAEO;AACLN,gBAAQE,KAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,IAAMK,eAAe,SAAfA,YAAe,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACrC,SAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oBAAGQ,KAAH,CAASD,QAAT,EAAmB,UAACL,KAAD,EAAW;AAC5B,UAAIA,KAAJ,EAAW;AACT;AACA,YAAIA,MAAMG,IAAN,KAAe,QAAnB,EAA6B;AAC3B,iBAAOT,aAAaW,QAAb,EAAuBE,IAAvB,CAA4B,UAACC,IAAD,EAAU;AAC3C,gBAAIA,KAAKC,WAAL,EAAJ,EAAwB;AACtBZ;AACD,aAFD,MAEO;AACLC,qBAAO,EAAEG,QAAQ,GAAV,EAAeC,QAAQ,oBAAvB,EAAP;AACD;AACF,WANM,CAAP;AAOD;AACDJ,eAAO,EAAEG,QAAQ,GAAV,EAAeC,QAAQF,MAAMG,IAA7B,EAAP;AACD,OAZD,MAYO;AACLN;AACD;AACF,KAhBD;AAiBD,GAlBM,CAAP;AAmBD,CApBD;;AAsBA,IAAMa,oBAAoB,SAApBA,iBAAoB,QAAkB;AAAA,MAAfL,QAAe,SAAfA,QAAe;;AAC1C,MAAIV,OAAO,kCAAoBU,QAApB,CAAX;AACA;AACA;AACA;AACA,MAAMM,sBAAsBhB,KAAK,CAAL,MAAY,GAAxC;AACA,MAAIgB,mBAAJ,EAAyB;AACvBhB,WAAOA,KAAKiB,KAAL,CAAW,CAAX,CAAP;AACD;AACD,MAAMC,UAAUlB,KAAKmB,KAAL,CAAW,GAAX,CAAhB;;AAEAD,UAAQE,GAAR;;AAEA,SAAO,oCACLF,QAAQG,GAAR,CAAY,UAACC,CAAD,EAAIC,KAAJ,EAAc;AACxB,WAAO,YAAM;AACX,UAAMC,iBAAiBN,QAAQD,KAAR,CAAc,CAAd,EAAiBM,QAAQ,CAAzB,EAA4BE,IAA5B,CAAiC,GAAjC,CAAvB;AACA,aAAOhB,aAAa;AAClBC,wBAAaM,sBAAsB,GAAtB,GAA4B,EAAzC,IAA8CQ;AAD5B,OAAb,CAAP;AAGD,KALD;AAMD,GAPD,CADK,CAAP;AAUD,CAvBD;;AAyBO,IAAME,gCAAY,SAAZA,SAAY,QAA0B;AAAA,MAAvBhB,QAAuB,SAAvBA,QAAuB;AAAA,MAAbiB,MAAa,SAAbA,MAAa;;AACjD,SAAOZ,kBAAkB,EAAEL,kBAAF,EAAlB,EAAgCE,IAAhC,CAAqC,YAAM;AAChD,WAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAGuB,SAAH,CAAahB,QAAb,EAAuBiB,MAAvB,EAA+B,UAACtB,KAAD,EAAW;AACxC,YAAIA,KAAJ,EAAW;AACTF,iBAAO,EAAEG,QAAQ,GAAV,EAAeC,QAAQF,MAAMG,IAA7B,EAAP;AACD,SAFD,MAEO;AACLN;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD,GAVM,CAAP;AAWD,CAZM","file":"writeFile.js","sourcesContent":["import fs from \"fs\"\nimport sequence from \"promise-sequential\"\nimport { normalizeSeparation } from \"./helpers.js\"\n\nconst getFileLStat = (path) => {\n  return new Promise((resolve, reject) => {\n    fs.lstat(path, (error, lstat) => {\n      if (error) {\n        reject({ status: 500, reason: error.code })\n      } else {\n        resolve(lstat)\n      }\n    })\n  })\n}\n\nconst createFolder = ({ location }) => {\n  return new Promise((resolve, reject) => {\n    fs.mkdir(location, (error) => {\n      if (error) {\n        // au cas ou deux script essayent de crÃ©e un dossier peu importe qui y arrive c'est ok\n        if (error.code === \"EEXIST\") {\n          return getFileLStat(location).then((stat) => {\n            if (stat.isDirectory()) {\n              resolve()\n            } else {\n              reject({ status: 500, reason: \"expect a directory\" })\n            }\n          })\n        }\n        reject({ status: 500, reason: error.code })\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\nconst createFolderUntil = ({ location }) => {\n  let path = normalizeSeparation(location)\n  // remove first / in case path starts with / (linux)\n  // because it would create a \"\" entry in folders array below\n  // tryig to create a folder at \"\"\n  const pathStartsWithSlash = path[0] === \"/\"\n  if (pathStartsWithSlash) {\n    path = path.slice(1)\n  }\n  const folders = path.split(\"/\")\n\n  folders.pop()\n\n  return sequence(\n    folders.map((_, index) => {\n      return () => {\n        const folderLocation = folders.slice(0, index + 1).join(\"/\")\n        return createFolder({\n          location: `${pathStartsWithSlash ? \"/\" : \"\"}${folderLocation}`,\n        })\n      }\n    }),\n  )\n}\n\nexport const writeFile = ({ location, string }) => {\n  return createFolderUntil({ location }).then(() => {\n    return new Promise((resolve, reject) => {\n      fs.writeFile(location, string, (error) => {\n        if (error) {\n          reject({ status: 500, reason: error.code })\n        } else {\n          resolve()\n        }\n      })\n    })\n  })\n}\n"]}