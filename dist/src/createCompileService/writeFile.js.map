{
  "version": 3,
  "sources": [
    "../../../src/createCompileService/writeFile.js"
  ],
  "names": [
    "getFileLStat",
    "path",
    "Promise",
    "resolve",
    "reject",
    "fs",
    "lstat",
    "error",
    "status",
    "reason",
    "code",
    "createFolder",
    "location",
    "mkdir",
    "then",
    "stat",
    "isDirectory",
    "createFolderUntil",
    "pathStartsWithSlash",
    "slice",
    "folders",
    "split",
    "pop",
    "map",
    "_",
    "index",
    "folderLocation",
    "join",
    "writeFile",
    "string"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import fs from \"fs\"\nimport sequence from \"promise-sequential\"\nimport { normalizeSeparation } from \"./helpers.js\"\n\nconst getFileLStat = (path) => {\n  return new Promise((resolve, reject) => {\n    fs.lstat(path, (error, lstat) => {\n      if (error) {\n        reject({ status: 500, reason: error.code })\n      } else {\n        resolve(lstat)\n      }\n    })\n  })\n}\n\nconst createFolder = ({ location }) => {\n  return new Promise((resolve, reject) => {\n    fs.mkdir(location, (error) => {\n      if (error) {\n        // au cas ou deux script essayent de crÃ©e un dossier peu importe qui y arrive c'est ok\n        if (error.code === \"EEXIST\") {\n          return getFileLStat(location).then((stat) => {\n            if (stat.isDirectory()) {\n              resolve()\n            } else {\n              reject({ status: 500, reason: \"expect a directory\" })\n            }\n          })\n        }\n        reject({ status: 500, reason: error.code })\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\nconst createFolderUntil = ({ location }) => {\n  let path = normalizeSeparation(location)\n  // remove first / in case path starts with / (linux)\n  // because it would create a \"\" entry in folders array below\n  // tryig to create a folder at \"\"\n  const pathStartsWithSlash = path[0] === \"/\"\n  if (pathStartsWithSlash) {\n    path = path.slice(1)\n  }\n  const folders = path.split(\"/\")\n\n  folders.pop()\n\n  return sequence(\n    folders.map((_, index) => {\n      return () => {\n        const folderLocation = folders.slice(0, index + 1).join(\"/\")\n        return createFolder({\n          location: `${pathStartsWithSlash ? \"/\" : \"\"}${folderLocation}`,\n        })\n      }\n    }),\n  )\n}\n\nexport const writeFile = ({ location, string }) => {\n  return createFolderUntil({ location }).then(() => {\n    return new Promise((resolve, reject) => {\n      fs.writeFile(location, string, (error) => {\n        if (error) {\n          reject({ status: 500, reason: error.code })\n        } else {\n          resolve()\n        }\n      })\n    })\n  })\n}\n"
  ]
}