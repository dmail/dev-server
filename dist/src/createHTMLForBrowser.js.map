{
  "version": 3,
  "sources": [
    "../../src/createHTMLForBrowser.js"
  ],
  "names": [
    "readBrowserLoader",
    "Promise",
    "resolve",
    "reject",
    "filename",
    "path",
    "__dirname",
    "fs",
    "readFile",
    "error",
    "buffer",
    "toString",
    "countLeading",
    "string",
    "predicate",
    "leading",
    "i",
    "length",
    "detectLineSeparator",
    "lineSeparators",
    "find",
    "separator",
    "indexOf",
    "detectIndentation",
    "lines",
    "firstLineWithLeadingWhiteSpace",
    "line",
    "repeat",
    "char",
    "prefixLines",
    "prefix",
    "lineSeparator",
    "split",
    "map",
    "index",
    "join",
    "renderScript",
    "source",
    "createHTMLForBrowser",
    "title",
    "charset",
    "script",
    "then",
    "loaderSource"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import fs from \"fs\"\nimport path from \"path\"\n\nconst readBrowserLoader = () => {\n  return new Promise((resolve, reject) => {\n    const filename = path.resolve(\n      __dirname,\n      // we add an additional ../ to get rid of dist/\n      \"../../node_modules/@dmail/module-loader/browser.js\",\n    )\n    fs.readFile(filename, (error, buffer) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(buffer.toString())\n      }\n    })\n  })\n}\n\nconst countLeading = (string, predicate) => {\n  let leading = 0\n  let i = 0\n  while (i < string.length) {\n    if (predicate(string[i])) {\n      i++\n      leading++\n    } else {\n      break\n    }\n  }\n  return leading\n}\n\nconst detectLineSeparator = (string) => {\n  const lineSeparators = [\"\\r\\n\", \"\\r\", \"\\n\"]\n  return lineSeparators.find((separator) => {\n    return string.indexOf(separator) > -1\n  })\n}\n\nexport const detectIndentation = (lines) => {\n  const firstLineWithLeadingWhiteSpace = lines.find((line) => {\n    return line[0] === \" \" || line[0] === \"\\t\"\n  })\n\n  if (!firstLineWithLeadingWhiteSpace) {\n    return \"\"\n  }\n\n  if (firstLineWithLeadingWhiteSpace[0] === \" \") {\n    return \" \".repeat(countLeading(firstLineWithLeadingWhiteSpace), (char) => char === \" \")\n  }\n\n  return \"\\t\".repeat(countLeading(firstLineWithLeadingWhiteSpace), (char) => char === \"\\t\")\n}\n\nconst prefixLines = (string, prefix = \"  \", { lineSeparator = \"auto\" } = {}) => {\n  if (lineSeparator === \"auto\") {\n    lineSeparator = detectLineSeparator(string)\n  }\n\n  const lines = string.split(lineSeparator)\n\n  return lines.map((line, index) => `${index === 0 ? \"\" : prefix}${line}`).join(lineSeparator)\n}\n\nconst renderScript = ({ source }) => {\n  return `<script type=\"text/javascript\">\n  ${source}\n</script>`\n}\n\nexport const createHTMLForBrowser = ({ title = \"Untitled\", charset = \"utf-8\", script } = {}) => {\n  return readBrowserLoader().then((loaderSource) => {\n    return `<!doctype html>\n\n<head>\n  <title>${title}</title>\n  <meta charset=\"${charset}\" />\n</head>\n\n<body>\n  <main></main>\n  ${prefixLines(renderScript({ source: loaderSource }), \"  \")}\n  ${prefixLines(\n    renderScript({\n      source: `window.System = window.createBrowserLoader.createBrowserLoader()`,\n    }),\n    \"  \",\n  )}\n  ${prefixLines(\n    renderScript({\n      source: script,\n    }),\n    \"  \",\n  )}\n</body>\n\n</html>`\n  })\n}\n"
  ]
}