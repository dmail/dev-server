{"version":3,"sources":["../../src/createHTMLForBrowser.js"],"names":["readBrowserLoader","Promise","resolve","reject","filename","__dirname","readFile","error","buffer","toString","countLeading","string","predicate","leading","i","length","detectLineSeparator","lineSeparators","find","separator","indexOf","detectIndentation","lines","firstLineWithLeadingWhiteSpace","line","repeat","char","prefixLines","prefix","lineSeparator","split","map","index","join","renderScript","source","createHTMLForBrowser","title","charset","script","then","loaderSource"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,GAAM;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,WAAW,kBAAKF,OAAL,CACfG,SADe;AAEf;AACA,kEAHe,CAAjB;AAKA,oBAAGC,QAAH,CAAYF,QAAZ,EAAsB,UAACG,KAAD,EAAQC,MAAR,EAAmB;AACvC,UAAID,KAAJ,EAAW;AACTJ,eAAOI,KAAP;AACD,OAFD,MAEO;AACLL,gBAAQM,OAAOC,QAAP,EAAR;AACD;AACF,KAND;AAOD,GAbM,CAAP;AAcD,CAfD;;AAiBA,IAAMC,eAAe,SAAfA,YAAe,CAACC,MAAD,EAASC,SAAT,EAAuB;AAC1C,MAAIC,UAAU,CAAd;AACA,MAAIC,IAAI,CAAR;AACA,SAAOA,IAAIH,OAAOI,MAAlB,EAA0B;AACxB,QAAIH,UAAUD,OAAOG,CAAP,CAAV,CAAJ,EAA0B;AACxBA;AACAD;AACD,KAHD,MAGO;AACL;AACD;AACF;AACD,SAAOA,OAAP;AACD,CAZD;;AAcA,IAAMG,sBAAsB,SAAtBA,mBAAsB,CAACL,MAAD,EAAY;AACtC,MAAMM,iBAAiB,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAAvB;AACA,SAAOA,eAAeC,IAAf,CAAoB,UAACC,SAAD,EAAe;AACxC,WAAOR,OAAOS,OAAP,CAAeD,SAAf,IAA4B,CAAC,CAApC;AACD,GAFM,CAAP;AAGD,CALD;;AAOO,IAAME,gDAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAC1C,MAAMC,iCAAiCD,MAAMJ,IAAN,CAAW,UAACM,IAAD,EAAU;AAC1D,WAAOA,KAAK,CAAL,MAAY,GAAZ,IAAmBA,KAAK,CAAL,MAAY,IAAtC;AACD,GAFsC,CAAvC;;AAIA,MAAI,CAACD,8BAAL,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,MAAIA,+BAA+B,CAA/B,MAAsC,GAA1C,EAA+C;AAC7C,WAAO,IAAIE,MAAJ,CAAWf,aAAaa,8BAAb,CAAX,EAAyD,UAACG,IAAD;AAAA,aAAUA,SAAS,GAAnB;AAAA,KAAzD,CAAP;AACD;;AAED,SAAO,KAAKD,MAAL,CAAYf,aAAaa,8BAAb,CAAZ,EAA0D,UAACG,IAAD;AAAA,WAAUA,SAAS,IAAnB;AAAA,GAA1D,CAAP;AACD,CAdM;;AAgBP,IAAMC,cAAc,SAAdA,WAAc,CAAChB,MAAD,EAA4D;AAAA,MAAnDiB,MAAmD,uEAA1C,IAA0C;;AAAA,iFAAP,EAAO;AAAA,gCAAlCC,aAAkC;AAAA,MAAlCA,aAAkC,sCAAlB,MAAkB;;AAC9E,MAAIA,kBAAkB,MAAtB,EAA8B;AAC5BA,oBAAgBb,oBAAoBL,MAApB,CAAhB;AACD;;AAED,MAAMW,QAAQX,OAAOmB,KAAP,CAAaD,aAAb,CAAd;;AAEA,SAAOP,MAAMS,GAAN,CAAU,UAACP,IAAD,EAAOQ,KAAP;AAAA,iBAAoBA,UAAU,CAAV,GAAc,EAAd,GAAmBJ,MAAvC,IAAgDJ,IAAhD;AAAA,GAAV,EAAkES,IAAlE,CAAuEJ,aAAvE,CAAP;AACD,CARD;;AAUA,IAAMK,eAAe,SAAfA,YAAe,QAAgB;AAAA,MAAbC,MAAa,SAAbA,MAAa;;AACnC,mDACEA,MADF;AAGD,CAJD;;AAMO,IAAMC,sDAAuB,SAAvBA,oBAAuB,GAA4D;AAAA,kFAAP,EAAO;AAAA,0BAAzDC,KAAyD;AAAA,MAAzDA,KAAyD,+BAAjD,UAAiD;AAAA,4BAArCC,OAAqC;AAAA,MAArCA,OAAqC,iCAA3B,OAA2B;AAAA,MAAlBC,MAAkB,SAAlBA,MAAkB;;AAC9F,SAAOvC,oBAAoBwC,IAApB,CAAyB,UAACC,YAAD,EAAkB;AAChD,oDAGOJ,KAHP,oCAIeC,OAJf,qDASAX,YAAYO,aAAa,EAAEC,QAAQM,YAAV,EAAb,CAAZ,EAAoD,IAApD,CATA,YAUAd,YACAO,aAAa;AACXC;AADW,KAAb,CADA,EAIA,IAJA,CAVA,YAgBAR,YACAO,aAAa;AACXC,cAAQI;AADG,KAAb,CADA,EAIA,IAJA,CAhBA;AAyBD,GA1BM,CAAP;AA2BD,CA5BM","file":"createHTMLForBrowser.js","sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\n\nconst readBrowserLoader = () => {\n  return new Promise((resolve, reject) => {\n    const filename = path.resolve(\n      __dirname,\n      // we add an additional ../ to get rid of dist/\n      \"../../node_modules/@dmail/module-loader/src/browser/index.js\",\n    )\n    fs.readFile(filename, (error, buffer) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(buffer.toString())\n      }\n    })\n  })\n}\n\nconst countLeading = (string, predicate) => {\n  let leading = 0\n  let i = 0\n  while (i < string.length) {\n    if (predicate(string[i])) {\n      i++\n      leading++\n    } else {\n      break\n    }\n  }\n  return leading\n}\n\nconst detectLineSeparator = (string) => {\n  const lineSeparators = [\"\\r\\n\", \"\\r\", \"\\n\"]\n  return lineSeparators.find((separator) => {\n    return string.indexOf(separator) > -1\n  })\n}\n\nexport const detectIndentation = (lines) => {\n  const firstLineWithLeadingWhiteSpace = lines.find((line) => {\n    return line[0] === \" \" || line[0] === \"\\t\"\n  })\n\n  if (!firstLineWithLeadingWhiteSpace) {\n    return \"\"\n  }\n\n  if (firstLineWithLeadingWhiteSpace[0] === \" \") {\n    return \" \".repeat(countLeading(firstLineWithLeadingWhiteSpace), (char) => char === \" \")\n  }\n\n  return \"\\t\".repeat(countLeading(firstLineWithLeadingWhiteSpace), (char) => char === \"\\t\")\n}\n\nconst prefixLines = (string, prefix = \"  \", { lineSeparator = \"auto\" } = {}) => {\n  if (lineSeparator === \"auto\") {\n    lineSeparator = detectLineSeparator(string)\n  }\n\n  const lines = string.split(lineSeparator)\n\n  return lines.map((line, index) => `${index === 0 ? \"\" : prefix}${line}`).join(lineSeparator)\n}\n\nconst renderScript = ({ source }) => {\n  return `<script type=\"text/javascript\">\n  ${source}\n</script>`\n}\n\nexport const createHTMLForBrowser = ({ title = \"Untitled\", charset = \"utf-8\", script } = {}) => {\n  return readBrowserLoader().then((loaderSource) => {\n    return `<!doctype html>\n\n<head>\n  <title>${title}</title>\n  <meta charset=\"${charset}\" />\n</head>\n\n<body>\n  <main></main>\n  ${prefixLines(renderScript({ source: loaderSource }), \"  \")}\n  ${prefixLines(\n    renderScript({\n      source: `window.System = window.createBrowserLoader.createBrowserLoader()`,\n    }),\n    \"  \",\n  )}\n  ${prefixLines(\n    renderScript({\n      source: script,\n    }),\n    \"  \",\n  )}\n</body>\n\n</html>`\n  })\n}\n"]}