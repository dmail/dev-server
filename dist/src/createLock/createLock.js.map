{"version":3,"sources":["../../../src/createLock/createLock.js"],"names":["createLock","unusedCallback","onceUnused","callback","pendings","busy","chain","promise","resolve","reject","push","Promise","then","fullfilledOrRejected","length","undefined","shift","createLockRegistry","lockBindings","lockForRessource","ressource","lockBinding","find","lock","index","indexOf","splice"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,aAAa,SAAbA,UAAa,GAAM;AACvB,MAAIC,uBAAJ;AACA,MAAMC,aAAa,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC/BF,qBAAiBE,QAAjB;AACD,GAFD;;AAIA,MAAMC,WAAW,EAAjB;AACA,MAAIC,OAAO,KAAX;;AAEA,MAAMC,QAAQ,SAARA,KAAQ,CAACH,QAAD,EAAc;AAC1B,QAAIE,IAAJ,EAAU;AAAA,kCAC6B,sCAD7B;AAAA,UACAE,QADA,yBACAA,OADA;AAAA,UACSC,OADT,yBACSA,OADT;AAAA,UACkBC,MADlB,yBACkBA,MADlB;;AAERL,eAASM,IAAT,CAAc,EAAEH,iBAAF,EAAWC,gBAAX,EAAoBC,cAApB,EAA4BN,kBAA5B,EAAd;AACA,aAAOI,QAAP;AACD;;AAEDF,WAAO,IAAP;AACA,QAAME,UAAUI,QAAQH,OAAR,GAAkBI,IAAlB,CAAuBT,QAAvB,CAAhB;;AAEA,QAAMU,uBAAuB,SAAvBA,oBAAuB,GAAM;AACjCR,aAAO,KAAP;AACA,UAAID,SAASU,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAIb,cAAJ,EAAoB;AAClBA;AACAA,2BAAiBc,SAAjB;AACD;AACF,OALD,MAKO;AAAA,8BACyBX,SAASY,KAAT,EADzB;AAAA,YACGR,QADH,mBACGA,OADH;AAAA,YACYL,SADZ,mBACYA,QADZ;;AAELK,iBAAQF,MAAMH,SAAN,CAAR;AACD;AACF,KAXD;;AAaAI,YAAQK,IAAR,CAAaC,oBAAb,EAAmCA,oBAAnC;;AAEA,WAAON,OAAP;AACD,GA1BD;;AA4BA,SAAO,EAAED,YAAF,EAASJ,sBAAT,EAAP;AACD,CAtCD;;AAwCO,IAAMe,kDAAqB,SAArBA,kBAAqB,GAAM;AACtC,MAAMC,eAAe,EAArB;AACA,MAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;AACtC,QAAMC,cAAcH,aAAaI,IAAb,CAAkB,UAACD,WAAD;AAAA,aAAiBA,YAAYD,SAAZ,KAA0BA,SAA3C;AAAA,KAAlB,CAApB;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOA,YAAYE,IAAnB;AACD;;AAED,QAAMA,OAAOvB,YAAb;AACAkB,iBAAaR,IAAb,CAAkB;AAChBa,gBADgB;AAEhBH;AAFgB,KAAlB;AAIA;AACA;AACAG,SAAKrB,UAAL,CAAgB,YAAM;AACpB,UAAMsB,QAAQN,aAAaO,OAAb,CAAqBF,IAArB,CAAd;AACAL,mBAAaQ,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACD,KAHD;;AAKA,WAAOD,IAAP;AACD,GAnBD;AAoBA,SAAO,EAAEJ,kCAAF,EAAP;AACD,CAvBM","file":"createLock.js","sourcesContent":["import { createPromiseAndHooks } from \"../promise.js\"\n\nconst createLock = () => {\n  let unusedCallback\n  const onceUnused = (callback) => {\n    unusedCallback = callback\n  }\n\n  const pendings = []\n  let busy = false\n\n  const chain = (callback) => {\n    if (busy) {\n      const { promise, resolve, reject } = createPromiseAndHooks()\n      pendings.push({ promise, resolve, reject, callback })\n      return promise\n    }\n\n    busy = true\n    const promise = Promise.resolve().then(callback)\n\n    const fullfilledOrRejected = () => {\n      busy = false\n      if (pendings.length === 0) {\n        if (unusedCallback) {\n          unusedCallback()\n          unusedCallback = undefined\n        }\n      } else {\n        const { resolve, callback } = pendings.shift()\n        resolve(chain(callback))\n      }\n    }\n\n    promise.then(fullfilledOrRejected, fullfilledOrRejected)\n\n    return promise\n  }\n\n  return { chain, onceUnused }\n}\n\nexport const createLockRegistry = () => {\n  const lockBindings = []\n  const lockForRessource = (ressource) => {\n    const lockBinding = lockBindings.find((lockBinding) => lockBinding.ressource === ressource)\n    if (lockBinding) {\n      return lockBinding.lock\n    }\n\n    const lock = createLock()\n    lockBindings.push({\n      lock,\n      ressource,\n    })\n    // to avoid lockBindings to grow for ever\n    // we remove them from the array as soon as the ressource is not used anymore\n    lock.onceUnused(() => {\n      const index = lockBindings.indexOf(lock)\n      lockBindings.splice(index, 1)\n    })\n\n    return lock\n  }\n  return { lockForRessource }\n}\n"]}