{
  "version": 3,
  "sources": [
    "../../../src/createLock/createLock.js"
  ],
  "names": [
    "createLock",
    "unusedCallback",
    "onceUnused",
    "callback",
    "pendings",
    "busy",
    "chain",
    "promise",
    "resolve",
    "reject",
    "push",
    "Promise",
    "then",
    "fullfilledOrRejected",
    "length",
    "undefined",
    "shift",
    "createLockRegistry",
    "lockBindings",
    "lockForRessource",
    "ressource",
    "lockBinding",
    "find",
    "lock",
    "index",
    "indexOf",
    "splice"
  ],
  "mappings": ";;;;;;;AAAA;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAIC,cAAJ;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC/BF,IAAAA,cAAc,GAAGE,QAAjB;AACD,GAFD;;AAIA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAG,KAAX;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACH,QAAD,EAAc;AAC1B,QAAIE,IAAJ,EAAU;AAAA,kCAC6B,sCAD7B;AAAA,UACAE,QADA,yBACAA,OADA;AAAA,UACSC,OADT,yBACSA,OADT;AAAA,UACkBC,MADlB,yBACkBA,MADlB;;AAERL,MAAAA,QAAQ,CAACM,IAAT,CAAc;AAAEH,QAAAA,OAAO,EAAPA,QAAF;AAAWC,QAAAA,OAAO,EAAPA,OAAX;AAAoBC,QAAAA,MAAM,EAANA,MAApB;AAA4BN,QAAAA,QAAQ,EAARA;AAA5B,OAAd;AACA,aAAOI,QAAP;AACD;;AAEDF,IAAAA,IAAI,GAAG,IAAP;AACA,QAAME,OAAO,GAAGI,OAAO,CAACH,OAAR,GAAkBI,IAAlB,CAAuBT,QAAvB,CAAhB;;AAEA,QAAMU,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjCR,MAAAA,IAAI,GAAG,KAAP;;AACA,UAAID,QAAQ,CAACU,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAIb,cAAJ,EAAoB;AAClBA,UAAAA,cAAc;AACdA,UAAAA,cAAc,GAAGc,SAAjB;AACD;AACF,OALD,MAKO;AAAA,8BACyBX,QAAQ,CAACY,KAAT,EADzB;AAAA,YACGR,QADH,mBACGA,OADH;AAAA,YACYL,SADZ,mBACYA,QADZ;;AAELK,QAAAA,QAAO,CAACF,KAAK,CAACH,SAAD,CAAN,CAAP;AACD;AACF,KAXD;;AAaAI,IAAAA,OAAO,CAACK,IAAR,CAAaC,oBAAb,EAAmCA,oBAAnC;AAEA,WAAON,OAAP;AACD,GA1BD;;AA4BA,SAAO;AAAED,IAAAA,KAAK,EAALA,KAAF;AAASJ,IAAAA,UAAU,EAAVA;AAAT,GAAP;AACD,CAtCD;;AAwCO,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,MAAMC,YAAY,GAAG,EAArB;;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;AACtC,QAAMC,WAAW,GAAGH,YAAY,CAACI,IAAb,CAAkB,UAACD,WAAD;AAAA,aAAiBA,WAAW,CAACD,SAAZ,KAA0BA,SAA3C;AAAA,KAAlB,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOA,WAAW,CAACE,IAAnB;AACD;;AAED,QAAMA,IAAI,GAAGvB,UAAU,EAAvB;AACAkB,IAAAA,YAAY,CAACR,IAAb,CAAkB;AAChBa,MAAAA,IAAI,EAAJA,IADgB;AAEhBH,MAAAA,SAAS,EAATA;AAFgB,KAAlB,EAPsC,CAWtC;AACA;;AACAG,IAAAA,IAAI,CAACrB,UAAL,CAAgB,YAAM;AACpB,UAAMsB,KAAK,GAAGN,YAAY,CAACO,OAAb,CAAqBF,IAArB,CAAd;AACAL,MAAAA,YAAY,CAACQ,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACD,KAHD;AAKA,WAAOD,IAAP;AACD,GAnBD;;AAoBA,SAAO;AAAEJ,IAAAA,gBAAgB,EAAhBA;AAAF,GAAP;AACD,CAvBM",
  "sourcesContent": [
    "import { createPromiseAndHooks } from \"../promise.js\"\n\nconst createLock = () => {\n  let unusedCallback\n  const onceUnused = (callback) => {\n    unusedCallback = callback\n  }\n\n  const pendings = []\n  let busy = false\n\n  const chain = (callback) => {\n    if (busy) {\n      const { promise, resolve, reject } = createPromiseAndHooks()\n      pendings.push({ promise, resolve, reject, callback })\n      return promise\n    }\n\n    busy = true\n    const promise = Promise.resolve().then(callback)\n\n    const fullfilledOrRejected = () => {\n      busy = false\n      if (pendings.length === 0) {\n        if (unusedCallback) {\n          unusedCallback()\n          unusedCallback = undefined\n        }\n      } else {\n        const { resolve, callback } = pendings.shift()\n        resolve(chain(callback))\n      }\n    }\n\n    promise.then(fullfilledOrRejected, fullfilledOrRejected)\n\n    return promise\n  }\n\n  return { chain, onceUnused }\n}\n\nexport const createLockRegistry = () => {\n  const lockBindings = []\n  const lockForRessource = (ressource) => {\n    const lockBinding = lockBindings.find((lockBinding) => lockBinding.ressource === ressource)\n    if (lockBinding) {\n      return lockBinding.lock\n    }\n\n    const lock = createLock()\n    lockBindings.push({\n      lock,\n      ressource,\n    })\n    // to avoid lockBindings to grow for ever\n    // we remove them from the array as soon as the ressource is not used anymore\n    lock.onceUnused(() => {\n      const index = lockBindings.indexOf(lock)\n      lockBindings.splice(index, 1)\n    })\n\n    return lock\n  }\n  return { lockForRessource }\n}\n"
  ]
}