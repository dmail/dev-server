{
  "version": 3,
  "sources": [
    "../../../src/createLock/createLock.test.js"
  ],
  "names": [
    "assertPromiseIsPending",
    "promise",
    "status",
    "assertPromiseIsFulfilled",
    "assert",
    "equal",
    "assertPromiseIsRejected",
    "assertPromiseIsFulfilledWith",
    "value",
    "assertPromiseIsRejectedWith",
    "tick",
    "lock",
    "lockForRessource",
    "resolve",
    "returnedPromise",
    "chain",
    "reject",
    "firstPromise",
    "firstCallPromise",
    "then",
    "secondPromise",
    "secondCallPromise",
    "registry",
    "lock1",
    "lock2",
    "thirdCallPromise"
  ],
  "mappings": ";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,sBAAsB,GAAIC,OAAD,IAAa;AAC1C,uBAAOA,OAAO,CAACC,MAAR,KAAmB,SAAnB,IAAgCD,OAAO,CAACC,MAAR,KAAmB,UAA1D;AACD,CAFD;;AAIA,MAAMC,wBAAwB,GAAIF,OAAD,IAAa;AAC5CG,kBAAOC,KAAP,CAAaJ,OAAO,CAACC,MAArB,EAA6B,WAA7B;AACD,CAFD;;AAIA,MAAMI,uBAAuB,GAAIL,OAAD,IAAa;AAC3CG,kBAAOC,KAAP,CAAaJ,OAAO,CAACC,MAArB,EAA6B,UAA7B;AACD,CAFD;;AAIA,MAAMK,4BAA4B,GAAG,CAACN,OAAD,EAAUO,KAAV,KAAoB;AACvDL,EAAAA,wBAAwB,CAACF,OAAD,CAAxB;;AACAG,kBAAOC,KAAP,CAAaJ,OAAO,CAACO,KAArB,EAA4BA,KAA5B;AACD,CAHD;;AAKA,MAAMC,2BAA2B,GAAG,CAACR,OAAD,EAAUO,KAAV,KAAoB;AACtDF,EAAAA,uBAAuB,CAACL,OAAD,CAAvB;;AACAG,kBAAOC,KAAP,CAAaJ,OAAO,CAACO,KAArB,EAA4BA,KAA5B;AACD,CAHD;;AAKA,gBAAK,MAAM;AACT,6BAAc,CAAC;AAAEE,IAAAA;AAAF,GAAD,KAAc;AAC1B,UAAMC,IAAI,GAAG,sCAAqBC,gBAArB,EAAb;AACA,UAAM;AAAEX,MAAAA,OAAF;AAAWY,MAAAA;AAAX,QAAuB,qCAA7B;AACA,UAAMC,eAAe,GAAGH,IAAI,CAACI,KAAL,CAAW,MAAMd,OAAjB,CAAxB;AAEAD,IAAAA,sBAAsB,CAACc,eAAD,CAAtB;AACAD,IAAAA,OAAO,CAAC,CAAD,CAAP;AACAH,IAAAA,IAAI;AACJH,IAAAA,4BAA4B,CAACO,eAAD,EAAkB,CAAlB,CAA5B;AACD,GATD;AAUD,CAXD;AAaA,gBAAK,MAAM;AACT,6BAAc,CAAC;AAAEJ,IAAAA;AAAF,GAAD,KAAc;AAC1B,UAAMC,IAAI,GAAG,sCAAqBC,gBAArB,EAAb;AACA,UAAM;AAAEX,MAAAA,OAAF;AAAWe,MAAAA;AAAX,QAAsB,qCAA5B;AACA,UAAMF,eAAe,GAAGH,IAAI,CAACI,KAAL,CAAW,MAAMd,OAAjB,CAAxB;AAEAD,IAAAA,sBAAsB,CAACc,eAAD,CAAtB;AACAE,IAAAA,MAAM,CAAC,CAAD,CAAN;AACAN,IAAAA,IAAI;AACJD,IAAAA,2BAA2B,CAACK,eAAD,EAAkB,CAAlB,CAA3B;AACD,GATD;AAUD,CAXD,E,CAaA;;AACA,gBAAK,MAAM;AACT,6BAAc,CAAC;AAAEJ,IAAAA;AAAF,GAAD,KAAc;AAC1B,UAAMC,IAAI,GAAG,sCAAqBC,gBAArB,EAAb;AACA,UAAMK,YAAY,GAAG,qCAArB;AACA,UAAMC,gBAAgB,GAAGP,IAAI,CAACI,KAAL,CAAW,MAAME,YAAY,CAAChB,OAAb,CAAqBkB,IAArB,CAA0B,MAAM,CAAhC,CAAjB,CAAzB;AACA,UAAMC,aAAa,GAAG,qCAAtB;AACA,UAAMC,iBAAiB,GAAGV,IAAI,CAACI,KAAL,CAAW,MAAMK,aAAa,CAACnB,OAAd,CAAsBkB,IAAtB,CAA2B,MAAM,CAAjC,CAAjB,CAA1B;AAEAnB,IAAAA,sBAAsB,CAACkB,gBAAD,CAAtB;AACAlB,IAAAA,sBAAsB,CAACqB,iBAAD,CAAtB;AACAJ,IAAAA,YAAY,CAACJ,OAAb;AACAH,IAAAA,IAAI;AACJH,IAAAA,4BAA4B,CAACW,gBAAD,EAAmB,CAAnB,CAA5B;AACAlB,IAAAA,sBAAsB,CAACqB,iBAAD,CAAtB;AACAD,IAAAA,aAAa,CAACP,OAAd;AACAH,IAAAA,IAAI;AACJH,IAAAA,4BAA4B,CAACc,iBAAD,EAAoB,CAApB,CAA5B;AACD,GAhBD;AAiBD,CAlBD,E,CAoBA;;AACA,gBAAK,MAAM;AACT,6BAAc,CAAC;AAAEX,IAAAA;AAAF,GAAD,KAAc;AAC1B,UAAMY,QAAQ,GAAG,qCAAjB;AACA,UAAMC,KAAK,GAAGD,QAAQ,CAACV,gBAAT,CAA0B,CAA1B,CAAd;AACA,UAAMY,KAAK,GAAGF,QAAQ,CAACV,gBAAT,CAA0B,CAA1B,CAAd;AAEA,UAAMK,YAAY,GAAG,qCAArB;AACA,UAAMG,aAAa,GAAG,qCAAtB;AAEA,UAAMF,gBAAgB,GAAGK,KAAK,CAACR,KAAN,CAAY,MAAME,YAAY,CAAChB,OAA/B,CAAzB;AACA,UAAMoB,iBAAiB,GAAGG,KAAK,CAACT,KAAN,CAAY,MAAMK,aAAa,CAACnB,OAAhC,CAA1B;AACA,UAAMwB,gBAAgB,GAAGF,KAAK,CAACR,KAAN,CAAY,MAAME,YAAY,CAAChB,OAA/B,CAAzB;AAEAD,IAAAA,sBAAsB,CAACkB,gBAAD,CAAtB;AACAlB,IAAAA,sBAAsB,CAACqB,iBAAD,CAAtB;AACArB,IAAAA,sBAAsB,CAACyB,gBAAD,CAAtB;AACAR,IAAAA,YAAY,CAACJ,OAAb,CAAqB,CAArB;AACAH,IAAAA,IAAI;AACJH,IAAAA,4BAA4B,CAACW,gBAAD,EAAmB,CAAnB,CAA5B;AACAlB,IAAAA,sBAAsB,CAACqB,iBAAD,CAAtB;AACAd,IAAAA,4BAA4B,CAACkB,gBAAD,EAAmB,CAAnB,CAA5B;AACAL,IAAAA,aAAa,CAACP,OAAd,CAAsB,CAAtB;AACAH,IAAAA,IAAI;AACJH,IAAAA,4BAA4B,CAACc,iBAAD,EAAoB,CAApB,CAA5B;AACD,GAvBD;AAwBD,CAzBD",
  "sourcesContent": [
    "import { test } from \"@dmail/test\"\nimport assert from \"assert\"\nimport { mockExecution } from \"micmac\"\nimport { createPromiseAndHooks } from \"../promise.js\"\nimport { createLockRegistry } from \"./createLock.js\"\n\nconst assertPromiseIsPending = (promise) => {\n  assert(promise.status === \"pending\" || promise.status === \"resolved\")\n}\n\nconst assertPromiseIsFulfilled = (promise) => {\n  assert.equal(promise.status, \"fulfilled\")\n}\n\nconst assertPromiseIsRejected = (promise) => {\n  assert.equal(promise.status, \"rejected\")\n}\n\nconst assertPromiseIsFulfilledWith = (promise, value) => {\n  assertPromiseIsFulfilled(promise)\n  assert.equal(promise.value, value)\n}\n\nconst assertPromiseIsRejectedWith = (promise, value) => {\n  assertPromiseIsRejected(promise)\n  assert.equal(promise.value, value)\n}\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const { promise, resolve } = createPromiseAndHooks()\n    const returnedPromise = lock.chain(() => promise)\n\n    assertPromiseIsPending(returnedPromise)\n    resolve(1)\n    tick()\n    assertPromiseIsFulfilledWith(returnedPromise, 1)\n  })\n})\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const { promise, reject } = createPromiseAndHooks()\n    const returnedPromise = lock.chain(() => promise)\n\n    assertPromiseIsPending(returnedPromise)\n    reject(1)\n    tick()\n    assertPromiseIsRejectedWith(returnedPromise, 1)\n  })\n})\n\n// un appel attends la résolution de tout autre appel en cours\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const firstPromise = createPromiseAndHooks()\n    const firstCallPromise = lock.chain(() => firstPromise.promise.then(() => 1))\n    const secondPromise = createPromiseAndHooks()\n    const secondCallPromise = lock.chain(() => secondPromise.promise.then(() => 2))\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    firstPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    secondPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n\n// un appel atttends la fin de la résolution de tout autre appel ayant les \"même\" arguments\ntest(() => {\n  mockExecution(({ tick }) => {\n    const registry = createLockRegistry()\n    const lock1 = registry.lockForRessource(1)\n    const lock2 = registry.lockForRessource(2)\n\n    const firstPromise = createPromiseAndHooks()\n    const secondPromise = createPromiseAndHooks()\n\n    const firstCallPromise = lock1.chain(() => firstPromise.promise)\n    const secondCallPromise = lock2.chain(() => secondPromise.promise)\n    const thirdCallPromise = lock1.chain(() => firstPromise.promise)\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsPending(thirdCallPromise)\n    firstPromise.resolve(1)\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsFulfilledWith(thirdCallPromise, 1)\n    secondPromise.resolve(2)\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n"
  ]
}