{"version":3,"sources":["../../../src/createLock/createLock.test.js"],"names":["assertPromiseIsPending","promise","status","assertPromiseIsFulfilled","equal","assertPromiseIsRejected","assertPromiseIsFulfilledWith","value","assertPromiseIsRejectedWith","tick","lock","lockForRessource","resolve","returnedPromise","chain","reject","firstPromise","firstCallPromise","then","secondPromise","secondCallPromise","registry","lock1","lock2","thirdCallPromise"],"mappings":"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","file":"createLock.test.js","sourcesContent":["import { test } from \"@dmail/test\"\nimport assert from \"assert\"\nimport { mockExecution } from \"micmac\"\nimport { createPromiseAndHooks } from \"../promise.js\"\nimport { createLockRegistry } from \"./createLock.js\"\n\nconst assertPromiseIsPending = (promise) => {\n  assert(promise.status === \"pending\" || promise.status === \"resolved\")\n}\n\nconst assertPromiseIsFulfilled = (promise) => {\n  assert.equal(promise.status, \"fulfilled\")\n}\n\nconst assertPromiseIsRejected = (promise) => {\n  assert.equal(promise.status, \"rejected\")\n}\n\nconst assertPromiseIsFulfilledWith = (promise, value) => {\n  assertPromiseIsFulfilled(promise)\n  assert.equal(promise.value, value)\n}\n\nconst assertPromiseIsRejectedWith = (promise, value) => {\n  assertPromiseIsRejected(promise)\n  assert.equal(promise.value, value)\n}\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const { promise, resolve } = createPromiseAndHooks()\n    const returnedPromise = lock.chain(() => promise)\n\n    assertPromiseIsPending(returnedPromise)\n    resolve(1)\n    tick()\n    assertPromiseIsFulfilledWith(returnedPromise, 1)\n  })\n})\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const { promise, reject } = createPromiseAndHooks()\n    const returnedPromise = lock.chain(() => promise)\n\n    assertPromiseIsPending(returnedPromise)\n    reject(1)\n    tick()\n    assertPromiseIsRejectedWith(returnedPromise, 1)\n  })\n})\n\n// un appel attends la résolution de tout autre appel en cours\ntest(() => {\n  mockExecution(({ tick }) => {\n    const lock = createLockRegistry().lockForRessource()\n    const firstPromise = createPromiseAndHooks()\n    const firstCallPromise = lock.chain(() => firstPromise.promise.then(() => 1))\n    const secondPromise = createPromiseAndHooks()\n    const secondCallPromise = lock.chain(() => secondPromise.promise.then(() => 2))\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    firstPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    secondPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n\n// un appel atttends la fin de la résolution de tout autre appel ayant les \"même\" arguments\ntest(() => {\n  mockExecution(({ tick }) => {\n    const registry = createLockRegistry()\n    const lock1 = registry.lockForRessource(1)\n    const lock2 = registry.lockForRessource(2)\n\n    const firstPromise = createPromiseAndHooks()\n    const secondPromise = createPromiseAndHooks()\n\n    const firstCallPromise = lock1.chain(() => firstPromise.promise)\n    const secondCallPromise = lock2.chain(() => secondPromise.promise)\n    const thirdCallPromise = lock1.chain(() => firstPromise.promise)\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsPending(thirdCallPromise)\n    firstPromise.resolve(1)\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsFulfilledWith(thirdCallPromise, 1)\n    secondPromise.resolve(2)\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n"]}