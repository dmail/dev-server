{"version":3,"sources":["../../../src/enqueueCall/enqueueCall.js"],"names":["createExecutionQueue","pendings","running","enqueue","fn","args","promise","resolve","reject","push","onPassedOrFailed","length","shift","Promise","then","enqueueCall","enqueueCallByArgs","transform"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,uBAAuB,SAAvBA,oBAAuB,GAAM;AACjC,MAAMC,WAAW,EAAjB;AACA,MAAIC,UAAU,KAAd;;AAEA,MAAMC,UAAU,SAAVA,OAAU,CAACC,EAAD,EAAiB;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AAC/B,QAAIH,OAAJ,EAAa;AAAA,kCAC0B,sCAD1B;AAAA,UACHI,QADG,yBACHA,OADG;AAAA,UACMC,OADN,yBACMA,OADN;AAAA,UACeC,MADf,yBACeA,MADf;;AAEXP,eAASQ,IAAT,CAAc,EAAEH,iBAAF,EAAWC,gBAAX,EAAoBC,cAApB,EAA4BJ,MAA5B,EAAgCC,UAAhC,EAAd;AACA,aAAOC,QAAP;AACD;AACDJ,cAAU,IAAV;;AAEA,QAAMQ,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7BR,gBAAU,KAAV;AACA,UAAID,SAASU,MAAT,GAAkB,CAAtB,EAAyB;AAAA,8BACOV,SAASW,KAAT,EADP;AAAA,YACfL,QADe,mBACfA,OADe;AAAA,YACNH,GADM,mBACNA,EADM;AAAA,YACFC,KADE,mBACFA,IADE;;AAEvBE,iBAAQJ,0BAAQC,GAAR,4BAAeC,KAAf,GAAR;AACD;AACF,KAND;;AAQA,QAAMC,UAAUO,QAAQN,OAAR,CAAgBH,oBAAMC,IAAN,CAAhB,CAAhB;;AAEAC,YAAQQ,IAAR,CAAaJ,gBAAb,EAA+BA,gBAA/B;;AAEA,WAAOJ,OAAP;AACD,GArBD;;AAuBA,SAAOH,OAAP;AACD,CA5BD;;AA8BO,IAAMY,oCAAc,SAAdA,WAAc,CAACX,EAAD,EAAQ;AACjC,MAAMD,UAAUH,sBAAhB;AACA,SAAO;AAAA,uCAAIK,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaF,0BAAQC,EAAR,SAAeC,IAAf,EAAb;AAAA,GAAP;AACD,CAHM;;AAKA,IAAMW,gDAAoB,SAApBA,iBAAoB,CAACZ,EAAD,EAAQ;AACvC,SAAO,0BACLJ,oBADK,EAEL,0BAAY;AACViB,eAAW,mBAACd,OAAD;AAAA,yCAAaE,IAAb;AAAaA,YAAb;AAAA;;AAAA,aAAsBF,0BAAQC,EAAR,SAAeC,IAAf,EAAtB;AAAA;AADD,GAAZ,CAFK,CAAP;AAMD,CAPM","file":"enqueueCall.js","sourcesContent":["import { createStore, memoizeSync } from \"../memoize.js\"\nimport { createPromiseAndHooks } from \"../promise.js\"\n\nconst createExecutionQueue = () => {\n  const pendings = []\n  let running = false\n\n  const enqueue = (fn, ...args) => {\n    if (running) {\n      const { promise, resolve, reject } = createPromiseAndHooks()\n      pendings.push({ promise, resolve, reject, fn, args })\n      return promise\n    }\n    running = true\n\n    const onPassedOrFailed = () => {\n      running = false\n      if (pendings.length > 0) {\n        const { resolve, fn, args } = pendings.shift()\n        resolve(enqueue(fn, ...args))\n      }\n    }\n\n    const promise = Promise.resolve(fn(...args))\n\n    promise.then(onPassedOrFailed, onPassedOrFailed)\n\n    return promise\n  }\n\n  return enqueue\n}\n\nexport const enqueueCall = (fn) => {\n  const enqueue = createExecutionQueue()\n  return (...args) => enqueue(fn, ...args)\n}\n\nexport const enqueueCallByArgs = (fn) => {\n  return memoizeSync(\n    createExecutionQueue,\n    createStore({\n      transform: (enqueue, ...args) => enqueue(fn, ...args),\n    }),\n  )\n}\n"]}