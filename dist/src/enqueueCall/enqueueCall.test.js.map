{"version":3,"sources":["../../../src/enqueueCall/enqueueCall.test.js"],"names":["assertPromiseIsPending","promise","status","assertPromiseIsFulfilled","equal","assertPromiseIsRejected","assertPromiseIsFulfilledWith","value","assertPromiseIsRejectedWith","tick","fn","resolve","returnedPromise","reject","debounced","then","firstPromise","firstCallPromise","secondPromise","secondCallPromise","thirdCallPromise"],"mappings":"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","file":"enqueueCall.test.js","sourcesContent":["import { test } from \"@dmail/test\"\nimport assert from \"assert\"\nimport { mockExecution } from \"micmac\"\nimport { createPromiseAndHooks } from \"../promise.js\"\nimport { enqueueCall, enqueueCallByArgs } from \"./enqueueCall.js\"\n\nconst assertPromiseIsPending = (promise) => {\n  assert(promise.status === \"pending\" || promise.status === \"resolved\")\n}\n\nconst assertPromiseIsFulfilled = (promise) => {\n  assert.equal(promise.status, \"fulfilled\")\n}\n\nconst assertPromiseIsRejected = (promise) => {\n  assert.equal(promise.status, \"rejected\")\n}\n\nconst assertPromiseIsFulfilledWith = (promise, value) => {\n  assertPromiseIsFulfilled(promise)\n  assert.equal(promise.value, value)\n}\n\nconst assertPromiseIsRejectedWith = (promise, value) => {\n  assertPromiseIsRejected(promise)\n  assert.equal(promise.value, value)\n}\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const fn = (value) => value\n    const { promise, resolve } = createPromiseAndHooks()\n    const returnedPromise = enqueueCall(fn)(promise)\n\n    assertPromiseIsPending(returnedPromise)\n    resolve(1)\n    tick()\n    assertPromiseIsFulfilledWith(returnedPromise, 1)\n  })\n})\n\ntest(() => {\n  mockExecution(({ tick }) => {\n    const fn = (value) => value\n    const { promise, reject } = createPromiseAndHooks()\n    const returnedPromise = enqueueCall(fn)(promise)\n\n    assertPromiseIsPending(returnedPromise)\n    reject(1)\n    tick()\n    assertPromiseIsRejectedWith(returnedPromise, 1)\n  })\n})\n\n// un appel attends la résolution de tout autre appel en cours\ntest(() => {\n  mockExecution(({ tick }) => {\n    const debounced = enqueueCall((promise, value) => promise.then(() => value))\n    const firstPromise = createPromiseAndHooks()\n    const firstCallPromise = debounced(firstPromise.promise, 1)\n    const secondPromise = createPromiseAndHooks()\n    const secondCallPromise = debounced(secondPromise.promise, 2)\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    firstPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    secondPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n\n// un appel atttends la fin de la résolution de tout autre appel ayant les \"même\" arguments\ntest(() => {\n  mockExecution(({ tick }) => {\n    const fn = (promise, value) => promise.then(() => value)\n    const debounced = enqueueCallByArgs(fn)\n\n    const firstPromise = createPromiseAndHooks()\n    const secondPromise = createPromiseAndHooks()\n\n    const firstCallPromise = debounced(firstPromise.promise, 1)\n    const secondCallPromise = debounced(secondPromise.promise, 2)\n    const thirdCallPromise = debounced(firstPromise.promise, 3)\n\n    assertPromiseIsPending(firstCallPromise)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsPending(thirdCallPromise)\n    firstPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(firstCallPromise, 1)\n    assertPromiseIsPending(secondCallPromise)\n    assertPromiseIsFulfilledWith(thirdCallPromise, 3)\n    secondPromise.resolve()\n    tick()\n    assertPromiseIsFulfilledWith(secondCallPromise, 2)\n  })\n})\n"]}