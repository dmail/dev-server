{
  "version": 3,
  "sources": [
    "../../src/memoize.js"
  ],
  "names": [
    "createStore",
    "compare",
    "args",
    "savedArgs",
    "length",
    "every",
    "savedArg",
    "index",
    "arg",
    "maxLength",
    "transform",
    "v",
    "entries",
    "restore",
    "foundEntry",
    "find",
    "has",
    "Boolean",
    "value",
    "undefined",
    "save",
    "shift",
    "push",
    "memoize",
    "fn",
    "Promise",
    "resolve",
    "then",
    "freshValue",
    "memoizeSync"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export const createStore = (\n  {\n    compare = (args, savedArgs) => {\n      if (savedArgs.length !== args.length) {\n        return false\n      }\n      return savedArgs.every((savedArg, index) => {\n        const arg = args[index]\n        if (arg !== savedArg) {\n          // should be a bit more powerfull to compare shallow here\n          return false\n        }\n        return true\n      })\n    },\n    maxLength = 100,\n    transform = (v) => v,\n  } = {},\n) => {\n  const entries = []\n\n  const restore = (...args) => {\n    const foundEntry = entries.find(({ savedArgs }) => compare(args, savedArgs))\n    return {\n      has: Boolean(foundEntry),\n      value: foundEntry ? foundEntry.value : undefined,\n    }\n  }\n\n  const save = (value, ...args) => {\n    if (entries.length >= maxLength) {\n      entries.shift()\n    }\n    entries.push({ value, savedArgs: args })\n  }\n\n  return {\n    restore,\n    save,\n    transform,\n  }\n}\n\nexport const memoize = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    return Promise.resolve(restore(...args)).then(({ has, value }) => {\n      if (has) {\n        return transform(value, ...args)\n      }\n      const freshValue = fn(...args)\n      save(freshValue, ...args)\n      return transform(freshValue, ...args)\n    })\n  }\n}\n\nexport const memoizeSync = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    const { has, value } = restore(...args)\n    if (has) {\n      return transform(value, ...args)\n    }\n    const freshValue = fn(...args)\n    save(freshValue, ...args)\n    return transform(freshValue, ...args)\n  }\n}\n"
  ]
}