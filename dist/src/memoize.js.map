{
  "version": 3,
  "sources": [
    "../../src/memoize.js"
  ],
  "names": [
    "createStore",
    "compare",
    "args",
    "savedArgs",
    "length",
    "every",
    "savedArg",
    "index",
    "arg",
    "maxLength",
    "transform",
    "v",
    "entries",
    "restore",
    "foundEntry",
    "find",
    "has",
    "Boolean",
    "value",
    "undefined",
    "save",
    "shift",
    "push",
    "memoize",
    "fn",
    "Promise",
    "resolve",
    "then",
    "freshValue",
    "memoizeSync"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export const createStore = (\n  {\n    compare = (args, savedArgs) => {\n      if (savedArgs.length !== args.length) {\n        return false\n      }\n      return savedArgs.every((savedArg, index) => {\n        const arg = args[index]\n        if (arg !== savedArg) {\n          // should be a bit more powerfull to compare shallow here\n          return false\n        }\n        return true\n      })\n    },\n    maxLength = 100,\n    transform = (v) => v,\n  } = {},\n) => {\n  const entries = []\n\n  const restore = (...args) => {\n    const foundEntry = entries.find(({ savedArgs }) => compare(args, savedArgs))\n    return {\n      has: Boolean(foundEntry),\n      value: foundEntry ? foundEntry.value : undefined,\n    }\n  }\n\n  const save = (value, ...args) => {\n    if (entries.length >= maxLength) {\n      entries.shift()\n    }\n    entries.push({ value, savedArgs: args })\n  }\n\n  return {\n    restore,\n    save,\n    transform,\n  }\n}\n\nexport const memoize = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    return Promise.resolve(restore(...args)).then(({ has, value }) => {\n      if (has) {\n        return transform(value, ...args)\n      }\n      const freshValue = fn(...args)\n      save(freshValue, ...args)\n      return transform(freshValue, ...args)\n    })\n  }\n}\n\nexport const memoizeSync = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    const { has, value } = restore(...args)\n    if (has) {\n      return transform(value, ...args)\n    }\n    const freshValue = fn(...args)\n    save(freshValue, ...args)\n    return transform(freshValue, ...args)\n  }\n}\n"
  ]
}