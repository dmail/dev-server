{"version":3,"sources":["../../src/memoize.js"],"names":["createStore","compare","args","savedArgs","length","every","savedArg","index","arg","maxLength","transform","v","entries","restore","foundEntry","find","has","Boolean","value","undefined","save","shift","push","memoize","fn","Promise","resolve","then","freshValue","memoizeSync"],"mappings":"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","file":"memoize.js","sourcesContent":["export const createStore = (\n  {\n    compare = (args, savedArgs) => {\n      if (savedArgs.length !== args.length) {\n        return false\n      }\n      return savedArgs.every((savedArg, index) => {\n        const arg = args[index]\n        if (arg !== savedArg) {\n          // should be a bit more powerfull to compare shallow here\n          return false\n        }\n        return true\n      })\n    },\n    maxLength = 100,\n    transform = (v) => v,\n  } = {},\n) => {\n  const entries = []\n\n  const restore = (...args) => {\n    const foundEntry = entries.find(({ savedArgs }) => compare(args, savedArgs))\n    return {\n      has: Boolean(foundEntry),\n      value: foundEntry ? foundEntry.value : undefined,\n    }\n  }\n\n  const save = (value, ...args) => {\n    if (entries.length >= maxLength) {\n      entries.shift()\n    }\n    entries.push({ value, savedArgs: args })\n  }\n\n  return {\n    restore,\n    save,\n    transform,\n  }\n}\n\nexport const memoize = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    return Promise.resolve(restore(...args)).then(({ has, value }) => {\n      if (has) {\n        return transform(value, ...args)\n      }\n      const freshValue = fn(...args)\n      save(freshValue, ...args)\n      return transform(freshValue, ...args)\n    })\n  }\n}\n\nexport const memoizeSync = (fn, { restore, save, transform } = createStore()) => {\n  return (...args) => {\n    const { has, value } = restore(...args)\n    if (has) {\n      return transform(value, ...args)\n    }\n    const freshValue = fn(...args)\n    save(freshValue, ...args)\n    return transform(freshValue, ...args)\n  }\n}\n"]}