{"version":3,"sources":["../../../src/openBrowserServer/openBrowserServer.js"],"names":["getClientScript","compileURL","url","fileRelativeToRoot","pathname","slice","openBrowserServer","root","port","rootLocation","then","server","console","log","runServer","addRequestHandler","request","script","html","status","headers","Buffer","byteLength","body"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,OAAyB;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAC/C,MAAMC,qBAAqBD,IAAIE,QAAJ,CAAaC,KAAb,CAAmB,CAAnB,CAA3B;;AAEA,qCAAgCJ,UAAhC,SAA8CE,kBAA9C;AACD,CAJD;;AAMO,IAAMG,gDAAoB,SAApBA,iBAAoB,QAAwB;AAAA,MAArBC,IAAqB,SAArBA,IAAqB;AAAA,yBAAfC,IAAe;AAAA,MAAfA,IAAe,8BAAR,CAAQ;;AACvD,SAAO,0CAAkB;AACvBN,6BADuB;AAEvBO,kBAAcF;AAFS,GAAlB,EAGJG,IAHI,CAGC,UAACC,MAAD,EAAY;AAClBC,YAAQC,GAAR,gBAAyBN,IAAzB,YAAoCI,OAAOT,GAA3C;AACA,WAAO,4BAAW,EAAEA,2BAAyBM,IAA3B,EAAX,EAAgDE,IAAhD,CAAqD,UAACI,SAAD,EAAe;AACzEA,gBAAUC,iBAAV,CAA4B,UAACC,OAAD,EAAa;AACvC,YAAIA,QAAQd,GAAR,CAAYE,QAAZ,KAAyB,GAA7B,EAAkC;AAChC;AACA;AACD;;AAED,eAAO,gDAAqB;AAC1Ba,kBAAQjB,gBAAgB,EAAEC,YAAYU,OAAOV,UAArB,EAAiCC,KAAKc,QAAQd,GAA9C,EAAhB;AADkB,SAArB,EAEJQ,IAFI,CAEC,UAACQ,IAAD,EAAU;AAChB,iBAAO;AACLC,oBAAQ,GADH;AAELC,qBAAS;AACP,8BAAgB,WADT;AAEP,gCAAkBC,OAAOC,UAAP,CAAkBJ,IAAlB,CAFX;AAGP,+BAAiB;AAHV,aAFJ;AAOLK,kBAAML;AAPD,WAAP;AASD,SAZM,CAAP;AAaD,OAnBD;;AAqBAN,cAAQC,GAAR,gBAAyBN,IAAzB,YAAoCO,UAAUZ,GAA9C;;AAEA,aAAOY,SAAP;AACD,KAzBM,CAAP;AA0BD,GA/BM,CAAP;AAgCD,CAjCM","file":"openBrowserServer.js","sourcesContent":["import { openCompileServer } from \"../openCompileServer/openCompileServer.js\"\nimport { openServer } from \"../openServer/openServer.js\"\nimport { createHTMLForBrowser } from \"../createHTMLForBrowser.js\"\n\nconst getClientScript = ({ compileURL, url }) => {\n  const fileRelativeToRoot = url.pathname.slice(1)\n\n  return `window.System.import(\"${compileURL}/${fileRelativeToRoot}\")`\n}\n\nexport const openBrowserServer = ({ root, port = 0 }) => {\n  return openCompileServer({\n    url: `http://127.0.0.1:0`,\n    rootLocation: root,\n  }).then((server) => {\n    console.log(`compiling ${root} at ${server.url}`)\n    return openServer({ url: `http://127.0.0.1:${port}` }).then((runServer) => {\n      runServer.addRequestHandler((request) => {\n        if (request.url.pathname === \"/\") {\n          // on voudrait ptet servir du html\n          // pour expliquer comment run les fichier etc\n        }\n\n        return createHTMLForBrowser({\n          script: getClientScript({ compileURL: server.compileURL, url: request.url }),\n        }).then((html) => {\n          return {\n            status: 200,\n            headers: {\n              \"content-type\": \"text/html\",\n              \"content-length\": Buffer.byteLength(html),\n              \"cache-control\": \"no-store\",\n            },\n            body: html,\n          }\n        })\n      })\n\n      console.log(`executing ${root} at ${runServer.url}`)\n\n      return runServer\n    })\n  })\n}\n"]}