{
  "version": 3,
  "sources": [
    "../../../src/openCompileServer/createSSERoom.js"
  ],
  "names": [
    "stringifySourceEvent",
    "data",
    "type",
    "id",
    "retry",
    "string",
    "undefined",
    "createEventHistory",
    "limit",
    "events",
    "removedCount",
    "add",
    "push",
    "length",
    "shift",
    "since",
    "index",
    "parseInt",
    "isNaN",
    "TypeError",
    "slice",
    "reset",
    "createSSERoom",
    "keepaliveDuration",
    "retryDuration",
    "historyLength",
    "maxLength",
    "connections",
    "Set",
    "history",
    "lastEventId",
    "state",
    "interval",
    "connect",
    "size",
    "status",
    "joinEvent",
    "Date",
    "toLocaleTimeString",
    "connection",
    "closed",
    "listen",
    "console",
    "log",
    "delete",
    "forEach",
    "event",
    "write",
    "headers",
    "body",
    "sendEvent",
    "keepAlive",
    "open",
    "setInterval",
    "close",
    "clearInterval"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { createTwoWayStream } from \"../openServer/createConnection/index.js\"\n\n// https://github.com/dmail-old/project/commit/da7d2c88fc8273850812972885d030a22f9d7448\n// https://github.com/dmail-old/project/commit/98b3ae6748d461ac4bd9c48944a551b1128f4459\n\n// https://github.com/dmail-old/http-eventsource/blob/master/lib/event-source.js\n\n// http://html5doctor.com/server-sent-events/\nconst stringifySourceEvent = ({ data, type = \"message\", id, retry }) => {\n  let string = \"\"\n\n  if (id !== undefined) {\n    string += `id:${id}\\n`\n  }\n\n  if (retry) {\n    string += `retry:${retry}\\n`\n  }\n\n  if (type !== \"message\") {\n    string += `event:${type}\\n`\n  }\n\n  string += `data:${data}\\n\\n`\n\n  return string\n}\n\nconst createEventHistory = ({ limit } = {}) => {\n  const events = []\n  let removedCount = 0\n\n  const add = (data) => {\n    events.push(data)\n\n    if (events.length >= limit) {\n      events.shift()\n      removedCount++\n    }\n  }\n\n  const since = (index) => {\n    index = parseInt(index)\n    if (isNaN(index)) {\n      throw new TypeError(\"history.since() expect a number\")\n    }\n    index -= removedCount\n    return index < 0 ? [] : events.slice(index)\n  }\n\n  const reset = () => {\n    events.length = 0\n    removedCount = 0\n  }\n\n  return { add, since, reset }\n}\n\n// https://www.html5rocks.com/en/tutorials/eventsource/basics/\nexport const createSSERoom = (\n  {\n    keepaliveDuration = 30000,\n    retryDuration = 1000,\n    historyLength = 1000,\n    maxLength = 100, // max 100 users accepted\n  } = {},\n) => {\n  const connections = new Set()\n  const history = createEventHistory(historyLength)\n  let lastEventId = 0\n  let state = \"closed\"\n  let interval\n\n  const connect = (lastEventId) => {\n    if (connections.size > maxLength) {\n      return {\n        status: 503,\n      }\n    }\n    if (state === \"closed\") {\n      return {\n        status: 204,\n      }\n    }\n\n    const joinEvent = {\n      id: lastEventId,\n      retry: retryDuration,\n      type: \"join\",\n      data: new Date().toLocaleTimeString(),\n    }\n    lastEventId++\n    history.add(joinEvent)\n\n    const events = [\n      joinEvent,\n      // send events which occured between lastEventId & now\n      ...(lastEventId === undefined ? [] : history.since(lastEventId)),\n    ]\n\n    const connection = createTwoWayStream()\n    connections.add(connection)\n    connection.closed.listen(() => {\n      console.log(\n        `client disconnected, number of client connected to event source: ${connections.size}`,\n      )\n      connections.delete(connection)\n    })\n\n    console.log(\n      `client joined, number of client connected to event source: ${\n        connections.size\n      }, max allowed: ${maxLength}`,\n    )\n\n    events.forEach((event) => {\n      console.log(`send ${event.type} event to this new client`)\n      connection.write(stringifySourceEvent(event))\n    })\n\n    return {\n      status: 200,\n      headers: {\n        \"content-type\": \"text/event-stream\",\n        \"cache-control\": \"no-cache\",\n        connection: \"keep-alive\",\n      },\n      body: connection,\n    }\n  }\n\n  const write = (data) => {\n    connections.forEach((connection) => {\n      connection.write(data)\n    })\n  }\n\n  const sendEvent = (event) => {\n    if (event.type !== \"comment\") {\n      console.log(\n        `send ${event.type} event, number of client listening event source: ${connections.size}`,\n      )\n      event.id = lastEventId\n      lastEventId++\n      history.add(event)\n    }\n\n    write(stringifySourceEvent(event))\n  }\n\n  const keepAlive = () => {\n    // maybe that, when an event occurs, we can delay the keep alive event\n    console.log(\n      `send keep alive event, number of client listening event source: ${connections.size}`,\n    )\n    sendEvent({\n      type: \"comment\",\n      data: new Date().toLocaleTimeString(),\n    })\n  }\n\n  const open = () => {\n    interval = setInterval(keepAlive, keepaliveDuration)\n    state = \"opened\"\n  }\n\n  const close = () => {\n    connections.forEach((connection) => connection.close())\n    clearInterval(interval)\n    history.reset()\n    state = \"closed\"\n  }\n\n  return { open, close, connect, sendEvent }\n}\n"
  ]
}