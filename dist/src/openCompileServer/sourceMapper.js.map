{"version":3,"sources":["../../../src/openCompileServer/sourceMapper.js"],"names":["writeSourceMapLocation","code","location","writeSourceMapBase64","map","mapAsBase64","Buffer","JSON","stringify","toString","writeSourceMapComment","name","rootLocation","compiledFolderRelativeLocation","inputRelativeLocation","outputRelativeLocation","clientLocation","resolve","serverLocation","relativeLocation","relative","sourceMapper","context","rest","sourceMapLocation","basename","mapName"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACrD,SAAUD,IAAV,+BACqBC,QADrB;AAED,CAHD;;AAKA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACF,IAAD,EAAOG,GAAP,EAAe;AAC1C,MAAMC,cAAc,IAAIC,MAAJ,CAAWC,KAAKC,SAAL,CAAeJ,GAAf,CAAX,EAAgCK,QAAhC,CAAyC,QAAzC,CAApB;AACA,SAAOT,uBAAuB;AAC5BC,cAD4B;AAE5BC,8DAAwDG;AAF5B,GAAvB,CAAP;AAID,CAND;;AAQA,IAAMK,wBAAwB,SAAxBA,qBAAwB,CAC5BT,IAD4B,EAE5BU,IAF4B,EAEtB;AAFsB,OAIzB;AAAA,MADDC,YACC,SADDA,YACC;AAAA,MADaC,8BACb,SADaA,8BACb;AAAA,MAD6CC,qBAC7C,SAD6CA,qBAC7C;AAAA,MADoEC,sBACpE,SADoEA,sBACpE;;AACH;AACA,MAAMC,iBAAiB,kBAAKC,OAAL,CACrBL,YADqB,EAElBC,8BAFkB,SAEgBC,qBAFhB,UAAvB;AAIA;AACA,MAAMI,iBAAoB,kBAAKD,OAAL,CAAaL,YAAb,EAA2BG,sBAA3B,CAApB,SAAN;AACA;AACA,MAAMI,mBAAmB,kBAAKC,QAAL,CAAcJ,cAAd,EAA8BE,cAA9B,CAAzB;;AAEA,SAAOlB,uBAAuB,EAAEC,UAAF,EAAQC,UAAUiB,gBAAlB,EAAvB,CAAP;AACD,CAhBD;;AAkBO,IAAME,eAAe,SAAfA,YAAe,eAAgDC,OAAhD,EAA4D;AAAA,MAAzDrB,IAAyD,SAAzDA,IAAyD;AAAA,MAAnDG,GAAmD,SAAnDA,GAAmD;AAAA,MAA3CmB,IAA2C;;AAAA,MAAjCC,iBAAiC,SAAjCA,iBAAiC;;AACtF,MAAI,OAAOpB,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAIoB,sBAAsB,QAA1B,EAAoC;AAClC;AACEvB,cAAME,qBAAqBF,IAArB,EAA2BG,GAA3B,EAAgCkB,OAAhC,CADR;AAEElB;AAFF,SAGKmB,IAHL;AAKD;AACD,QAAIC,sBAAsB,SAA1B,EAAqC;AACnC;AACA,UAAMb,OAAU,kBAAKc,QAAL,CAAcH,QAAQR,qBAAtB,CAAV,SAAN;;AAEA;AACEb,cAAMS,sBAAsBT,IAAtB,EAA4BU,IAA5B,EAAkCW,OAAlC,CADR;AAEElB,gBAFF;AAGEsB,iBAASf;AAHX,SAIKY,IAJL;AAMD;AACF;;AAED,oBAAStB,UAAT,EAAeG,QAAf,IAAuBmB,IAAvB;AACD,CA/BM","file":"sourceMapper.js","sourcesContent":["import path from \"path\"\n\nconst writeSourceMapLocation = ({ code, location }) => {\n  return `${code}\n//# sourceMappingURL=${location}`\n}\n\nconst writeSourceMapBase64 = (code, map) => {\n  const mapAsBase64 = new Buffer(JSON.stringify(map)).toString(\"base64\")\n  return writeSourceMapLocation({\n    code,\n    location: `data:application/json;charset=utf-8;base64,${mapAsBase64}`,\n  })\n}\n\nconst writeSourceMapComment = (\n  code,\n  name, // TODO: use this argument instead of appending .map on clientLocation & serverLocation\n  { rootLocation, compiledFolderRelativeLocation, inputRelativeLocation, outputRelativeLocation },\n) => {\n  // client thinks we are at compiled/folder/file.js\n  const clientLocation = path.resolve(\n    rootLocation,\n    `${compiledFolderRelativeLocation}/${inputRelativeLocation}.map`,\n  )\n  // but the file is at build/folder/file.js/sjklqdjkljkljlk/file.js\n  const serverLocation = `${path.resolve(rootLocation, outputRelativeLocation)}.map`\n  // so client can found it at ../../build/folder/file.js/sjklqdjkljkljlk/file.js.map\n  const relativeLocation = path.relative(clientLocation, serverLocation)\n\n  return writeSourceMapLocation({ code, location: relativeLocation })\n}\n\nexport const sourceMapper = ({ code, map, ...rest }, { sourceMapLocation }, context) => {\n  if (typeof map === \"object\") {\n    // delete map.sourcesContent\n    // we could remove sources content, they can be fetched from server\n    // removing them will decrease size of sourceMap BUT force\n    // the client to fetch the source resulting in an additional http request\n\n    // we could delete map.sourceRoot to ensure clientLocation is absolute\n    // but it's not set anyway because not passed to babel during compilation\n\n    if (sourceMapLocation === \"inline\") {\n      return {\n        code: writeSourceMapBase64(code, map, context),\n        map,\n        ...rest,\n      }\n    }\n    if (sourceMapLocation === \"comment\") {\n      // folder/file.js -> file.js.map\n      const name = `${path.basename(context.inputRelativeLocation)}.map`\n\n      return {\n        code: writeSourceMapComment(code, name, context),\n        map,\n        mapName: name,\n        ...rest,\n      }\n    }\n  }\n\n  return { code, map, ...rest }\n}\n"]}