{"version":3,"sources":["../../../src/openCompileServer/transformer.js"],"names":["detectModuleFormat","input","format","detect","transformer","code","map","ast","sourceMap","inputRelativeLocation","inputModuleFormat","endsWith","outputModuleFormat","moduleOptions","babelOptions","filenameRelative","sourceMaps","inputSourceMap","babelrc","babelConfig"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;;;;;AAEA,IAAMA,qBAAqB,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpC,MAAMC,SAAS,6BAAcC,MAAd,CAAqBF,KAArB,CAAf;AACA,MAAIC,WAAW,IAAf,EAAqB;AACnB,WAAO,IAAP;AACD;AACD,MAAIA,WAAW,KAAf,EAAsB;AACpB,WAAO,KAAP;AACD;AACD,MAAIA,WAAW,KAAf,EAAsB;AACpB,WAAO,KAAP;AACD;AACD,SAAO,QAAP;AACD,CAZD;;AAcO,IAAME,oCAAc,SAAdA,WAAc,qBAAkE;AAAA,MAA/DC,IAA+D,QAA/DA,IAA+D;AAAA,MAAzDC,GAAyD,QAAzDA,GAAyD;AAAA,MAApDC,GAAoD,QAApDA,GAAoD;AAAA,MAA3CC,SAA2C,SAA3CA,SAA2C;AAAA,MAA5BC,qBAA4B,SAA5BA,qBAA4B;;AAC3F;AACA,MAAMC,oBAAoBD,sBAAsBE,QAAtB,CAA+B,MAA/B,IAAyC,IAAzC,GAAgDX,mBAAmBK,IAAnB,CAA1E;AACA,MAAMO,qBAAqB,UAA3B;AACA,MAAMC,gBAAgB,gCAAoB,EAAEH,oCAAF,EAAqBE,sCAArB,EAApB,CAAtB;;AAEA,MAAME,eAAe,yBAAaD,aAAb,EAA4B,iCAA5B,EAAmD;AACtEE,sBAAkBN,qBADoD;AAEtEO,gBAAYR,cAAc,MAF4C;AAGtES,oBAAgBX,GAHsD;AAItEY,aAAS,KAJ6D,EAItD;AAChBX,SAAK;AALiE,GAAnD,CAArB;AAOA,MAAMY,cAAc,yBAAaL,YAAb,CAApB;;AAEA,MAAIP,GAAJ,EAAS;AACP,WAAO,iCAAiBA,GAAjB,EAAsBF,IAAtB,EAA4Bc,WAA5B,CAAP;AACD;AACD,SAAO,0BAAUd,IAAV,EAAgBc,WAAhB,CAAP;AACD,CAnBM","file":"transformer.js","sourcesContent":["import {\n  createConfig,\n  createModuleOptions,\n  createSyntaxOptions,\n  mergeOptions,\n} from \"@dmail/shared-config/dist/babel\"\nimport { transform, transformFromAst } from \"babel-core\"\nimport moduleFormats from \"js-module-formats\"\n\nconst detectModuleFormat = (input) => {\n  const format = moduleFormats.detect(input)\n  if (format === \"es\") {\n    return \"es\"\n  }\n  if (format === \"cjs\") {\n    return \"cjs\"\n  }\n  if (format === \"amd\") {\n    return \"amd\"\n  }\n  return \"global\"\n}\n\nexport const transformer = ({ code, map, ast }, { sourceMap }, { inputRelativeLocation }) => {\n  // https://babeljs.io/docs/core-packages/#options\n  const inputModuleFormat = inputRelativeLocation.endsWith(\".mjs\") ? \"es\" : detectModuleFormat(code)\n  const outputModuleFormat = \"systemjs\"\n  const moduleOptions = createModuleOptions({ inputModuleFormat, outputModuleFormat })\n\n  const babelOptions = mergeOptions(moduleOptions, createSyntaxOptions(), {\n    filenameRelative: inputRelativeLocation,\n    sourceMaps: sourceMap !== \"none\",\n    inputSourceMap: map,\n    babelrc: false, // trust only these options, do not read any babelrc config file\n    ast: true,\n  })\n  const babelConfig = createConfig(babelOptions)\n\n  if (ast) {\n    return transformFromAst(ast, code, babelConfig)\n  }\n  return transform(code, babelConfig)\n}\n"]}