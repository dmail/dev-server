{
  "version": 3,
  "sources": [
    "../../../src/openNodeClient/client.js"
  ],
  "names": [
    "forceEnumerable",
    "value",
    "undefined",
    "enumerableValue",
    "Object",
    "getOwnPropertyNames",
    "forEach",
    "name",
    "descriptor",
    "getOwnPropertyDescriptor",
    "defineProperty",
    "enumerable",
    "hasOwnProperty",
    "process",
    "on",
    "type",
    "id",
    "data",
    "remoteRoot",
    "localRoot",
    "file",
    "setupSource",
    "teardownSource",
    "Promise",
    "resolve",
    "then",
    "eval",
    "import",
    "send",
    "code",
    "reason"
  ],
  "mappings": ";;AAAA;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,MAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAAjC,IAAyC,QAAOA,KAAP,MAAiB,QAA9D,EAAwE;AACtE,WAAOA,KAAP;AACD;;AAED,MAAME,eAAe,GAAG,EAAxB;AACAC,EAAAA,MAAM,CAACC,mBAAP,CAA2BJ,KAA3B,EAAkCK,OAAlC,CAA0C,UAACC,IAAD,EAAU;AAClD,QAAMC,UAAU,GAAGJ,MAAM,CAACK,wBAAP,CAAgCR,KAAhC,EAAuCM,IAAvC,CAAnB;AAEAH,IAAAA,MAAM,CAACM,cAAP,CAAsBP,eAAtB,EAAuCI,IAAvC,oBACKC,UADL,EAEK;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAFL,EAGMH,UAAU,CAACI,cAAX,CAA0B,OAA1B,IAAqC;AAAEX,MAAAA,KAAK,EAAED,eAAe,CAACQ,UAAU,CAACP,KAAZ;AAAxB,KAArC,GAAoF,EAH1F;AAKD,GARD;AAUA,SAAOE,eAAP;AACD,CAjBD;;AAmBAU,OAAO,CAACC,EAAR,CAAW,SAAX,EAAsB,gBAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,EAAe,QAAfA,EAAe;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAC5C,MAAIF,IAAI,KAAK,SAAb,EAAwB;AAAA,QACdG,UADc,GAC+CD,IAD/C,CACdC,UADc;AAAA,QACFC,SADE,GAC+CF,IAD/C,CACFE,SADE;AAAA,QACSC,IADT,GAC+CH,IAD/C,CACSG,IADT;AAAA,QACeC,WADf,GAC+CJ,IAD/C,CACeI,WADf;AAAA,QAC4BC,cAD5B,GAC+CL,IAD/C,CAC4BK,cAD5B;AAGtBC,IAAAA,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,EACGK,IADH,CACQC,IAAI,CAACL,WAAD,CADZ,EAEGI,IAFH,CAEQ,YAAM;AACV,aAAO,gCAAa;AAAEP,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,SAAS,EAATA;AAAd,OAAb,EACJQ,MADI,CACGP,IADH,EAEJK,IAFI,CAECC,IAAI,CAACJ,cAAD,CAFL,CAAP;AAGD,KANH,EAOGG,IAPH,CAQI,UAACxB,KAAD,EAAW;AACTY,MAAAA,OAAO,CAACe,IAAR,CAAa;AACXZ,QAAAA,EAAE,EAAFA,EADW;AAEXD,QAAAA,IAAI,EAAE,gBAFK;AAGXE,QAAAA,IAAI,EAAE;AACJY,UAAAA,IAAI,EAAE,CADF;AAEJ5B,UAAAA,KAAK,EAALA;AAFI;AAHK,OAAb;AAQD,KAjBL,EAkBI,UAAC6B,MAAD,EAAY;AACV;AACA;AACA;AACA;AACAjB,MAAAA,OAAO,CAACe,IAAR,CAAa;AACXZ,QAAAA,EAAE,EAAFA,EADW;AAEXD,QAAAA,IAAI,EAAE,gBAFK;AAGXE,QAAAA,IAAI,EAAE;AACJY,UAAAA,IAAI,EAAE,CADF;AAEJ5B,UAAAA,KAAK,EAAED,eAAe,CAAC8B,MAAD;AAFlB;AAHK,OAAb;AAQD,KA/BL;AAiCD;AACF,CAtCD",
  "sourcesContent": [
    "import { ensureSystem } from \"./ensureSystem.js\"\n\nconst forceEnumerable = (value) => {\n  if (value === undefined || value === null || typeof value !== \"object\") {\n    return value\n  }\n\n  const enumerableValue = {}\n  Object.getOwnPropertyNames(value).forEach((name) => {\n    const descriptor = Object.getOwnPropertyDescriptor(value, name)\n\n    Object.defineProperty(enumerableValue, name, {\n      ...descriptor,\n      ...{ enumerable: true },\n      ...(descriptor.hasOwnProperty(\"value\") ? { value: forceEnumerable(descriptor.value) } : {}),\n    })\n  })\n\n  return enumerableValue\n}\n\nprocess.on(\"message\", ({ type, id, data }) => {\n  if (type === \"execute\") {\n    const { remoteRoot, localRoot, file, setupSource, teardownSource } = data\n\n    Promise.resolve(file)\n      .then(eval(setupSource))\n      .then(() => {\n        return ensureSystem({ remoteRoot, localRoot })\n          .import(file)\n          .then(eval(teardownSource))\n      })\n      .then(\n        (value) => {\n          process.send({\n            id,\n            type: \"execute-result\",\n            data: {\n              code: 0,\n              value,\n            },\n          })\n        },\n        (reason) => {\n          // process.send algorithm does not send non enumerable values\n          // but for error.message, error.stack we would like to get them\n          // se we force all object properties to be enumerable\n          // we could use @dmail/uneval here instead, for now let's keep it simple\n          process.send({\n            id,\n            type: \"execute-result\",\n            data: {\n              code: 1,\n              value: forceEnumerable(reason),\n            },\n          })\n        },\n      )\n  }\n})\n"
  ]
}