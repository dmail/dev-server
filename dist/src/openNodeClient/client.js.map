{"version":3,"sources":["../../../src/openNodeClient/client.js"],"names":["forceEnumerable","value","undefined","enumerableValue","Object","getOwnPropertyNames","forEach","name","descriptor","getOwnPropertyDescriptor","defineProperty","enumerable","hasOwnProperty","process","on","type","id","data","remoteRoot","localRoot","file","setupSource","teardownSource","Promise","resolve","then","eval","send","code","reason"],"mappings":";;;;AAAA;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,MAAIA,UAAUC,SAAV,IAAuBD,UAAU,IAAjC,IAAyC,OAAOA,KAAP,KAAiB,QAA9D,EAAwE;AACtE,WAAOA,KAAP;AACD;;AAED,MAAME,kBAAkB,EAAxB;AACAC,SAAOC,mBAAP,CAA2BJ,KAA3B,EAAkCK,OAAlC,CAA0C,UAACC,IAAD,EAAU;AAClD,QAAMC,aAAaJ,OAAOK,wBAAP,CAAgCR,KAAhC,EAAuCM,IAAvC,CAAnB;;AAEAH,WAAOM,cAAP,CAAsBP,eAAtB,EAAuCI,IAAvC,eACKC,UADL,EAEK,EAAEG,YAAY,IAAd,EAFL,EAGMH,WAAWI,cAAX,CAA0B,OAA1B,IAAqC,EAAEX,OAAOD,gBAAgBQ,WAAWP,KAA3B,CAAT,EAArC,GAAoF,EAH1F;AAKD,GARD;;AAUA,SAAOE,eAAP;AACD,CAjBD;;AAmBAU,QAAQC,EAAR,CAAW,SAAX,EAAsB,gBAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,EAAe,QAAfA,EAAe;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAC5C,MAAIF,SAAS,SAAb,EAAwB;AAAA,QACdG,UADc,GAC+CD,IAD/C,CACdC,UADc;AAAA,QACFC,SADE,GAC+CF,IAD/C,CACFE,SADE;AAAA,QACSC,IADT,GAC+CH,IAD/C,CACSG,IADT;AAAA,QACeC,WADf,GAC+CJ,IAD/C,CACeI,WADf;AAAA,QAC4BC,cAD5B,GAC+CL,IAD/C,CAC4BK,cAD5B;;;AAGtBC,YAAQC,OAAR,CAAgBJ,IAAhB,EACGK,IADH,CACQC,KAAKL,WAAL,CADR,EAEGI,IAFH,CAEQ,YAAM;AACV,aAAO,gCAAa,EAAEP,sBAAF,EAAcC,oBAAd,EAAb,YACGC,IADH,EAEJK,IAFI,CAECC,KAAKJ,cAAL,CAFD,CAAP;AAGD,KANH,EAOGG,IAPH,CAQI,UAACxB,KAAD,EAAW;AACTY,cAAQc,IAAR,CAAa;AACXX,cADW;AAEXD,cAAM,gBAFK;AAGXE,cAAM;AACJW,gBAAM,CADF;AAEJ3B;AAFI;AAHK,OAAb;AAQD,KAjBL,EAkBI,UAAC4B,MAAD,EAAY;AACV;AACA;AACA;AACA;AACAhB,cAAQc,IAAR,CAAa;AACXX,cADW;AAEXD,cAAM,gBAFK;AAGXE,cAAM;AACJW,gBAAM,CADF;AAEJ3B,iBAAOD,gBAAgB6B,MAAhB;AAFH;AAHK,OAAb;AAQD,KA/BL;AAiCD;AACF,CAtCD","file":"client.js","sourcesContent":["import { ensureSystem } from \"./ensureSystem.js\"\n\nconst forceEnumerable = (value) => {\n  if (value === undefined || value === null || typeof value !== \"object\") {\n    return value\n  }\n\n  const enumerableValue = {}\n  Object.getOwnPropertyNames(value).forEach((name) => {\n    const descriptor = Object.getOwnPropertyDescriptor(value, name)\n\n    Object.defineProperty(enumerableValue, name, {\n      ...descriptor,\n      ...{ enumerable: true },\n      ...(descriptor.hasOwnProperty(\"value\") ? { value: forceEnumerable(descriptor.value) } : {}),\n    })\n  })\n\n  return enumerableValue\n}\n\nprocess.on(\"message\", ({ type, id, data }) => {\n  if (type === \"execute\") {\n    const { remoteRoot, localRoot, file, setupSource, teardownSource } = data\n\n    Promise.resolve(file)\n      .then(eval(setupSource))\n      .then(() => {\n        return ensureSystem({ remoteRoot, localRoot })\n          .import(file)\n          .then(eval(teardownSource))\n      })\n      .then(\n        (value) => {\n          process.send({\n            id,\n            type: \"execute-result\",\n            data: {\n              code: 0,\n              value,\n            },\n          })\n        },\n        (reason) => {\n          // process.send algorithm does not send non enumerable values\n          // but for error.message, error.stack we would like to get them\n          // se we force all object properties to be enumerable\n          // we could use @dmail/uneval here instead, for now let's keep it simple\n          process.send({\n            id,\n            type: \"execute-result\",\n            data: {\n              code: 1,\n              value: forceEnumerable(reason),\n            },\n          })\n        },\n      )\n  }\n})\n"]}