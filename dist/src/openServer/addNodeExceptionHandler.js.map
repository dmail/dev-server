{"version":3,"sources":["../../../src/openServer/addNodeExceptionHandler.js"],"names":["exceptionEmitter","resolve","reject","recoverManualPromise","Promise","res","rej","visitor","param","recoverListenerPromise","value","race","createAddExceptionHandler","install","exceptionSignal","emitter","recursed","emitExecution","args","console","error","installer","isEmitting","getEmitExecution","emit","disableWhileCalling","triggerException","exception","then","recovered","otherException","recoverWhen","match","getArguments","listen","addNodeExceptionHandler","onError","onUnhandledRejection","promise","origin","onRejectionHandled","process","on","removeListener"],"mappings":"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","file":"addNodeExceptionHandler.js","sourcesContent":["import { createSignal, someAsyncListenerResolvesWith } from \"@dmail/signal\"\n\nconst exceptionEmitter = () => {\n  let resolve\n  let reject\n  const recoverManualPromise = new Promise((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n\n  const visitor = (param) => {\n    const recoverListenerPromise = someAsyncListenerResolvesWith((value) => value === true)(param)\n    return Promise.race([recoverManualPromise, recoverListenerPromise])\n  }\n\n  return { visitor, resolve, reject }\n}\n\nconst createAddExceptionHandler = ({ install }) => {\n  const exceptionSignal = createSignal({\n    emitter: exceptionEmitter,\n    recursed: ({ emitExecution, args }) => {\n      console.error(`${args[0].value} error occured while handling ${emitExecution.args[0]}`)\n      emitExecution.resolve(false)\n    },\n    installer: ({ isEmitting, getEmitExecution, emit, disableWhileCalling }) => {\n      const triggerException = (exception) => {\n        emit(exception).then(\n          (recovered) => {\n            if (recovered) {\n              return\n            }\n            // removeAllWhileCalling prevent catching of the next throw\n            // else the following would create an infinite loop\n            // process.on('uncaughtException', function() {\n            //     setTimeout(function() {\n            //         throw 'yo';\n            //     });\n            // });\n            disableWhileCalling(() => {\n              throw exception.value // this mess up the stack trace :'(\n            })\n          },\n          (otherException) => {\n            console.error(`${otherException} internal error occured while handling ${exception}`)\n            disableWhileCalling(() => {\n              throw exception.value\n            })\n          },\n        )\n      }\n\n      const recoverWhen = (match) => {\n        if (isEmitting()) {\n          const emitExecution = getEmitExecution()\n          if (match(...emitExecution.getArguments())) {\n            emitExecution.resolve(true)\n          }\n        }\n      }\n\n      return install({\n        triggerException,\n        recoverWhen,\n      })\n    },\n  })\n\n  return exceptionSignal.listen\n}\n\nexport const addNodeExceptionHandler = createAddExceptionHandler({\n  install: ({ triggerException, recoverWhen }) => {\n    const onError = (error) => {\n      triggerException({\n        value: error,\n      })\n    }\n\n    const onUnhandledRejection = (value, promise) => {\n      triggerException({\n        value,\n        origin: promise,\n      })\n    }\n\n    const onRejectionHandled = (promise) => {\n      recoverWhen(({ origin }) => origin === promise)\n    }\n\n    process.on(\"unhandledRejection\", onUnhandledRejection)\n    process.on(\"rejectionHandled\", onRejectionHandled)\n    process.on(\"uncaughtException\", onError)\n\n    return () => {\n      process.removeListener(\"unhandledRejection\", onUnhandledRejection)\n      process.removeListener(\"rejectionHandled\", onRejectionHandled)\n      process.removeListener(\"uncaughtException\", onError)\n    }\n  },\n})\n"]}