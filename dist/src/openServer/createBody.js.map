{"version":3,"sources":["../../../src/openServer/createBody.js"],"names":["isNodeStream","a","Stream","Writable","closeStream","stream","end","close","createTwoWayStream","buffers","length","status","promise","resolve","errored","smart","cancelled","closed","writed","error","e","emit","cancel","write","data","push","pipeTo","propagateData","propagateCancel","propagateClose","propagateError","listenOnce","forEach","buffer","listen","Object","freeze","stringToArrayBuffer","string","String","ArrayBuffer","bufferView","Uint16Array","i","charCodeAt","createBody","body","twoWayStream","fill","nodeStream","once","on","undefined","readAsString","then","join","text","arraybuffer","json","JSON","parse"],"mappings":"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","file":"createBody.js","sourcesContent":["import stream from \"stream\"\nimport { createPromiseAndHooks } from \"../promise.js\"\nimport { createSignal } from \"@dmail/signal\"\n\nconst isNodeStream = (a) => {\n  if (a instanceof stream.Stream || a instanceof stream.Writable) {\n    return true\n  }\n  return false\n}\n\nconst closeStream = (stream) => {\n  if (isNodeStream(stream)) {\n    stream.end()\n  } else {\n    stream.close()\n  }\n}\n\nconst createTwoWayStream = () => {\n  const buffers = []\n  let length = 0\n  let status = \"opened\"\n\n  const { promise, resolve } = createPromiseAndHooks()\n\n  const errored = createSignal({ smart: true })\n  const cancelled = createSignal({ smart: true })\n  const closed = createSignal({ smart: true })\n  const writed = createSignal()\n\n  const error = (e) => {\n    status = \"errored\"\n    errored.emit(e)\n    throw e\n  }\n\n  const cancel = () => {\n    if (status === \"cancelled\") {\n      return\n    }\n    status = \"cancelled\"\n    buffers.length = 0\n    length = 0\n    cancelled.emit()\n  }\n\n  const close = () => {\n    if (status === \"closed\") {\n      return\n    }\n    status = \"closed\"\n    resolve(buffers)\n    closed.emit()\n  }\n\n  const write = (data) => {\n    buffers.push(data)\n    length += data.length\n    writed.emit(data)\n  }\n\n  const pipeTo = (\n    stream,\n    {\n      propagateData = true,\n      propagateCancel = true,\n      propagateClose = true,\n      propagateError = true,\n    } = {},\n  ) => {\n    if (propagateCancel) {\n      cancelled.listenOnce(() => {\n        stream.cancel()\n      })\n    }\n    if (propagateError) {\n      errored.listenOnce((error) => {\n        stream.error(error)\n      })\n    }\n    if (propagateData) {\n      if (length) {\n        buffers.forEach((buffer) => {\n          stream.write(buffer)\n        })\n      }\n      writed.listen((buffer) => {\n        stream.write(buffer)\n      })\n    }\n    if (propagateClose) {\n      closed.listenOnce(() => {\n        closeStream(stream)\n      })\n    }\n\n    return stream\n  }\n\n  return Object.freeze({\n    error,\n    errored,\n    cancel,\n    cancelled,\n    close,\n    closed,\n    write,\n    writed,\n    pipeTo,\n    promise,\n  })\n}\n\nconst stringToArrayBuffer = (string) => {\n  string = String(string)\n  const buffer = new ArrayBuffer(string.length * 2) // 2 bytes for each char\n  const bufferView = new Uint16Array(buffer)\n  let i = 0\n  while (i < string.length) {\n    bufferView[i] = string.charCodeAt(i)\n    i++\n  }\n  return buffer\n}\n\nexport const createBody = (body) => {\n  const twoWayStream = createTwoWayStream()\n\n  const fill = (data) => {\n    if (isNodeStream(data)) {\n      const nodeStream = data\n\n      // nodeStream.resume() ?\n      nodeStream.once(\"error\", (error) => {\n        twoWayStream.error(error)\n      })\n      nodeStream.on(\"data\", (data) => {\n        twoWayStream.write(data)\n      })\n      nodeStream.once(\"end\", () => {\n        twoWayStream.close()\n      })\n    } else if (data && data.pipeTo) {\n      data.pipeTo(twoWayStream)\n    } else {\n      twoWayStream.write(data)\n      twoWayStream.close()\n    }\n  }\n\n  if (body !== undefined) {\n    fill(body)\n  }\n\n  const readAsString = () => {\n    return twoWayStream.promise.then((buffers) => buffers.join(\"\"))\n  }\n\n  const text = () => {\n    return readAsString()\n  }\n\n  const arraybuffer = () => {\n    return text().then(stringToArrayBuffer)\n  }\n\n  const json = () => {\n    return text().then(JSON.parse)\n  }\n\n  return {\n    ...twoWayStream,\n    text,\n    arraybuffer,\n    json,\n  }\n}\n"]}