{
  "version": 3,
  "sources": [
    "../../../src/openServer/createBody.js"
  ],
  "names": [
    "isNodeStream",
    "a",
    "stream",
    "Stream",
    "Writable",
    "closeStream",
    "end",
    "close",
    "createTwoWayStream",
    "buffers",
    "length",
    "status",
    "promise",
    "resolve",
    "errored",
    "smart",
    "cancelled",
    "closed",
    "writed",
    "error",
    "e",
    "emit",
    "cancel",
    "write",
    "data",
    "push",
    "pipeTo",
    "propagateData",
    "propagateCancel",
    "propagateClose",
    "propagateError",
    "listenOnce",
    "forEach",
    "buffer",
    "listen",
    "Object",
    "freeze",
    "stringToArrayBuffer",
    "string",
    "String",
    "ArrayBuffer",
    "bufferView",
    "Uint16Array",
    "i",
    "charCodeAt",
    "createBody",
    "twoWayStream",
    "undefined",
    "nodeStream",
    "once",
    "on",
    "readAsString",
    "then",
    "join",
    "text",
    "arraybuffer",
    "json",
    "JSON",
    "parse"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import stream from \"stream\"\nimport { createPromiseAndHooks } from \"../promise.js\"\nimport { createSignal } from \"@dmail/signal\"\n\nconst isNodeStream = (a) => {\n  if (a instanceof stream.Stream || a instanceof stream.Writable) {\n    return true\n  }\n  return false\n}\n\nconst closeStream = (stream) => {\n  if (isNodeStream(stream)) {\n    stream.end()\n  } else {\n    stream.close()\n  }\n}\n\nconst createTwoWayStream = () => {\n  const buffers = []\n  let length = 0\n  let status = \"opened\"\n\n  const { promise, resolve } = createPromiseAndHooks()\n\n  const errored = createSignal({ smart: true })\n  const cancelled = createSignal({ smart: true })\n  const closed = createSignal({ smart: true })\n  const writed = createSignal()\n\n  const error = (e) => {\n    status = \"errored\"\n    errored.emit(e)\n    throw e\n  }\n\n  const cancel = () => {\n    if (status === \"cancelled\") {\n      return\n    }\n    status = \"cancelled\"\n    buffers.length = 0\n    length = 0\n    cancelled.emit()\n  }\n\n  const close = () => {\n    if (status === \"closed\") {\n      return\n    }\n    status = \"closed\"\n    resolve(buffers)\n    closed.emit()\n  }\n\n  const write = (data) => {\n    buffers.push(data)\n    length += data.length\n    writed.emit(data)\n  }\n\n  const pipeTo = (\n    stream,\n    {\n      propagateData = true,\n      propagateCancel = true,\n      propagateClose = true,\n      propagateError = true,\n    } = {},\n  ) => {\n    if (propagateCancel) {\n      cancelled.listenOnce(() => {\n        stream.cancel()\n      })\n    }\n    if (propagateError) {\n      errored.listenOnce((error) => {\n        stream.error(error)\n      })\n    }\n    if (propagateData) {\n      if (length) {\n        buffers.forEach((buffer) => {\n          stream.write(buffer)\n        })\n      }\n      writed.listen((buffer) => {\n        stream.write(buffer)\n      })\n    }\n    if (propagateClose) {\n      closed.listenOnce(() => {\n        closeStream(stream)\n      })\n    }\n\n    return stream\n  }\n\n  return Object.freeze({\n    error,\n    errored,\n    cancel,\n    cancelled,\n    close,\n    closed,\n    write,\n    writed,\n    pipeTo,\n    promise,\n  })\n}\n\nconst stringToArrayBuffer = (string) => {\n  string = String(string)\n  const buffer = new ArrayBuffer(string.length * 2) // 2 bytes for each char\n  const bufferView = new Uint16Array(buffer)\n  let i = 0\n  while (i < string.length) {\n    bufferView[i] = string.charCodeAt(i)\n    i++\n  }\n  return buffer\n}\n\nexport const createBody = (data) => {\n  const twoWayStream = createTwoWayStream()\n\n  if (data !== undefined) {\n    if (isNodeStream(data)) {\n      const nodeStream = data\n\n      // nodeStream.resume() ?\n      nodeStream.once(\"error\", (error) => {\n        twoWayStream.error(error)\n      })\n      nodeStream.on(\"data\", (data) => {\n        twoWayStream.write(data)\n      })\n      nodeStream.once(\"end\", () => {\n        twoWayStream.close()\n      })\n    } else if (data && data.pipeTo) {\n      data.pipeTo(twoWayStream)\n    } else {\n      twoWayStream.write(data)\n    }\n  }\n\n  const readAsString = () => {\n    return twoWayStream.promise.then((buffers) => buffers.join(\"\"))\n  }\n\n  const text = () => {\n    return readAsString()\n  }\n\n  const arraybuffer = () => {\n    return text().then(stringToArrayBuffer)\n  }\n\n  const json = () => {\n    return text().then(JSON.parse)\n  }\n\n  return {\n    ...twoWayStream,\n    text,\n    arraybuffer,\n    json,\n  }\n}\n"
  ]
}