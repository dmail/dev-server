{
  "version": 3,
  "sources": [
    "../../../../src/openServer/createConnection/createTwoWayStream.js"
  ],
  "names": [
    "twoWayStreamSymbol",
    "Symbol",
    "for",
    "isTwoWayStream",
    "a",
    "createTwoWayStream",
    "length",
    "status",
    "promise",
    "resolve",
    "errored",
    "smart",
    "cancelled",
    "closed",
    "writed",
    "error",
    "e",
    "emit",
    "cancel",
    "smartMemory",
    "close",
    "map",
    "buffer",
    "write",
    "data",
    "Error",
    "getLength",
    "Object",
    "freeze"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AAEA,MAAMA,kBAAkB,GAAGC,MAAM,CAACC,GAAP,CAAW,cAAX,CAA3B;;AAEO,MAAMC,cAAc,GAAIC,CAAD,IAAO;AACnC,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8BJ,kBAAkB,IAAII,CAA3D;AACD,CAFM;;;;AAIA,MAAMC,kBAAkB,GAAG,MAAM;AACtC,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,QAAb;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuB,qCAA7B;AAEA,QAAMC,OAAO,GAAG,0BAAa;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAb,CAAhB;AACA,QAAMC,SAAS,GAAG,0BAAa;AAAED,IAAAA,KAAK,EAAE;AAAT,GAAb,CAAlB;AACA,QAAME,MAAM,GAAG,0BAAa;AAAEF,IAAAA,KAAK,EAAE;AAAT,GAAb,CAAf;AACA,QAAMG,MAAM,GAAG,0BAAa;AAAEH,IAAAA,KAAK,EAAE;AAAT,GAAb,CAAf;;AAEA,QAAMI,KAAK,GAAIC,CAAD,IAAO;AACnBT,IAAAA,MAAM,GAAG,SAAT;AACAG,IAAAA,OAAO,CAACO,IAAR,CAAaD,CAAb;AACA,UAAMA,CAAN;AACD,GAJD;;AAMA,QAAME,MAAM,GAAG,MAAM;AACnB,QAAIX,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AACDA,IAAAA,MAAM,GAAG,WAAT;AACAO,IAAAA,MAAM,CAACK,WAAP,CAAmBb,MAAnB,GAA4B,CAA5B;AACAA,IAAAA,MAAM,GAAG,CAAT;AACAM,IAAAA,SAAS,CAACK,IAAV;AACD,GARD;;AAUA,QAAMG,KAAK,GAAG,MAAM;AAClB,QAAIb,MAAM,KAAK,QAAf,EAAyB;AACvB;AACD;;AACDA,IAAAA,MAAM,GAAG,QAAT;AACAE,IAAAA,OAAO,CAACK,MAAM,CAACK,WAAP,CAAmBE,GAAnB,CAAuB,CAAC,CAACC,MAAD,CAAD,KAAcA,MAArC,CAAD,CAAP;AACAT,IAAAA,MAAM,CAACI,IAAP;AACD,GAPD;;AASA,QAAMM,KAAK,GAAIC,IAAD,IAAU;AACtB,QAAIjB,MAAM,KAAK,QAAf,EAAyB;AACvB,YAAM,IAAIkB,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,QAAID,IAAJ,EAAU;AACRlB,MAAAA,MAAM,IAAIkB,IAAI,CAAClB,MAAf;AACAQ,MAAAA,MAAM,CAACG,IAAP,CAAYO,IAAZ;AACD;AACF,GARD;;AAUA,QAAME,SAAS,GAAG,MAAMpB,MAAxB;;AAEA,SAAOqB,MAAM,CAACC,MAAP,CAAc;AACnB,KAAC5B,kBAAD,GAAsB,IADH;AAEnBe,IAAAA,KAFmB;AAGnBL,IAAAA,OAHmB;AAInBQ,IAAAA,MAJmB;AAKnBN,IAAAA,SALmB;AAMnBQ,IAAAA,KANmB;AAOnBP,IAAAA,MAPmB;AAQnBU,IAAAA,KARmB;AASnBT,IAAAA,MATmB;AAUnBY,IAAAA,SAVmB;AAWnBlB,IAAAA;AAXmB,GAAd,CAAP;AAaD,CA7DM",
  "sourcesContent": [
    "import { createPromiseAndHooks } from \"../../promise.js\"\nimport { createSignal } from \"@dmail/signal\"\n\nconst twoWayStreamSymbol = Symbol.for(\"twoWayStream\")\n\nexport const isTwoWayStream = (a) => {\n  return a && typeof a === \"object\" && twoWayStreamSymbol in a\n}\n\nexport const createTwoWayStream = () => {\n  let length = 0\n  let status = \"opened\"\n\n  const { promise, resolve } = createPromiseAndHooks()\n\n  const errored = createSignal({ smart: true })\n  const cancelled = createSignal({ smart: true })\n  const closed = createSignal({ smart: true })\n  const writed = createSignal({ smart: true })\n\n  const error = (e) => {\n    status = \"errored\"\n    errored.emit(e)\n    throw e\n  }\n\n  const cancel = () => {\n    if (status === \"cancelled\") {\n      return\n    }\n    status = \"cancelled\"\n    writed.smartMemory.length = 0\n    length = 0\n    cancelled.emit()\n  }\n\n  const close = () => {\n    if (status === \"closed\") {\n      return\n    }\n    status = \"closed\"\n    resolve(writed.smartMemory.map(([buffer]) => buffer))\n    closed.emit()\n  }\n\n  const write = (data) => {\n    if (status === \"closed\") {\n      throw new Error(\"write after end\")\n    }\n    if (data) {\n      length += data.length\n      writed.emit(data)\n    }\n  }\n\n  const getLength = () => length\n\n  return Object.freeze({\n    [twoWayStreamSymbol]: true,\n    error,\n    errored,\n    cancel,\n    cancelled,\n    close,\n    closed,\n    write,\n    writed,\n    getLength,\n    promise,\n  })\n}\n"
  ]
}