{
  "version": 3,
  "sources": [
    "../../../../src/openServer/createConnection/index.test.js"
  ],
  "names": [
    "getClosed",
    "body",
    "closed",
    "listen",
    "getText",
    "text",
    "writed",
    "data",
    "actual",
    "expected",
    "assert",
    "equal",
    "dataSource",
    "close",
    "console",
    "log"
  ],
  "mappings": ";;AAAA;;AACA;;;;AAEA,MAAMA,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIC,MAAM,GAAG,KAAb;AACAD,EAAAA,IAAI,CAACC,MAAL,CAAYC,MAAZ,CAAmB,MAAM;AACvBD,IAAAA,MAAM,GAAG,IAAT;AACD,GAFD;AAGA,SAAOA,MAAP;AACD,CAND;;AAQA,MAAME,OAAO,GAAIH,IAAD,IAAU;AACxB,MAAII,IAAI,GAAG,EAAX;AACAJ,EAAAA,IAAI,CAACK,MAAL,CAAYH,MAAZ,CAAoBI,IAAD,IAAU;AAC3BF,IAAAA,IAAI,IAAIE,IAAR;AACD,GAFD;AAGA,SAAOF,IAAP;AACD,CAND;;AAQA;AACE,QAAMJ,IAAI,GAAG,wBAAb,CADF,CAGE;;AACA;AACE,UAAMO,MAAM,GAAGR,SAAS,CAACC,IAAD,CAAxB;AACA,UAAMQ,QAAQ,GAAG,IAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGJ,OAAO,CAACH,IAAD,CAAtB;AACA,UAAMQ,QAAQ,GAAG,EAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AACF;AAED;AACE,QAAMR,IAAI,GAAG,uBAAW,aAAX,CAAb;AAEA;AACE,UAAMO,MAAM,GAAGR,SAAS,CAACC,IAAD,CAAxB;AACA,UAAMQ,QAAQ,GAAG,IAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AAED;AACE,UAAMD,MAAM,GAAGJ,OAAO,CAACH,IAAD,CAAtB;AACA,UAAMQ,QAAQ,GAAG,aAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AACF;AAED;AACE,QAAMG,UAAU,GAAG,gCAAnB;AACA,QAAMX,IAAI,GAAG,uBAAWW,UAAX,CAAb,CAFF,CAIE;;AACA;AACE,UAAMJ,MAAM,GAAGR,SAAS,CAACC,IAAD,CAAxB;AACA,UAAMQ,QAAQ,GAAG,KAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AAEDG,EAAAA,UAAU,CAACC,KAAX;AACA;AACE,UAAML,MAAM,GAAGR,SAAS,CAACC,IAAD,CAAxB;AACA,UAAMQ,QAAQ,GAAG,IAAjB;;AACAC,oBAAOC,KAAP,CAAaH,MAAb,EAAqBC,QAArB;AACD;AACF;AAEDK,OAAO,CAACC,GAAR,CAAY,QAAZ",
  "sourcesContent": [
    "import { createBody, createTwoWayStream } from \"./index.js\"\nimport assert from \"assert\"\n\nconst getClosed = (body) => {\n  let closed = false\n  body.closed.listen(() => {\n    closed = true\n  })\n  return closed\n}\n\nconst getText = (body) => {\n  let text = \"\"\n  body.writed.listen((data) => {\n    text += data\n  })\n  return text\n}\n\n{\n  const body = createBody()\n\n  // by default body is closed with no data\n  {\n    const actual = getClosed(body)\n    const expected = true\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getText(body)\n    const expected = \"\"\n    assert.equal(actual, expected)\n  }\n}\n\n{\n  const body = createBody(\"hello world\")\n\n  {\n    const actual = getClosed(body)\n    const expected = true\n    assert.equal(actual, expected)\n  }\n\n  {\n    const actual = getText(body)\n    const expected = \"hello world\"\n    assert.equal(actual, expected)\n  }\n}\n\n{\n  const dataSource = createTwoWayStream()\n  const body = createBody(dataSource)\n\n  // body is closed when data source is closed\n  {\n    const actual = getClosed(body)\n    const expected = false\n    assert.equal(actual, expected)\n  }\n\n  dataSource.close()\n  {\n    const actual = getClosed(body)\n    const expected = true\n    assert.equal(actual, expected)\n  }\n}\n\nconsole.log(\"passed\")\n"
  ]
}