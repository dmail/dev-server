{
  "version": 3,
  "sources": [
    "../../../../src/openServer/createConnection/pipe.js"
  ],
  "names": [
    "listenError",
    "dataSource",
    "cb",
    "listener",
    "errored",
    "listenOnce",
    "remove",
    "once",
    "removeListener",
    "listenCancel",
    "cancelled",
    "listenData",
    "writed",
    "listen",
    "on",
    "listenClose",
    "closed",
    "callError",
    "stream",
    "value",
    "error",
    "undefined",
    "callClose",
    "close",
    "end",
    "callCancel",
    "cancel",
    "callWrite",
    "data",
    "write",
    "pipe",
    "streamA",
    "streamB",
    "pipeData",
    "pipeCancel",
    "pipeClose",
    "pipeError",
    "removeDataListener"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { isTwoWayStream } from \"./createTwoWayStream.js\"\nimport { isNodeStream } from \"./isNodeStream.js\"\n\nconst listenError = (dataSource, cb) => {\n  if (isTwoWayStream(dataSource)) {\n    const listener = dataSource.errored.listenOnce(cb)\n    return () => {\n      listener.remove()\n    }\n  }\n  if (isNodeStream(dataSource)) {\n    dataSource.once(\"error\", cb)\n    return () => {\n      dataSource.removeListener(\"error\", cb)\n    }\n  }\n  // other source cannot trigger error\n  return () => {}\n}\n\nconst listenCancel = (dataSource, cb) => {\n  if (isTwoWayStream(dataSource)) {\n    const listener = dataSource.cancelled.listenOnce(cb)\n    return () => {\n      listener.remove()\n    }\n  }\n  if (isNodeStream(dataSource)) {\n    // there is no cancel mecanis on node stream\n    return () => {}\n  }\n  // there is no cancel mecanism otherwise\n  return () => {}\n}\n\nconst listenData = (dataSource, cb) => {\n  if (isTwoWayStream(dataSource)) {\n    const listener = dataSource.writed.listen(cb)\n    return () => {\n      listener.remove()\n    }\n  }\n  if (isNodeStream(dataSource)) {\n    dataSource.on(\"data\", cb)\n    return () => {\n      dataSource.removeListener(\"data\", cb)\n    }\n  }\n  cb(dataSource)\n  return () => {}\n}\n\nconst listenClose = (dataSource, cb) => {\n  if (isTwoWayStream(dataSource)) {\n    const listener = dataSource.closed.listenOnce(cb)\n    return () => {\n      listener.remove()\n    }\n  }\n  if (isNodeStream(dataSource)) {\n    dataSource.once(\"end\", cb)\n    return () => {\n      dataSource.removeListener(\"end\", cb)\n    }\n  }\n  cb()\n  return () => {}\n}\n\nconst callError = (stream, value) => {\n  if (isTwoWayStream(stream)) {\n    return stream.error(value)\n  }\n  if (isNodeStream(stream)) {\n    return stream.error(value)\n  }\n  return undefined\n}\n\nconst callClose = (stream) => {\n  if (isTwoWayStream(stream)) {\n    return stream.close()\n  }\n  if (isNodeStream(stream)) {\n    return stream.end()\n  }\n  return undefined\n}\n\nconst callCancel = (stream) => {\n  if (isTwoWayStream(stream)) {\n    return stream.cancel()\n  }\n  if (isNodeStream(stream)) {\n    // node stream have no cancel mecanism\n    return undefined\n  }\n  return undefined\n}\n\nconst callWrite = (stream, data) => {\n  if (isTwoWayStream(stream)) {\n    return stream.write(data)\n  }\n  if (isNodeStream(stream)) {\n    return stream.write(data)\n  }\n  return undefined\n}\n\nexport const pipe = (\n  streamA,\n  streamB,\n  { pipeData = true, pipeCancel = true, pipeClose = true, pipeError = true } = {},\n) => {\n  // streamB.resume() when it is a nodejs stream ?\n\n  if (pipeCancel) {\n    listenCancel(streamA, () => {\n      callCancel(streamB)\n    })\n  }\n  if (pipeError) {\n    listenError(streamA, () => {\n      callError(streamB)\n    })\n  }\n  if (pipeData) {\n    // if streamA is already closed or errored or cancelled\n    // we should not attach this listener ?\n    const removeDataListener = listenData(streamA, (data) => {\n      callWrite(streamB, data)\n    })\n    listenError(streamA, removeDataListener)\n  }\n  if (pipeClose) {\n    listenClose(streamA, () => {\n      callClose(streamB)\n    })\n  }\n}\n"
  ]
}