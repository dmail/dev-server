{
  "version": 3,
  "sources": [
    "../../../src/openServer/createHeaders.js"
  ],
  "names": [
    "normalizeName",
    "headerName",
    "String",
    "test",
    "TypeError",
    "toLowerCase",
    "normalizeValue",
    "headerValue",
    "convertToClientName",
    "parseHeaders",
    "headerString",
    "headers",
    "pairs",
    "pair",
    "index",
    "i",
    "j",
    "key",
    "value",
    "split",
    "length",
    "indexOf",
    "slice",
    "createHeaders",
    "guard",
    "map",
    "Map",
    "checkImmutability",
    "has",
    "name",
    "get",
    "getAll",
    "set",
    "append",
    "values",
    "push",
    "combine",
    "remove",
    "delete",
    "entries",
    "keys",
    "forEach",
    "fn",
    "bind",
    "Array",
    "from",
    "headerValues",
    "call",
    "toString",
    "join",
    "toJSON",
    "populate",
    "Symbol",
    "iterator",
    "Object",
    "freeze"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\nhttps://developer.mozilla.org/en-US/docs/Web/API/Headers\nhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n*/\n\nconst normalizeName = (headerName) => {\n  headerName = String(headerName)\n  if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(headerName)) {\n    throw new TypeError(\"Invalid character in header field name\")\n  }\n\n  return headerName.toLowerCase()\n}\n\nconst normalizeValue = (headerValue) => {\n  return String(headerValue)\n}\n\nconst convertToClientName = (headerName) => {\n  return headerName\n}\n\n// https://gist.github.com/mmazer/5404301\nconst parseHeaders = (headerString) => {\n  var headers = {}\n  var pairs\n  var pair\n  var index\n  var i\n  var j\n  var key\n  var value\n\n  if (headerString) {\n    pairs = headerString.split(\"\\r\\n\")\n    i = 0\n    j = pairs.length\n    for (; i < j; i++) {\n      pair = pairs[i]\n      index = pair.indexOf(\": \")\n      if (index > 0) {\n        key = pair.slice(0, index)\n        value = pair.slice(index + 2)\n        headers[key] = value\n      }\n    }\n  }\n\n  return headers\n}\n\nexport const createHeaders = (headers) => {\n  const guard = \"none\"\n  const map = new Map()\n\n  const checkImmutability = () => {\n    if (guard === \"immutable\") {\n      throw new TypeError(\"headers are immutable\")\n    }\n  }\n\n  const has = (name) => map.has(normalizeName(name))\n\n  const get = (name) => {\n    name = normalizeName(name)\n    return map.has(name) ? map.get(name)[0] : null\n  }\n\n  const getAll = (name) => {\n    name = normalizeName(name)\n    return map.has(name) ? map.get(name) : []\n  }\n\n  const set = (name, value) => {\n    checkImmutability()\n\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    map.set(name, [value])\n  }\n\n  const append = (name, value) => {\n    checkImmutability()\n\n    name = normalizeName(name)\n    value = normalizeValue(value)\n\n    let values\n\n    if (map.has(name)) {\n      values = map.get(name)\n    } else {\n      values = []\n    }\n\n    values.push(value)\n    map.set(name, values)\n  }\n\n  const combine = (name, value) => {\n    if (map.has(name)) {\n      value = `, ${normalizeValue(value)}`\n    }\n\n    return append(name, value)\n  }\n\n  const remove = (name) => {\n    checkImmutability()\n\n    name = normalizeName(name)\n    return map.delete(name)\n  }\n\n  const entries = () => map.entries()\n\n  const keys = () => map.keys()\n\n  const values = () => map.values()\n\n  const forEach = (fn, bind) => {\n    Array.from(entries()).forEach(([headerName, headerValues]) => {\n      headerValues.forEach((headerValue) => {\n        fn.call(bind, headerName, headerValue)\n      })\n    })\n  }\n\n  const toString = () => {\n    const headers = Array.from(entries()).map(([headerName, headerValues]) => {\n      return `${convertToClientName(headerName)}: ${headerValues.join()}`\n    })\n\n    return headers.join(\"\\r\\n\")\n  }\n\n  const toJSON = () => {\n    const headers = {}\n\n    Array.from(entries()).forEach(([headerName, headerValues]) => {\n      headers[convertToClientName(headerName)] = headerValues\n    })\n\n    return headers\n  }\n\n  const populate = (headers) => {\n    if (typeof headers === \"string\") {\n      headers = parseHeaders(headers)\n    } else if (Symbol.iterator in headers) {\n      Array.from(headers).forEach(([name, values]) => {\n        map.set(name, values)\n      })\n    } else if (typeof headers === \"object\") {\n      Object.keys(headers).forEach((name) => {\n        append(name, headers[name])\n      })\n    }\n  }\n\n  if (headers) {\n    populate(headers)\n  }\n\n  return Object.freeze({\n    has,\n    get,\n    getAll,\n    set,\n    append,\n    combine,\n    [\"delete\"]: remove,\n    [Symbol.iterator]: () => map[Symbol.iterator](),\n    entries,\n    keys,\n    values,\n    forEach,\n    toString,\n    toJSON,\n  })\n}\n"
  ]
}