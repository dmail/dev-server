{"version":3,"sources":["../../../src/openServer/createNodeRequestHandler.js"],"names":["createRequestFromNodeRequest","nodeRequest","serverURL","method","url","headers","body","undefined","Object","freeze","populateNodeResponse","nodeResponse","status","reason","headerAsJSON","toJSON","writeHead","keepAlive","get","pipeTo","propagateClose","createResponse","createNodeRequestHandler","handler","transform","response","closed","smart","connection","once","emit","request","console","log","toString","on","error","Promise","resolve","then","responseProperties","stack","finalResponse","listen","close","enableCORS","corsHeaders","join","headersWithCORS","keys","forEach","corsHeaderName","has","append"],"mappings":"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","file":"createNodeRequestHandler.js","sourcesContent":["// https://github.com/jsenv/core/tree/master/src/util/rest\n\nimport { URL } from \"url\"\nimport { createBody } from \"./createBody.js\"\nimport { createHeaders } from \"./createHeaders.js\"\nimport { createSignal } from \"@dmail/signal\"\n\n// serverURL pourrait valoir par dÃ©faut `file:///${process.cwd()}` ?\nexport const createRequestFromNodeRequest = (nodeRequest, serverURL) => {\n  const { method } = nodeRequest\n  const url = new URL(nodeRequest.url, serverURL)\n  const headers = createHeaders(nodeRequest.headers)\n  const body = createBody(\n    method === \"POST\" || method === \"PUT\" || method === \"PATCH\" ? nodeRequest : undefined,\n  )\n\n  return Object.freeze({\n    method,\n    url,\n    headers,\n    body,\n  })\n}\n\nexport const populateNodeResponse = (nodeResponse, { status, reason = \"\", headers, body }) => {\n  const headerAsJSON = headers.toJSON()\n  nodeResponse.writeHead(status, reason, headerAsJSON)\n\n  const keepAlive = headers.get(\"connection\") === \"keep-alive\"\n  body.pipeTo(nodeResponse, { propagateClose: !keepAlive })\n}\n\nconst createResponse = (\n  { method },\n  { status = 501, reason, headers = createHeaders(), body = createBody() } = {},\n) => {\n  if (method === \"HEAD\") {\n    // don't send body for HEAD requests\n    body = createBody()\n  } else {\n    body = createBody(body)\n  }\n\n  headers = createHeaders(headers)\n\n  return Object.freeze({ status, reason, headers, body })\n}\n\nexport const createNodeRequestHandler = ({ handler, transform = (response) => response, url }) => {\n  return (nodeRequest, nodeResponse) => {\n    const closed = createSignal({ smart: true })\n    nodeResponse.connection.once(\"close\", () => closed.emit())\n\n    // should have some kind of id for a request\n    // so that logs knows whichs request they belong to\n    const request = createRequestFromNodeRequest(nodeRequest, url)\n    console.log(request.method, request.url.toString())\n\n    nodeRequest.on(\"error\", (error) => {\n      console.log(\"error on\", request.url.toString(), error)\n    })\n\n    return Promise.resolve()\n      .then(() => {\n        return handler(request)\n      })\n      .then((responseProperties) => {\n        const response = createResponse(request, responseProperties)\n        return transform(response)\n      })\n      .catch((error) => {\n        return createResponse(request, {\n          status: 500,\n          reason: \"internal error\",\n          body: error && error.stack ? error.stack : error,\n        })\n      })\n      .then((finalResponse) => {\n        console.log(`${finalResponse.status} ${request.url}`)\n        // ensure body is closed when client is closed\n        closed.listen(() => {\n          finalResponse.body.close()\n        })\n        populateNodeResponse(nodeResponse, finalResponse)\n      })\n  }\n}\n\nexport const enableCORS = (response) => {\n  const corsHeaders = {\n    \"access-control-allow-origin\": \"*\",\n    \"access-control-allow-methods\": [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"].join(\", \"),\n    \"access-control-allow-headers\": [\"x-requested-with\", \"content-type\", \"accept\"].join(\", \"),\n    \"access-control-max-age\": 1, // Seconds\n  }\n\n  const headersWithCORS = createHeaders(response.headers)\n  Object.keys(corsHeaders).forEach((corsHeaderName) => {\n    if (response.headers.has(corsHeaderName) === false) {\n      // we should merge any existing response cors headers with the one above\n      headersWithCORS.append(corsHeaderName, corsHeaders[corsHeaderName])\n    }\n  })\n\n  return {\n    ...response,\n    headers: headersWithCORS,\n  }\n}\n"]}