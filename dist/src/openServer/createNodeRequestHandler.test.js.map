{
  "version": 3,
  "sources": [
    "../../../src/openServer/createNodeRequestHandler.test.js"
  ],
  "names": [
    "then",
    "addRequestHandler",
    "url",
    "agent",
    "close",
    "nodeRequestHandler",
    "handler",
    "status",
    "headers",
    "body",
    "response",
    "text",
    "assert",
    "equal"
  ],
  "mappings": ";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,gBAAK,YAAM;AACT,SAAO,gCAAcA,IAAd,CAAmB,gBAA8C;AAAA,QAA3CC,iBAA2C,QAA3CA,iBAA2C;AAAA,QAAxBC,GAAwB,QAAxBA,GAAwB;AAAA,QAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,QAAZC,KAAY,QAAZA,KAAY;AACtE,QAAMC,kBAAkB,GAAG,wDAAyB;AAClDC,MAAAA,OAAO,EAAE,mBAAM;AACb;AACA;AACA;AACA,eAAO;AACLC,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,OAAO,EAAE;AACP,8BAAkB;AADX,WAFJ;AAKLC,UAAAA,IAAI,EAAE;AALD,SAAP;AAOD,OAZiD;AAalDP,MAAAA,GAAG,EAAHA;AAbkD,KAAzB,CAA3B;AAgBAD,IAAAA,iBAAiB,CAACI,kBAAD,CAAjB;AAEA,WAAO,wBAAMH,GAAN,EAAW;AAAEC,MAAAA,KAAK,EAALA;AAAF,KAAX,EACJH,IADI,CACC,UAACU,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADD,EAEJX,IAFI,CAEC,UAACW,IAAD,EAAU;AACdC,sBAAOC,KAAP,CAAaF,IAAb,EAAmB,IAAnB;;AACA,aAAOP,KAAK,EAAZ;AACD,KALI,CAAP;AAMD,GAzBM,CAAP;AA0BD,CA3BD",
  "sourcesContent": [
    "import { test } from \"@dmail/test\"\nimport assert from \"assert\"\nimport fetch from \"node-fetch\"\nimport { createNodeRequestHandler } from \"./createNodeRequestHandler.js\"\nimport { startServer } from \"./startServer.js\"\n\ntest(() => {\n  return startServer().then(({ addRequestHandler, url, agent, close }) => {\n    const nodeRequestHandler = createNodeRequestHandler({\n      handler: () => {\n        // as we can see the whole concept behind createNodeRequestHandler\n        // is to avoid using response methods directly but rather\n        // return POJO that takes care of using response methods\n        return {\n          status: 200,\n          headers: {\n            \"content-length\": 2,\n          },\n          body: \"ok\",\n        }\n      },\n      url,\n    })\n\n    addRequestHandler(nodeRequestHandler)\n\n    return fetch(url, { agent })\n      .then((response) => response.text())\n      .then((text) => {\n        assert.equal(text, \"ok\")\n        return close()\n      })\n  })\n})\n"
  ]
}