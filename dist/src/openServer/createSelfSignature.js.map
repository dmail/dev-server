{
  "version": 3,
  "sources": [
    "../../../src/openServer/createSelfSignature.js"
  ],
  "names": [
    "createSelfSignature",
    "pki",
    "forge",
    "rsa",
    "generateKeyPair",
    "privateKey",
    "publicKey",
    "cert",
    "createCertificate",
    "serialNumber",
    "validity",
    "notBefore",
    "Date",
    "notAfter",
    "setFullYear",
    "getFullYear",
    "attrs",
    "name",
    "value",
    "shortName",
    "setSubject",
    "setIssuer",
    "setExtensions",
    "cA",
    "keyCertSign",
    "digitalSignature",
    "nonRepudiation",
    "keyEncipherment",
    "dataEncipherment",
    "serverAuth",
    "clientAuth",
    "codeSigning",
    "emailProtection",
    "timeStamping",
    "client",
    "server",
    "email",
    "objsign",
    "sslCA",
    "emailCA",
    "objCA",
    "altNames",
    "type",
    "ip",
    "sign",
    "privateKeyToPem",
    "publicKeyToPem",
    "certificate",
    "certificateToPem"
  ],
  "mappings": "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",
  "sourcesContent": [
    "// https://github.com/digitalbazaar/forge/blob/master/examples/create-cert.js\n\nimport forge from \"node-forge\"\n\nexport const createSelfSignature = () => {\n  const { pki } = forge\n\n  const { privateKey, publicKey } = pki.rsa.generateKeyPair(1024)\n\n  const cert = pki.createCertificate()\n  cert.publicKey = publicKey\n  cert.serialNumber = \"01\"\n  cert.validity.notBefore = new Date()\n  cert.validity.notAfter = new Date()\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1)\n\n  const attrs = [\n    {\n      name: \"commonName\",\n      value: \"example.org\",\n    },\n    {\n      name: \"countryName\",\n      value: \"US\",\n    },\n    {\n      shortName: \"ST\",\n      value: \"Virginia\",\n    },\n    {\n      name: \"localityName\",\n      value: \"Blacksburg\",\n    },\n    {\n      name: \"organizationName\",\n      value: \"Test\",\n    },\n    {\n      shortName: \"OU\",\n      value: \"Test\",\n    },\n  ]\n  cert.setSubject(attrs)\n  cert.setIssuer(attrs)\n  cert.setExtensions([\n    {\n      name: \"basicConstraints\",\n      cA: true,\n    },\n    {\n      name: \"keyUsage\",\n      keyCertSign: true,\n      digitalSignature: true,\n      nonRepudiation: true,\n      keyEncipherment: true,\n      dataEncipherment: true,\n    },\n    {\n      name: \"extKeyUsage\",\n      serverAuth: true,\n      clientAuth: true,\n      codeSigning: true,\n      emailProtection: true,\n      timeStamping: true,\n    },\n    {\n      name: \"nsCertType\",\n      client: true,\n      server: true,\n      email: true,\n      objsign: true,\n      sslCA: true,\n      emailCA: true,\n      objCA: true,\n    },\n    {\n      name: \"subjectAltName\",\n      altNames: [\n        {\n          type: 6, // URI\n          value: \"http://example.org/webid#me\",\n        },\n        {\n          type: 7, // IP\n          ip: \"127.0.0.1\",\n        },\n      ],\n    },\n    {\n      name: \"subjectKeyIdentifier\",\n    },\n  ])\n  // FIXME: add authorityKeyIdentifier extension\n\n  // self-sign certificate\n  cert.sign(privateKey /* , forge.md.sha256.create()*/)\n\n  return {\n    privateKey: pki.privateKeyToPem(privateKey),\n    publicKey: pki.publicKeyToPem(publicKey),\n    certificate: pki.certificateToPem(cert),\n  }\n}\n"
  ]
}