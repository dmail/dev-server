{"version":3,"sources":["../../../src/openServer/createSelfSignature.js"],"names":["createSelfSignature","pki","rsa","generateKeyPair","privateKey","publicKey","cert","createCertificate","serialNumber","validity","notBefore","Date","notAfter","setFullYear","getFullYear","attrs","name","value","shortName","setSubject","setIssuer","setExtensions","cA","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","client","server","email","objsign","sslCA","emailCA","objCA","altNames","type","ip","sign","privateKeyToPem","publicKeyToPem","certificate","certificateToPem"],"mappings":";;;;;;;AAEA;;;;;;AAEO,IAAMA,oDAAsB,SAAtBA,mBAAsB,GAAM;AAAA,MAC/BC,GAD+B,0BAC/BA,GAD+B;;AAAA,8BAGLA,IAAIC,GAAJ,CAAQC,eAAR,CAAwB,IAAxB,CAHK;AAAA,MAG/BC,UAH+B,yBAG/BA,UAH+B;AAAA,MAGnBC,SAHmB,yBAGnBA,SAHmB;;AAKvC,MAAMC,OAAOL,IAAIM,iBAAJ,EAAb;AACAD,OAAKD,SAAL,GAAiBA,SAAjB;AACAC,OAAKE,YAAL,GAAoB,IAApB;AACAF,OAAKG,QAAL,CAAcC,SAAd,GAA0B,IAAIC,IAAJ,EAA1B;AACAL,OAAKG,QAAL,CAAcG,QAAd,GAAyB,IAAID,IAAJ,EAAzB;AACAL,OAAKG,QAAL,CAAcG,QAAd,CAAuBC,WAAvB,CAAmCP,KAAKG,QAAL,CAAcC,SAAd,CAAwBI,WAAxB,KAAwC,CAA3E;;AAEA,MAAMC,QAAQ,CACZ;AACEC,UAAM,YADR;AAEEC,WAAO;AAFT,GADY,EAKZ;AACED,UAAM,aADR;AAEEC,WAAO;AAFT,GALY,EASZ;AACEC,eAAW,IADb;AAEED,WAAO;AAFT,GATY,EAaZ;AACED,UAAM,cADR;AAEEC,WAAO;AAFT,GAbY,EAiBZ;AACED,UAAM,kBADR;AAEEC,WAAO;AAFT,GAjBY,EAqBZ;AACEC,eAAW,IADb;AAEED,WAAO;AAFT,GArBY,CAAd;AA0BAX,OAAKa,UAAL,CAAgBJ,KAAhB;AACAT,OAAKc,SAAL,CAAeL,KAAf;AACAT,OAAKe,aAAL,CAAmB,CACjB;AACEL,UAAM,kBADR;AAEEM,QAAI;AAFN,GADiB,EAKjB;AACEN,UAAM,UADR;AAEEO,iBAAa,IAFf;AAGEC,sBAAkB,IAHpB;AAIEC,oBAAgB,IAJlB;AAKEC,qBAAiB,IALnB;AAMEC,sBAAkB;AANpB,GALiB,EAajB;AACEX,UAAM,aADR;AAEEY,gBAAY,IAFd;AAGEC,gBAAY,IAHd;AAIEC,iBAAa,IAJf;AAKEC,qBAAiB,IALnB;AAMEC,kBAAc;AANhB,GAbiB,EAqBjB;AACEhB,UAAM,YADR;AAEEiB,YAAQ,IAFV;AAGEC,YAAQ,IAHV;AAIEC,WAAO,IAJT;AAKEC,aAAS,IALX;AAMEC,WAAO,IANT;AAOEC,aAAS,IAPX;AAQEC,WAAO;AART,GArBiB,EA+BjB;AACEvB,UAAM,gBADR;AAEEwB,cAAU,CACR;AACEC,YAAM,CADR,EACW;AACTxB,aAAO;AAFT,KADQ,EAKR;AACEwB,YAAM,CADR,EACW;AACTC,UAAI;AAFN,KALQ;AAFZ,GA/BiB,EA4CjB;AACE1B,UAAM;AADR,GA5CiB,CAAnB;AAgDA;;AAEA;AACAV,OAAKqC,IAAL,CAAUvC,UAAV,CAAqB,+BAArB;;AAEA,SAAO;AACLA,gBAAYH,IAAI2C,eAAJ,CAAoBxC,UAApB,CADP;AAELC,eAAWJ,IAAI4C,cAAJ,CAAmBxC,SAAnB,CAFN;AAGLyC,iBAAa7C,IAAI8C,gBAAJ,CAAqBzC,IAArB;AAHR,GAAP;AAKD,CAlGM,C,CAJP","file":"createSelfSignature.js","sourcesContent":["// https://github.com/digitalbazaar/forge/blob/master/examples/create-cert.js\n\nimport forge from \"node-forge\"\n\nexport const createSelfSignature = () => {\n  const { pki } = forge\n\n  const { privateKey, publicKey } = pki.rsa.generateKeyPair(1024)\n\n  const cert = pki.createCertificate()\n  cert.publicKey = publicKey\n  cert.serialNumber = \"01\"\n  cert.validity.notBefore = new Date()\n  cert.validity.notAfter = new Date()\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1)\n\n  const attrs = [\n    {\n      name: \"commonName\",\n      value: \"example.org\",\n    },\n    {\n      name: \"countryName\",\n      value: \"US\",\n    },\n    {\n      shortName: \"ST\",\n      value: \"Virginia\",\n    },\n    {\n      name: \"localityName\",\n      value: \"Blacksburg\",\n    },\n    {\n      name: \"organizationName\",\n      value: \"Test\",\n    },\n    {\n      shortName: \"OU\",\n      value: \"Test\",\n    },\n  ]\n  cert.setSubject(attrs)\n  cert.setIssuer(attrs)\n  cert.setExtensions([\n    {\n      name: \"basicConstraints\",\n      cA: true,\n    },\n    {\n      name: \"keyUsage\",\n      keyCertSign: true,\n      digitalSignature: true,\n      nonRepudiation: true,\n      keyEncipherment: true,\n      dataEncipherment: true,\n    },\n    {\n      name: \"extKeyUsage\",\n      serverAuth: true,\n      clientAuth: true,\n      codeSigning: true,\n      emailProtection: true,\n      timeStamping: true,\n    },\n    {\n      name: \"nsCertType\",\n      client: true,\n      server: true,\n      email: true,\n      objsign: true,\n      sslCA: true,\n      emailCA: true,\n      objCA: true,\n    },\n    {\n      name: \"subjectAltName\",\n      altNames: [\n        {\n          type: 6, // URI\n          value: \"http://example.org/webid#me\",\n        },\n        {\n          type: 7, // IP\n          ip: \"127.0.0.1\",\n        },\n      ],\n    },\n    {\n      name: \"subjectKeyIdentifier\",\n    },\n  ])\n  // FIXME: add authorityKeyIdentifier extension\n\n  // self-sign certificate\n  cert.sign(privateKey /* , forge.md.sha256.create()*/)\n\n  return {\n    privateKey: pki.privateKeyToPem(privateKey),\n    publicKey: pki.publicKeyToPem(publicKey),\n    certificate: pki.certificateToPem(cert),\n  }\n}\n"]}