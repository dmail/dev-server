{"version":3,"sources":["../../../src/openServer/listenNodeBeforeExit.js"],"names":["createListenBeforeExit","install","exit","beforeExitSignal","emitter","installer","emit","disableWhileCalling","triggerBeforeExit","then","listen","listenNodeBeforeExit","callback","process","on","removeListener","listenBrowserBeforeExit","window","onbeforeunload"],"mappings":";;;;;;;AAGA;;AAEO,IAAMA,0DAAyB,SAAzBA,sBAAyB,OAAuB;AAAA,MAApBC,OAAoB,QAApBA,OAAoB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAC3D,MAAMC,mBAAmB,0BAAa;AACpCC,6CADoC;AAEpCC,eAAW,0BAAmC;AAAA,UAAhCC,IAAgC,SAAhCA,IAAgC;AAAA,UAA1BC,mBAA0B,SAA1BA,mBAA0B;;AAC5C,UAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,eAAMF,OAAOG,IAAP,CAAY;AAAA,iBAAMF,oBAAoBL,IAApB,CAAN;AAAA,SAAZ,CAAN;AAAA,OAA1B;;AAEA,aAAOD,QAAQO,iBAAR,CAAP;AACD;AANmC,GAAb,CAAzB;;AASA,SAAOL,iBAAiBO,MAAxB;AACD,CAXM,C,CALP;AACA;;AAiBO,IAAMC,sDAAuBX,uBAAuB;AACzDC,WAAS,iBAACW,QAAD,EAAc;AACrBC,YAAQC,EAAR,CAAW,QAAX,EAAqBF,QAArB;AACAC,YAAQC,EAAR,CAAW,YAAX,EAAyBF,QAAzB;;AAEA,WAAO,YAAM;AACXC,cAAQE,cAAR,CAAuB,QAAvB,EAAiCH,QAAjC;AACAC,cAAQE,cAAR,CAAuB,YAAvB,EAAqCH,QAArC;AACD,KAHD;AAID,GATwD;AAUzDV,QAAM,gBAAM;AACVW,YAAQX,IAAR;AACD;AAZwD,CAAvB,CAA7B;;AAeA,IAAMc,4DAA0BhB,uBAAuB;AAC5DC,WAAS,iBAACW,QAAD,EAAc;AAAA,kBACMK,MADN;AAAA,QACbC,cADa,WACbA,cADa;;AAErBD,WAAOC,cAAP,GAAwBN,QAAxB;;AAEA,WAAO,YAAM;AACXK,aAAOC,cAAP,GAAwBA,cAAxB;AACD,KAFD;AAGD,GAR2D;AAS5DhB,QAAM,gBAAM;AACV;AACA;AACD;AAZ2D,CAAvB,CAAhC;;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"listenNodeBeforeExit.js","sourcesContent":["// we should handle SIGTERM as well or is it handled by beforeExit?\n// look at terminus module on github\n\nimport { asyncSimultaneousEmitter, createSignal } from \"@dmail/signal\"\n\nexport const createListenBeforeExit = ({ install, exit }) => {\n  const beforeExitSignal = createSignal({\n    emitter: asyncSimultaneousEmitter,\n    installer: ({ emit, disableWhileCalling }) => {\n      const triggerBeforeExit = () => emit().then(() => disableWhileCalling(exit))\n\n      return install(triggerBeforeExit)\n    },\n  })\n\n  return beforeExitSignal.listen\n}\n\nexport const listenNodeBeforeExit = createListenBeforeExit({\n  install: (callback) => {\n    process.on(\"SIGINT\", callback)\n    process.on(\"beforeExit\", callback)\n\n    return () => {\n      process.removeListener(\"SIGINT\", callback)\n      process.removeListener(\"beforeExit\", callback)\n    }\n  },\n  exit: () => {\n    process.exit()\n  },\n})\n\nexport const listenBrowserBeforeExit = createListenBeforeExit({\n  install: (callback) => {\n    const { onbeforeunload } = window\n    window.onbeforeunload = callback\n\n    return () => {\n      window.onbeforeunload = onbeforeunload\n    }\n  },\n  exit: () => {\n    // in the browser this may not be called\n    // because you cannot prevent user from leaving your page\n  },\n})\n\n// const exit = env.platformPolymorph({\n//       browser() {\n//\n//       },\n//       node() {\n//           process.exit();\n//       }\n//   });\n//   const install = env.platformPolymorph({\n//\n//       node(callback) {\n//\n//       }\n//   });\n//   const listeners = [];\n//   let uninstaller = null;\n//   let installed = false;\n\n// })());\n"]}