{"version":3,"sources":["../../../src/sourceMapTest/compile.js"],"names":["babel","require","fs","path","compileFolder","folderLocation","files","readdirSync","filter","fileName","endsWith","map","forEach","fileLocation","extname","basename","fileOutputLocation","fileOutputSourceMapLocation","inputSource","readFileSync","toString","babelOptions","filenameRelative","sourceMaps","babelrc","plugins","includes","push","transform","code","outputSource","sourcesContent","sources","file","writeFileSync","JSON","stringify","exports","__dirname"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,YAAR,CAAd;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA,IAAMG,gBAAgB,SAAhBA,aAAgB,CAACC,cAAD,EAAoB;AACxC,MAAMC,QAAQJ,GACXK,WADW,CACCF,cADD,EAEXG,MAFW,CAEJ,UAACC,QAAD;AAAA,WAAcA,SAASC,QAAT,CAAkB,KAAlB,CAAd;AAAA,GAFI,EAGXC,GAHW,CAGP,UAACF,QAAD;AAAA,WAAiBJ,cAAjB,SAAmCI,QAAnC;AAAA,GAHO,CAAd;;AAKAH,QAAMM,OAAN,CAAc,UAACC,YAAD,EAAkB;AAC9B,QAAMC,UAAUX,KAAKW,OAAL,CAAaD,YAAb,CAAhB;AACA,QAAMJ,WAAWN,KAAKY,QAAL,CAAcF,YAAd,EAA4BC,OAA5B,CAAjB;;AAEA,QAAIL,SAASC,QAAT,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAED,QAAMM,qBAAwBX,cAAxB,SAA0CI,QAA1C,YAAN;AACA,QAAMQ,8BAAiCZ,cAAjC,SAAmDI,QAAnD,gBAAN;;AAEA,QAAMS,cAAchB,GAAGiB,YAAH,CAAgBN,YAAhB,EAA8BO,QAA9B,EAApB;;AAEA,QAAMC,eAAe;AACnBC,wBAAqBb,QAArB,QADmB;AAEnBc,kBAAY,IAFO;AAGnBC,eAAS,KAHU;AAInBC,eAAS,CAAC,6CAAD;AAJU,KAArB;;AAOA,QAAIP,YAAYQ,QAAZ,CAAqB,QAArB,CAAJ,EAAoC;AAClCL,mBAAaI,OAAb,CAAqBE,IAArB,CAA0B,gDAA1B;AACD;;AAtB6B,2BAwBR3B,MAAM4B,SAAN,CAAgBV,WAAhB,EAA6BG,YAA7B,CAxBQ;AAAA,QAwBtBQ,IAxBsB,oBAwBtBA,IAxBsB;AAAA,QAwBhBlB,GAxBgB,oBAwBhBA,GAxBgB;;AA0B9B,QAAMmB,eAAkBD,IAAlB,+BACaZ,2BADnB;;AAGA,WAAON,IAAIoB,cAAX;AACApB,QAAIqB,OAAJ,CAAY,CAAZ,IAAiBnB,YAAjB;AACAF,QAAIsB,IAAJ,GAAWpB,YAAX;;AAEAX,OAAGgC,aAAH,CAAiBlB,kBAAjB,EAAqCc,YAArC;AACA5B,OAAGgC,aAAH,CAAiBjB,2BAAjB,EAA8CkB,KAAKC,SAAL,CAAezB,GAAf,EAAoB,IAApB,EAA0B,IAA1B,CAA9C;AACD,GAnCD;AAoCD,CA1CD;AA2CA0B,QAAQjC,aAAR,GAAwBA,aAAxB;;AAEAA,cAAiBkC,SAAjB","file":"compile.js","sourcesContent":["const babel = require(\"babel-core\")\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nconst compileFolder = (folderLocation) => {\n  const files = fs\n    .readdirSync(folderLocation)\n    .filter((fileName) => fileName.endsWith(\".js\"))\n    .map((fileName) => `${folderLocation}/${fileName}`)\n\n  files.forEach((fileLocation) => {\n    const extname = path.extname(fileLocation)\n    const fileName = path.basename(fileLocation, extname)\n\n    if (fileName.endsWith(\".es5\")) {\n      return\n    }\n\n    const fileOutputLocation = `${folderLocation}/${fileName}.es5.js`\n    const fileOutputSourceMapLocation = `${folderLocation}/${fileName}.es5.js.map`\n\n    const inputSource = fs.readFileSync(fileLocation).toString()\n\n    const babelOptions = {\n      filenameRelative: `${fileName}.js`,\n      sourceMaps: true,\n      babelrc: false,\n      plugins: [\"babel-plugin-transform-es2015-block-scoping\"],\n    }\n\n    if (inputSource.includes(\"export\")) {\n      babelOptions.plugins.push(\"babel-plugin-transform-es2015-modules-systemjs\")\n    }\n\n    const { code, map } = babel.transform(inputSource, babelOptions)\n\n    const outputSource = `${code}\n//# sourceMappingURL=${fileOutputSourceMapLocation}`\n\n    delete map.sourcesContent\n    map.sources[0] = fileLocation\n    map.file = fileLocation\n\n    fs.writeFileSync(fileOutputLocation, outputSource)\n    fs.writeFileSync(fileOutputSourceMapLocation, JSON.stringify(map, null, \"  \"))\n  })\n}\nexports.compileFolder = compileFolder\n\ncompileFolder(`${__dirname}/vscode-bug`)\n"]}