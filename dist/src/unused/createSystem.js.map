{"version":3,"sources":["../../../src/unused/createSystem.js"],"names":["getNodeFilename","filename","String","replace","startsWith","slice","length","createSystem","transpile","mySystem","constructor","instantiate","key","processAnonRegister","apply","arguments","then","source","global","System","runInThisContext","meta","format"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpCA,aAAWC,OAAOD,QAAP,CAAX;AACA;AACAA,aAAWA,SAASE,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIF,SAASG,UAAT,CAAoB,UAApB,CAAJ,EAAqC;AACnC,WAAOH,SAASI,KAAT,CAAe,WAAWC,MAA1B,CAAP;AACD;;AAED,SAAOL,QAAP;AACD,CAnBD;AAHA;AAwBO,IAAMM,sCAAe,SAAfA,YAAe,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAC7C,MAAMC,WAAW,IAAI,sBAASC,WAAb,EAAjB;AAD6C,MAErCC,WAFqC,GAErB,sBAASD,WAFY,CAErCC,WAFqC;;;AAI7CF,WAASE,WAAT,IAAwB,UAASC,GAAT,EAAcC,mBAAd,EAAmC;AACzD,QAAID,IAAIR,UAAJ,CAAe,QAAf,CAAJ,EAA8B;AAC5B,aAAO,sBAASO,WAAT,EAAsBG,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC,CAAP;AACD;;AAED,QAAMd,WAAWD,gBAAgBY,GAAhB,CAAjB;;AAEA,WAAO,wCAAiBX,QAAjB,EAA2Be,IAA3B,CAAgC,UAACC,MAAD,EAAY;AACjD,aAAOT,UAAUS,MAAV,EAAkB,EAAEhB,kBAAF,EAAlB,EAAgCe,IAAhC,CAAqC,UAACC,MAAD,EAAY;AACtDC,eAAOC,MAAP,GAAgBV,QAAhB;AACA,wBAAGW,gBAAH,CAAoBH,MAApB,EAA4B,EAAEhB,kBAAF,EAA5B;AACA,eAAOiB,OAAOC,MAAd;AACAN;AACD,OALM,CAAP;AAMD,KAPM,CAAP;AAQD,GAfD;;AAiBAJ,WAASY,IAAT,CAAc,QAAd,IAA0B,EAAEC,QAAQ,MAAV,EAA1B;;AAEA,SAAOb,QAAP;AACD,CAxBM","file":"createSystem.js","sourcesContent":["import SystemJS from \"systemjs\"\nimport vm from \"vm\"\n// import path from \"path\"\nimport { readFileAsString } from \"../readFileAsString.js\"\n\nconst getNodeFilename = (filename) => {\n  filename = String(filename)\n  // filename = path.resolve(process.cwd(), filename)\n  filename = filename.replace(/\\\\/g, \"/\")\n\n  // this logic sucks, let's try to avoid it completely\n  // if (filename.slice(0, 2) === \"//\") {\n  // \tfilename = `${projectRoot}/${filename.slice(2)}`\n  // } else if (filename[0] === \"/\") {\n  // \tfilename = `${rootFolder}/${filename.slice(2)}`\n  // } else {\n  // \tfilename = `${rootFolder}/${filename}`\n  // }\n\n  if (filename.startsWith(\"file:///\")) {\n    return filename.slice(\"file:///\".length)\n  }\n\n  return filename\n}\n\nexport const createSystem = ({ transpile }) => {\n  const mySystem = new SystemJS.constructor()\n  const { instantiate } = SystemJS.constructor\n\n  mySystem[instantiate] = function(key, processAnonRegister) {\n    if (key.startsWith(\"@node/\")) {\n      return SystemJS[instantiate].apply(this, arguments)\n    }\n\n    const filename = getNodeFilename(key)\n\n    return readFileAsString(filename).then((source) => {\n      return transpile(source, { filename }).then((source) => {\n        global.System = mySystem\n        vm.runInThisContext(source, { filename })\n        delete global.System\n        processAnonRegister()\n      })\n    })\n  }\n\n  mySystem.meta[\"*.json\"] = { format: \"json\" }\n\n  return mySystem\n}\n"]}