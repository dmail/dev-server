{
  "version": 3,
  "sources": [
    "../../../src/unused/createSystem.js"
  ],
  "names": [
    "getNodeFilename",
    "filename",
    "String",
    "replace",
    "startsWith",
    "slice",
    "length",
    "createSystem",
    "transpile",
    "mySystem",
    "SystemJS",
    "constructor",
    "instantiate",
    "key",
    "processAnonRegister",
    "apply",
    "arguments",
    "then",
    "source",
    "global",
    "System",
    "vm",
    "runInThisContext",
    "meta",
    "format"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AAEA;;;;AADA;AAGA,MAAMA,eAAe,GAAIC,QAAD,IAAc;AACpCA,EAAAA,QAAQ,GAAGC,MAAM,CAACD,QAAD,CAAjB,CADoC,CAEpC;;AACAA,EAAAA,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX,CAHoC,CAKpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIF,QAAQ,CAACG,UAAT,CAAoB,UAApB,CAAJ,EAAqC;AACnC,WAAOH,QAAQ,CAACI,KAAT,CAAe,WAAWC,MAA1B,CAAP;AACD;;AAED,SAAOL,QAAP;AACD,CAnBD;;AAqBO,MAAMM,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC7C,QAAMC,QAAQ,GAAG,IAAIC,kBAASC,WAAb,EAAjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,kBAASC,WAAjC;;AAEAF,EAAAA,QAAQ,CAACG,WAAD,CAAR,GAAwB,UAASC,GAAT,EAAcC,mBAAd,EAAmC;AACzD,QAAID,GAAG,CAACT,UAAJ,CAAe,QAAf,CAAJ,EAA8B;AAC5B,aAAOM,kBAASE,WAAT,EAAsBG,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC,CAAP;AACD;;AAED,UAAMf,QAAQ,GAAGD,eAAe,CAACa,GAAD,CAAhC;AAEA,WAAO,wCAAiBZ,QAAjB,EAA2BgB,IAA3B,CAAiCC,MAAD,IAAY;AACjD,aAAOV,SAAS,CAACU,MAAD,EAAS;AAAEjB,QAAAA;AAAF,OAAT,CAAT,CAAgCgB,IAAhC,CAAsCC,MAAD,IAAY;AACtDC,QAAAA,MAAM,CAACC,MAAP,GAAgBX,QAAhB;;AACAY,oBAAGC,gBAAH,CAAoBJ,MAApB,EAA4B;AAAEjB,UAAAA;AAAF,SAA5B;;AACA,eAAOkB,MAAM,CAACC,MAAd;AACAN,QAAAA,mBAAmB;AACpB,OALM,CAAP;AAMD,KAPM,CAAP;AAQD,GAfD;;AAiBAL,EAAAA,QAAQ,CAACc,IAAT,CAAc,QAAd,IAA0B;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAA1B;AAEA,SAAOf,QAAP;AACD,CAxBM",
  "sourcesContent": [
    "import SystemJS from \"systemjs\"\nimport vm from \"vm\"\n// import path from \"path\"\nimport { readFileAsString } from \"../readFileAsString.js\"\n\nconst getNodeFilename = (filename) => {\n  filename = String(filename)\n  // filename = path.resolve(process.cwd(), filename)\n  filename = filename.replace(/\\\\/g, \"/\")\n\n  // this logic sucks, let's try to avoid it completely\n  // if (filename.slice(0, 2) === \"//\") {\n  // \tfilename = `${projectRoot}/${filename.slice(2)}`\n  // } else if (filename[0] === \"/\") {\n  // \tfilename = `${rootFolder}/${filename.slice(2)}`\n  // } else {\n  // \tfilename = `${rootFolder}/${filename}`\n  // }\n\n  if (filename.startsWith(\"file:///\")) {\n    return filename.slice(\"file:///\".length)\n  }\n\n  return filename\n}\n\nexport const createSystem = ({ transpile }) => {\n  const mySystem = new SystemJS.constructor()\n  const { instantiate } = SystemJS.constructor\n\n  mySystem[instantiate] = function(key, processAnonRegister) {\n    if (key.startsWith(\"@node/\")) {\n      return SystemJS[instantiate].apply(this, arguments)\n    }\n\n    const filename = getNodeFilename(key)\n\n    return readFileAsString(filename).then((source) => {\n      return transpile(source, { filename }).then((source) => {\n        global.System = mySystem\n        vm.runInThisContext(source, { filename })\n        delete global.System\n        processAnonRegister()\n      })\n    })\n  }\n\n  mySystem.meta[\"*.json\"] = { format: \"json\" }\n\n  return mySystem\n}\n"
  ]
}