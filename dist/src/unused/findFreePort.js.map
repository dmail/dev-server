{
  "version": 3,
  "sources": [
    "../../../src/unused/findFreePort.js"
  ],
  "names": [
    "findFreePort",
    "ip",
    "min",
    "max",
    "generateNext",
    "port",
    "test",
    "Promise",
    "resolve",
    "reject",
    "server",
    "net",
    "createServer",
    "listen",
    "on",
    "close",
    "error",
    "code",
    "testPort",
    "then",
    "free",
    "Error"
  ],
  "mappings": ";;;;;;;AAAA;;;;AAEO,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAEvB;AAAA,iFAD6E,EAC7E;AAAA,qBADDC,EACC;AAAA,MADDA,EACC,wBADI,WACJ;AAAA,sBADiBC,GACjB;AAAA,MADiBA,GACjB,yBADuB,CACvB;AAAA,sBAD0BC,GAC1B;AAAA,MAD0BA,GAC1B,yBADgC,KAChC;AAAA,+BADuCC,YACvC;AAAA,MADuCA,YACvC,kCADsD,UAACC,IAAD;AAAA,WAAUA,IAAI,GAAG,CAAjB;AAAA,GACtD;;AACH,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACD,IAAD,EAAOJ,EAAP,EAAc;AACzB,WAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,MAAM,GAAGC,aAAIC,YAAJ,GAAmBC,MAAnB,CAA0BR,IAA1B,EAAgCJ,EAAhC,CAAf;;AACAS,MAAAA,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC3BJ,QAAAA,MAAM,CAACK,KAAP,CAAa,YAAM;AACjBP,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFD;AAGD,OAJD;AAKAE,MAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAACE,KAAD,EAAW;AAC5B,YAAIA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,YAA5B,EAA0C;AACxC,iBAAOT,OAAO,CAAC,KAAD,CAAd;AACD;;AACD,YAAIQ,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,QAA5B,EAAsC;AACpC,iBAAOT,OAAO,CAAC,KAAD,CAAd;AACD;;AACD,eAAOC,MAAM,CAACO,KAAD,CAAb;AACD,OARD;AASD,KAhBM,CAAP;AAiBD,GAlBD;;AAoBA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACb,IAAD,EAAOJ,EAAP,EAAc;AAC7B,WAAOK,IAAI,CAACD,IAAD,EAAOJ,EAAP,CAAJ,CAAekB,IAAf,CAAoB,UAACC,IAAD,EAAU;AACnC,UAAIA,IAAJ,EAAU;AACR,eAAOf,IAAP;AACD;;AACDA,MAAAA,IAAI,GAAGD,YAAY,CAACC,IAAD,CAAnB;;AAEA,UAAIA,IAAI,GAAGF,GAAX,EAAgB;AACd,cAAM,IAAIkB,KAAJ,qCAAuCnB,GAAvC,kBAAkDC,GAAlD,sBAAiEF,EAAjE,EAAN;AACD;;AAED,aAAOiB,QAAQ,CAACb,IAAD,EAAOJ,EAAP,CAAf;AACD,KAXM,CAAP;AAYD,GAbD;;AAeA,SAAOiB,QAAQ,CAAChB,GAAD,EAAMD,EAAN,CAAf;AACD,CAvCM",
  "sourcesContent": [
    "import net from \"net\"\n\nexport const findFreePort = (\n  { ip = \"localhost\", min = 1, max = 65534, generateNext = (port) => port + 1 } = {},\n) => {\n  const test = (port, ip) => {\n    return new Promise((resolve, reject) => {\n      const server = net.createServer().listen(port, ip)\n      server.on(\"listening\", () => {\n        server.close(() => {\n          resolve(true)\n        })\n      })\n      server.on(\"error\", (error) => {\n        if (error && error.code === \"EADDRINUSE\") {\n          return resolve(false)\n        }\n        if (error && error.code === \"EACCES\") {\n          return resolve(false)\n        }\n        return reject(error)\n      })\n    })\n  }\n\n  const testPort = (port, ip) => {\n    return test(port, ip).then((free) => {\n      if (free) {\n        return port\n      }\n      port = generateNext(port)\n\n      if (port > max) {\n        throw new Error(`no available port between ${min} and ${max} with ip ${ip}`)\n      }\n\n      return testPort(port, ip)\n    })\n  }\n\n  return testPort(min, ip)\n}\n"
  ]
}