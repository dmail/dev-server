{"version":3,"sources":["../../../../src/unused/watchFile/watchFile.js"],"names":["getModificationDate","url","Promise","resolve","reject","stat","error","mtime","guardAsync","fn","shield","args","then","shielded","undefined","createChangedAsyncShield","value","get","compare","lastValue","all","previousValue","createWatchSignal","installer","emit","modificationDate","nextModificationDate","Number","guardedEmit","watcher","watch","persistent","eventType","filename","close","memoizedCreateWatchSignal","watchFile","listen"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA,IAAMA,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,oBAAGC,IAAH,CAAQJ,GAAR,EAAa,UAACK,KAAD,EAAQD,IAAR,EAAiB;AAC5B,UAAIC,KAAJ,EAAW;AACTF,eAAOE,KAAP;AACD,OAFD,MAEO;AACLH,gBAAQE,KAAKE,KAAb;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,IAAMC,aAAa,SAAbA,UAAa,CAACC,EAAD,EAAKC,MAAL;AAAA,SAAgB,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AAC9C,WAAOT,QAAQC,OAAR,GACJS,IADI,CACC;AAAA,aAAMF,wBAAUC,IAAV,CAAN;AAAA,KADD,EAEJC,IAFI,CAEC,UAACC,QAAD;AAAA,aAAeA,WAAWC,SAAX,GAAuBL,oBAAME,IAAN,CAAtC;AAAA,KAFD,CAAP;AAGD,GAJkB;AAAA,CAAnB;;AAMA,IAAMI,2BAA2B,SAA3BA,wBAA2B,OAA6B;AAAA,MAA1BC,KAA0B,QAA1BA,KAA0B;AAAA,MAAnBC,GAAmB,QAAnBA,GAAmB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC5D,MAAIC,kBAAJ;;AAEA,SAAO,YAAM;AACX,WAAOjB,QAAQkB,GAAR,CAAY,CACjBD,cAAcL,SAAd,GAA0BE,KAA1B,GAAkCG,SADjB,EAEjBjB,QAAQC,OAAR,GAAkBS,IAAlB,CAAuBK,GAAvB,CAFiB,CAAZ,EAGJL,IAHI,CAGC,iBAA4B;AAAA;AAAA,UAA1BS,aAA0B;AAAA,UAAXL,KAAW;;AAClCG,kBAAYH,KAAZ;AACA,aAAOE,QAAQG,aAAR,EAAuBL,KAAvB,CAAP;AACD,KANM,CAAP;AAOD,GARD;AASD,CAZD;;AAcA,IAAMM,oBAAoB,SAApBA,iBAAoB,CAACrB,GAAD,EAAS;AACjC;AACA,MAAMM,QAAQP,oBAAoBC,GAApB,CAAd;;AAEA,SAAO,0BAAa;AAClBsB,eAAW,0BAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;;AACvB,UAAMd,SAASK,yBAAyB;AACtCC,eAAOT,KAD+B;AAEtCU,aAAK;AAAA,iBAAMjB,oBAAoBC,GAApB,CAAN;AAAA,SAFiC;AAGtCiB,iBAAS,iBAACO,gBAAD,EAAmBC,oBAAnB;AAAA,iBACPC,OAAOF,gBAAP,MAA6BE,OAAOD,oBAAP,CADtB;AAAA;AAH6B,OAAzB,CAAf;;AAOA;AACA,UAAME,cAAcpB,WAAWgB,IAAX,EAAiBd,MAAjB,CAApB;AACA,UAAMmB,UAAU,gBAAGC,KAAH,CAAS7B,GAAT,EAAc,EAAE8B,YAAY,KAAd,EAAd,EAAqC,UAACC,SAAD,EAAYC,QAAZ,EAAyB;AAC5EL,oBAAY,EAAE3B,QAAF,EAAO+B,oBAAP,EAAkBC,kBAAlB,EAAZ;AACD,OAFe,CAAhB;AAGA,aAAO;AAAA,eAAMJ,QAAQK,KAAR,EAAN;AAAA,OAAP;AACD;AAfiB,GAAb,CAAP;AAiBD,CArBD;;AAuBA,IAAMC,4BAA4B,0BAAYb,iBAAZ,CAAlC;;AAEO,IAAMc,gCAAY,SAAZA,SAAY,CAACnC,GAAD,EAAMQ,EAAN,EAAa;AACpC,SAAO0B,0BAA0BlC,GAA1B,EAA+BoC,MAA/B,CAAsC5B,EAAtC,CAAP;AACD,CAFM","file":"watchFile.js","sourcesContent":["import { createSignal } from \"@dmail/signal\"\nimport fs from \"fs\"\nimport { memoizeSync } from \"../../memoize.js\"\n\nconst getModificationDate = (url) => {\n  return new Promise((resolve, reject) => {\n    fs.stat(url, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat.mtime)\n      }\n    })\n  })\n}\n\nconst guardAsync = (fn, shield) => (...args) => {\n  return Promise.resolve()\n    .then(() => shield(...args))\n    .then((shielded) => (shielded ? undefined : fn(...args)))\n}\n\nconst createChangedAsyncShield = ({ value, get, compare }) => {\n  let lastValue\n\n  return () => {\n    return Promise.all([\n      lastValue === undefined ? value : lastValue,\n      Promise.resolve().then(get),\n    ]).then(([previousValue, value]) => {\n      lastValue = value\n      return compare(previousValue, value)\n    })\n  }\n}\n\nconst createWatchSignal = (url) => {\n  // get mtime right now\n  const mtime = getModificationDate(url)\n\n  return createSignal({\n    installer: ({ emit }) => {\n      const shield = createChangedAsyncShield({\n        value: mtime,\n        get: () => getModificationDate(url),\n        compare: (modificationDate, nextModificationDate) =>\n          Number(modificationDate) !== Number(nextModificationDate),\n      })\n\n      // https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_fswatcher\n      const guardedEmit = guardAsync(emit, shield)\n      const watcher = fs.watch(url, { persistent: false }, (eventType, filename) => {\n        guardedEmit({ url, eventType, filename })\n      })\n      return () => watcher.close()\n    },\n  })\n}\n\nconst memoizedCreateWatchSignal = memoizeSync(createWatchSignal)\n\nexport const watchFile = (url, fn) => {\n  return memoizedCreateWatchSignal(url).listen(fn)\n}\n"]}