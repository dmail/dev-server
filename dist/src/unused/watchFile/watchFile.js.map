{
  "version": 3,
  "sources": [
    "../../../../src/unused/watchFile/watchFile.js"
  ],
  "names": [
    "getModificationDate",
    "url",
    "Promise",
    "resolve",
    "reject",
    "fs",
    "stat",
    "error",
    "mtime",
    "guardAsync",
    "fn",
    "shield",
    "args",
    "then",
    "shielded",
    "undefined",
    "createChangedAsyncShield",
    "value",
    "get",
    "compare",
    "lastValue",
    "all",
    "previousValue",
    "createWatchSignal",
    "installer",
    "emit",
    "modificationDate",
    "nextModificationDate",
    "Number",
    "guardedEmit",
    "watcher",
    "watch",
    "persistent",
    "eventType",
    "filename",
    "close",
    "memoizedCreateWatchSignal",
    "watchFile",
    "listen"
  ],
  "mappings": ";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,mBAAmB,GAAIC,GAAD,IAAS;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,gBAAGC,IAAH,CAAQL,GAAR,EAAa,CAACM,KAAD,EAAQD,IAAR,KAAiB;AAC5B,UAAIC,KAAJ,EAAW;AACTH,QAAAA,MAAM,CAACG,KAAD,CAAN;AACD,OAFD,MAEO;AACLJ,QAAAA,OAAO,CAACG,IAAI,CAACE,KAAN,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB,CAAC,GAAGC,IAAJ,KAAa;AAC9C,SAAOV,OAAO,CAACC,OAAR,GACJU,IADI,CACC,MAAMF,MAAM,CAAC,GAAGC,IAAJ,CADb,EAEJC,IAFI,CAEEC,QAAD,IAAeA,QAAQ,GAAGC,SAAH,GAAeL,EAAE,CAAC,GAAGE,IAAJ,CAFzC,CAAP;AAGD,CAJD;;AAMA,MAAMI,wBAAwB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA;AAAd,CAAD,KAA6B;AAC5D,MAAIC,SAAJ;AAEA,SAAO,MAAM;AACX,WAAOlB,OAAO,CAACmB,GAAR,CAAY,CACjBD,SAAS,KAAKL,SAAd,GAA0BE,KAA1B,GAAkCG,SADjB,EAEjBlB,OAAO,CAACC,OAAR,GAAkBU,IAAlB,CAAuBK,GAAvB,CAFiB,CAAZ,EAGJL,IAHI,CAGC,CAAC,CAACS,aAAD,EAAgBL,KAAhB,CAAD,KAA4B;AAClCG,MAAAA,SAAS,GAAGH,KAAZ;AACA,aAAOE,OAAO,CAACG,aAAD,EAAgBL,KAAhB,CAAd;AACD,KANM,CAAP;AAOD,GARD;AASD,CAZD;;AAcA,MAAMM,iBAAiB,GAAItB,GAAD,IAAS;AACjC;AACA,QAAMO,KAAK,GAAGR,mBAAmB,CAACC,GAAD,CAAjC;AAEA,SAAO,0BAAa;AAClBuB,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACvB,YAAMd,MAAM,GAAGK,wBAAwB,CAAC;AACtCC,QAAAA,KAAK,EAAET,KAD+B;AAEtCU,QAAAA,GAAG,EAAE,MAAMlB,mBAAmB,CAACC,GAAD,CAFQ;AAGtCkB,QAAAA,OAAO,EAAE,CAACO,gBAAD,EAAmBC,oBAAnB,KACPC,MAAM,CAACF,gBAAD,CAAN,KAA6BE,MAAM,CAACD,oBAAD;AAJC,OAAD,CAAvC,CADuB,CAQvB;;AACA,YAAME,WAAW,GAAGpB,UAAU,CAACgB,IAAD,EAAOd,MAAP,CAA9B;;AACA,YAAMmB,OAAO,GAAGzB,YAAG0B,KAAH,CAAS9B,GAAT,EAAc;AAAE+B,QAAAA,UAAU,EAAE;AAAd,OAAd,EAAqC,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC5EL,QAAAA,WAAW,CAAC;AAAE5B,UAAAA,GAAF;AAAOgC,UAAAA,SAAP;AAAkBC,UAAAA;AAAlB,SAAD,CAAX;AACD,OAFe,CAAhB;;AAGA,aAAO,MAAMJ,OAAO,CAACK,KAAR,EAAb;AACD;AAfiB,GAAb,CAAP;AAiBD,CArBD;;AAuBA,MAAMC,yBAAyB,GAAG,0BAAYb,iBAAZ,CAAlC;;AAEO,MAAMc,SAAS,GAAG,CAACpC,GAAD,EAAMS,EAAN,KAAa;AACpC,SAAO0B,yBAAyB,CAACnC,GAAD,CAAzB,CAA+BqC,MAA/B,CAAsC5B,EAAtC,CAAP;AACD,CAFM",
  "sourcesContent": [
    "import { createSignal } from \"@dmail/signal\"\nimport fs from \"fs\"\nimport { memoizeSync } from \"../../memoize.js\"\n\nconst getModificationDate = (url) => {\n  return new Promise((resolve, reject) => {\n    fs.stat(url, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat.mtime)\n      }\n    })\n  })\n}\n\nconst guardAsync = (fn, shield) => (...args) => {\n  return Promise.resolve()\n    .then(() => shield(...args))\n    .then((shielded) => (shielded ? undefined : fn(...args)))\n}\n\nconst createChangedAsyncShield = ({ value, get, compare }) => {\n  let lastValue\n\n  return () => {\n    return Promise.all([\n      lastValue === undefined ? value : lastValue,\n      Promise.resolve().then(get),\n    ]).then(([previousValue, value]) => {\n      lastValue = value\n      return compare(previousValue, value)\n    })\n  }\n}\n\nconst createWatchSignal = (url) => {\n  // get mtime right now\n  const mtime = getModificationDate(url)\n\n  return createSignal({\n    installer: ({ emit }) => {\n      const shield = createChangedAsyncShield({\n        value: mtime,\n        get: () => getModificationDate(url),\n        compare: (modificationDate, nextModificationDate) =>\n          Number(modificationDate) !== Number(nextModificationDate),\n      })\n\n      // https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_fswatcher\n      const guardedEmit = guardAsync(emit, shield)\n      const watcher = fs.watch(url, { persistent: false }, (eventType, filename) => {\n        guardedEmit({ url, eventType, filename })\n      })\n      return () => watcher.close()\n    },\n  })\n}\n\nconst memoizedCreateWatchSignal = memoizeSync(createWatchSignal)\n\nexport const watchFile = (url, fn) => {\n  return memoizedCreateWatchSignal(url).listen(fn)\n}\n"
  ]
}