{
  "version": 3,
  "sources": [
    "../../src/watchFile.js"
  ],
  "names": [
    "getModificationDate",
    "url",
    "Promise",
    "resolve",
    "reject",
    "fs",
    "stat",
    "error",
    "mtime",
    "guardAsync",
    "fn",
    "shield",
    "args",
    "then",
    "shielded",
    "undefined",
    "createChangedAsyncShield",
    "value",
    "get",
    "compare",
    "lastValue",
    "all",
    "previousValue",
    "limitRate",
    "ms",
    "canBeCalled",
    "setTimeout",
    "createWatchSignal",
    "installer",
    "emit",
    "modificationDate",
    "nextModificationDate",
    "Number",
    "guardedEmit",
    "watcher",
    "watch",
    "persistent",
    "eventType",
    "filename",
    "close",
    "memoizedCreateWatchSignal",
    "watchFile",
    "listen"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { createSignal } from \"@dmail/signal\"\nimport fs from \"fs\"\nimport { memoizeSync } from \"./memoize.js\"\n\nconst getModificationDate = (url) => {\n  return new Promise((resolve, reject) => {\n    fs.stat(url, (error, stat) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stat.mtime)\n      }\n    })\n  })\n}\n\nconst guardAsync = (fn, shield) => (...args) => {\n  return Promise.resolve()\n    .then(() => shield(...args))\n    .then((shielded) => {\n      return shielded ? undefined : fn(...args)\n    })\n}\n\nconst createChangedAsyncShield = ({ value, get, compare }) => {\n  let lastValue\n\n  return (...args) => {\n    return Promise.all([\n      lastValue === undefined ? value : lastValue,\n      Promise.resolve().then(() => get(...args)),\n    ]).then(([previousValue, value]) => {\n      lastValue = value\n      return !compare(previousValue, value)\n    })\n  }\n}\n\nconst limitRate = (fn, ms) => {\n  let canBeCalled = true\n  return (...args) => {\n    if (!canBeCalled) {\n      return undefined\n    }\n\n    canBeCalled = false\n    setTimeout(() => {\n      canBeCalled = true\n    }, ms)\n    return fn(...args)\n  }\n}\n\nconst createWatchSignal = (url) => {\n  // get mtime right now\n  const mtime = getModificationDate(url)\n\n  return createSignal({\n    installer: ({ emit }) => {\n      const shield = createChangedAsyncShield({\n        value: mtime,\n        get: () => getModificationDate(url),\n        compare: (modificationDate, nextModificationDate) => {\n          return Number(modificationDate) !== Number(nextModificationDate)\n        },\n      })\n\n      const guardedEmit = guardAsync(emit, shield)\n      // https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener\n      const watcher = fs.watch(\n        url,\n        { persistent: false },\n        limitRate((eventType, filename) => {\n          guardedEmit({ url, eventType, filename })\n        }, 100),\n      )\n      return () => watcher.close()\n    },\n  })\n}\n\nconst memoizedCreateWatchSignal = memoizeSync(createWatchSignal)\n\nexport const watchFile = (url, fn) => {\n  return memoizedCreateWatchSignal(url).listen(fn)\n}\n"
  ]
}