/*
 *
 */

import {
  fileSystemPathToUrl,
  isFileSystemPath,
  urlToFilename,
} from "@jsenv/urls";
import { takeFileSnapshot } from "../filesystem_snapshot.js";
import { createCaptureSideEffects } from "./create_capture_side_effects.js";
import { renderSideEffects, renderSmallLink } from "./render_side_effects.js";

export const snapshotTests = async (
  fnRegisteringTest,
  snapshotFileUrl,
  { rootDirectoryUrl, generatedBy = true } = {},
) => {
  const testMap = new Map();
  const onlyTestMap = new Map();
  const test = (scenario, fn, options) => {
    testMap.set(scenario, { fn, options, callSite: getTestCallSite() });
  };
  test.ONLY = (scenario, fn, options) => {
    onlyTestMap.set(scenario, { fn, options, callSite: getTestCallSite() });
  };
  fnRegisteringTest({ test });

  const activeTestMap = onlyTestMap.size ? onlyTestMap : testMap;
  const captureSideEffects = createCaptureSideEffects({
    rootDirectoryUrl,
  });
  let markdown = "";
  markdown += `# ${urlToFilename(snapshotFileUrl)}`;
  markdown += "\n\n";
  for (const [scenario, { fn, callSite }] of activeTestMap) {
    markdown += `## ${scenario}`;
    markdown += "\n\n";
    const sideEffects = await captureSideEffects(fn, { callSite });
    const sideEffectsMarkdown = renderSideEffects(sideEffects, {
      sideEffectFileUrl: snapshotFileUrl,
      outDirectoryUrl: new URL(
        `./${asValidFilename(scenario)}/`,
        snapshotFileUrl,
      ),
      generatedBy: false,
      titleLevel: 3,
    });
    markdown += sideEffectsMarkdown;
  }
  const sideEffectFileSnapshot = takeFileSnapshot(snapshotFileUrl);
  if (generatedBy) {
    let generatedByLink = renderSmallLink(
      {
        text: "@jsenv/snapshot",
        href: "https://github.com/jsenv/core/tree/main/packages/independent/snapshot",
      },
      { prefix: "Generated by " },
    );
    markdown += "\n\n";
    markdown += generatedByLink;
  }
  sideEffectFileSnapshot.update(markdown, { mockFluctuatingValues: false });
};

const getTestCallSite = () => {
  const { prepareStackTrace } = Error;
  Error.prepareStackTrace = (error, stack) => {
    Error.prepareStackTrace = prepareStackTrace;
    return stack;
  };
  const { stack } = new Error();
  Error.prepareStackTrace = prepareStackTrace;
  const callerCallsite = stack[2];
  const fileName = callerCallsite.getFileName();
  const testCallSite = {
    url:
      fileName && isFileSystemPath(fileName)
        ? fileSystemPathToUrl(fileName)
        : fileName,
    line: callerCallsite.getLineNumber(),
    column: callerCallsite.getColumnNumber(),
  };
  return testCallSite;
};

// see https://github.com/parshap/node-sanitize-filename/blob/master/index.js
const asValidFilename = (string) => {
  return string
    .trim()
    .toLowerCase()
    .replace(/[ ,.]/g, "_")
    .replace(/["/?<>\\:*|]/g, "");
};
