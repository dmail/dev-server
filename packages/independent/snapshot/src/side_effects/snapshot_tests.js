import { urlToFilename, urlToRelativeUrl } from "@jsenv/urls";
import { takeFileSnapshot } from "../filesystem_snapshot.js";
import { createCaptureSideEffects } from "./create_capture_side_effects.js";
import { renderSideEffects } from "./render_side_effects.js";

export const snapshotTests = async (
  fnRegisteringTest,
  snapshotFileUrl,
  {
    testFileUrl, // si on le passe on pourra dire executing X
    // footer genre "this file was generated by [@jsenv/snapshot]() executing [toto.test.js]()"
    generatedBy = true,
    // errorAsSvg, // pour @jsenv/assert
  },
) => {
  const testMap = new Map();
  const onlyTestMap = new Map();
  const test = (scenario, fn, options) => {
    testMap.set(scenario, { fn, options });
  };
  test.ONLY = (scenario, fn, options) => {
    onlyTestMap.set(scenario, { fn, options });
  };
  fnRegisteringTest({ test });

  const activeTestMap = onlyTestMap.size ? onlyTestMap : testMap;
  const captureSideEffects = createCaptureSideEffects({
    rootDirectoryUrl: testFileUrl ? new URL("./", testFileUrl) : null,
  });
  let markdown = "";
  markdown += `# ${urlToFilename(snapshotFileUrl)}`;
  markdown += "\n\n";
  for (const [scenario, scenarioCallback] of activeTestMap) {
    markdown += `## ${scenario}`;
    markdown += "\n\n";
    const sideEffects = await captureSideEffects(scenarioCallback);
    const sideEffectsMarkdown = renderSideEffects(sideEffects, {
      generatedBy: false,
      titleLevel: 3,
    });
    markdown += sideEffectsMarkdown;
  }
  const sideEffectFileSnapshot = takeFileSnapshot(snapshotFileUrl);
  if (generatedBy) {
    let generatedByLink = `Generated by [@jsenv/snapshot](https://github.com/jsenv/core/tree/main/packages/independent/snapshot)`;
    if (testFileUrl) {
      const testFileRelativeUrl = urlToRelativeUrl(
        testFileUrl,
        snapshotFileUrl,
      );
      generatedByLink += ` executing [${testFileRelativeUrl}](${testFileRelativeUrl})`;
    }
    markdown += "\n\n";
    markdown += generatedByLink;
  }
  sideEffectFileSnapshot.update(markdown, { mockFluctuatingValues: false });
};
