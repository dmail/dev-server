{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../../../src/internal/import-meta/import-meta-url-commonjs.js",
    "../../../../src/internal/filePathUtils.js",
    "../../../../src/internal/sourceMappingURLUtils.js",
    "../../../../src/internal/compiling/compile-directory/compile-asset.js",
    "../../../../src/internal/compiling/transformResultToCompilationResult.js",
    "../../src/jsenvCompilerForSass.js"
  ],
  "sourcesContent": [
    "/* global __filename */\n\nconst filenameContainsBackSlashes = __filename.indexOf(\"\\\\\") > -1\n\nconst url = filenameContainsBackSlashes\n  ? `file:///${__filename.replace(/\\\\/g, \"/\")}`\n  : `file://${__filename}`\n\nexport default url\n",
    "export const isWindowsFilePath = (path) => startsWithWindowsDriveLetter(path) && path[2] === \"\\\\\"\n\nexport const startsWithWindowsDriveLetter = (string) => {\n  const firstChar = string[0]\n  if (!/[a-zA-Z]/.test(firstChar)) return false\n\n  const secondChar = string[1]\n  if (secondChar !== \":\") return false\n\n  return true\n}\n\nexport const windowsFilePathToUrl = (windowsFilePath) => {\n  return `file:///${replaceBackSlashesWithSlashes(windowsFilePath)}`\n}\n\nexport const replaceBackSlashesWithSlashes = (string) => string.replace(/\\\\/g, \"/\")\n",
    "export const getJavaScriptSourceMappingUrl = (javaScriptSource) => {\n  let sourceMappingUrl\n  replaceSourceMappingUrl(javaScriptSource, javascriptSourceMappingUrlCommentRegexp, (value) => {\n    sourceMappingUrl = value\n  })\n  return sourceMappingUrl\n}\n\nexport const setJavaScriptSourceMappingUrl = (javaScriptSource, sourceMappingFileUrl) => {\n  let replaced\n  const sourceAfterReplace = replaceSourceMappingUrl(\n    javaScriptSource,\n    javascriptSourceMappingUrlCommentRegexp,\n    () => {\n      replaced = true\n      return sourceMappingFileUrl ? writeJavaScriptSourceMappingURL(sourceMappingFileUrl) : \"\"\n    },\n  )\n  if (replaced) {\n    return sourceAfterReplace\n  }\n\n  return sourceMappingFileUrl\n    ? `${javaScriptSource}\n${writeJavaScriptSourceMappingURL(sourceMappingFileUrl)}`\n    : javaScriptSource\n}\n\nexport const getCssSourceMappingUrl = (cssSource) => {\n  let sourceMappingUrl\n  replaceSourceMappingUrl(cssSource, cssSourceMappingUrlCommentRegExp, (value) => {\n    sourceMappingUrl = value\n  })\n  return sourceMappingUrl\n}\n\nexport const setCssSourceMappingUrl = (cssSource, sourceMappingFileUrl) => {\n  let replaced\n  const sourceAfterReplace = replaceSourceMappingUrl(\n    cssSource,\n    cssSourceMappingUrlCommentRegExp,\n    () => {\n      replaced = true\n      return sourceMappingFileUrl ? writeCssSourceMappingUrl(sourceMappingFileUrl) : \"\"\n    },\n  )\n  if (replaced) {\n    return sourceAfterReplace\n  }\n  return sourceMappingFileUrl\n    ? `${cssSource}\n${writeCssSourceMappingUrl(sourceMappingFileUrl)}`\n    : cssSource\n}\n\nconst javascriptSourceMappingUrlCommentRegexp = /\\/\\/ ?# ?sourceMappingURL=([^\\s'\"]+)/g\nconst cssSourceMappingUrlCommentRegExp = /\\/\\*# ?sourceMappingURL=([^\\s'\"]+) \\*\\//g\n\n// ${\"//#\"} is to avoid a parser thinking there is a sourceMappingUrl for this file\nconst writeJavaScriptSourceMappingURL = (value) => `${\"//#\"} sourceMappingURL=${value}`\nconst writeCssSourceMappingUrl = (value) => `/*# sourceMappingURL=${value} */`\n\nexport const sourcemapToBase64Url = (sourcemap) => {\n  const asBase64 = Buffer.from(JSON.stringify(sourcemap)).toString(\"base64\")\n  return `data:application/json;charset=utf-8;base64,${asBase64}`\n}\n\nconst replaceSourceMappingUrl = (source, regexp, callback) => {\n  let lastSourceMappingUrl\n  let matchSourceMappingUrl\n  while ((matchSourceMappingUrl = regexp.exec(source))) {\n    lastSourceMappingUrl = matchSourceMappingUrl\n  }\n  if (lastSourceMappingUrl) {\n    const index = lastSourceMappingUrl.index\n    const before = source.slice(0, index)\n    const after = source.slice(index)\n    const mappedAfter = after.replace(regexp, (match, firstGroup) => {\n      return callback(firstGroup)\n    })\n    return `${before}${mappedAfter}`\n  }\n  return source\n}\n",
    "import { urlToFilename } from \"@jsenv/util\"\n\nexport const urlIsAsset = (url) => {\n  const filename = urlToFilename(url)\n\n  // sourcemap are not inside the asset folder because\n  // of https://github.com/microsoft/vscode-chrome-debug-core/issues/544\n  if (filename.endsWith(\".map\")) {\n    return true\n  }\n\n  return filename.includes(\"__asset__\")\n}\n\nexport const getMetaJsonFileUrl = (compileFileUrl) =>\n  generateCompiledFileAssetUrl(compileFileUrl, \"meta.json\")\n\nexport const generateCompiledFileAssetUrl = (compiledFileUrl, assetName) => {\n  return `${compiledFileUrl}__asset__${assetName}`\n}\n",
    "import { resolveUrl, urlToRelativeUrl, readFile, ensureWindowsDriveLetter } from \"@jsenv/util\"\nimport {\n  replaceBackSlashesWithSlashes,\n  startsWithWindowsDriveLetter,\n  windowsFilePathToUrl,\n} from \"../filePathUtils.js\"\nimport {\n  setJavaScriptSourceMappingUrl,\n  setCssSourceMappingUrl,\n  sourcemapToBase64Url,\n} from \"../sourceMappingURLUtils.js\"\nimport { generateCompiledFileAssetUrl } from \"./compile-directory/compile-asset.js\"\n\nconst isWindows = process.platform === \"win32\"\n\nexport const transformResultToCompilationResult = async (\n  { code, map, contentType = \"application/javascript\", metadata = {} },\n  {\n    projectDirectoryUrl,\n    originalFileContent,\n    originalFileUrl,\n    compiledFileUrl,\n    sourcemapFileUrl,\n    sourcemapEnabled = true,\n    // removing sourcesContent from map decrease the sourceMap\n    // it also means client have to fetch source from server (additional http request)\n    // some client ignore sourcesContent property such as vscode-chrome-debugger\n    // Because it's the most complex scenario and we want to ensure client is always able\n    // to find source from the sourcemap, we remove map.sourcesContent by default to test this.\n    sourcemapExcludeSources = true,\n    sourcemapMethod = \"comment\", // \"comment\", \"inline\"\n  },\n) => {\n  if (typeof projectDirectoryUrl !== \"string\") {\n    throw new TypeError(`projectDirectoryUrl must be a string, got ${projectDirectoryUrl}`)\n  }\n  if (typeof originalFileContent !== \"string\") {\n    throw new TypeError(`originalFileContent must be a string, got ${originalFileContent}`)\n  }\n  if (typeof originalFileUrl !== \"string\") {\n    throw new TypeError(`originalFileUrl must be a string, got ${originalFileUrl}`)\n  }\n  if (typeof compiledFileUrl !== \"string\") {\n    throw new TypeError(`compiledFileUrl must be a string, got ${compiledFileUrl}`)\n  }\n  if (typeof sourcemapFileUrl !== \"string\") {\n    throw new TypeError(`sourcemapFileUrl must be a string, got ${sourcemapFileUrl}`)\n  }\n\n  const sources = []\n  const sourcesContent = []\n  const assets = []\n  const assetsContent = []\n\n  let output = code\n  if (sourcemapEnabled && map) {\n    if (map.sources.length === 0) {\n      // may happen in some cases where babel returns a wrong sourcemap\n      // there is at least one case where it happens\n      // a file with only import './whatever.js' inside\n      sources.push(originalFileUrl)\n      sourcesContent.push(originalFileContent)\n    } else {\n      await Promise.all(\n        map.sources.map(async (source, index) => {\n          // be careful here we might received C:/Directory/file.js path from babel\n          // also in case we receive relative path like directory\\file.js we replace \\ with slash\n          // for url resolution\n          const sourceFileUrl =\n            isWindows && startsWithWindowsDriveLetter(source)\n              ? windowsFilePathToUrl(source)\n              : ensureWindowsDriveLetter(\n                  resolveUrl(\n                    isWindows ? replaceBackSlashesWithSlashes(source) : source,\n                    sourcemapFileUrl,\n                  ),\n                  sourcemapFileUrl,\n                )\n\n          if (!sourceFileUrl.startsWith(projectDirectoryUrl)) {\n            // do not track dependency outside project\n            // it means cache stays valid for those external sources\n            return\n          }\n\n          map.sources[index] = urlToRelativeUrl(sourceFileUrl, sourcemapFileUrl)\n          sources[index] = sourceFileUrl\n\n          if (map.sourcesContent && map.sourcesContent[index]) {\n            sourcesContent[index] = map.sourcesContent[index]\n          } else {\n            const sourceFileContent = await readFile(sourceFileUrl)\n            sourcesContent[index] = sourceFileContent\n          }\n        }),\n      )\n    }\n\n    if (sourcemapExcludeSources) {\n      delete map.sourcesContent\n    }\n\n    // we don't need sourceRoot because our path are relative or absolute to the current location\n    // we could comment this line because it is not set by babel because not passed during transform\n    delete map.sourceRoot\n\n    const setSourceMappingUrl =\n      contentType === \"application/javascript\"\n        ? setJavaScriptSourceMappingUrl\n        : setCssSourceMappingUrl\n\n    if (sourcemapMethod === \"inline\") {\n      output = setSourceMappingUrl(output, sourcemapToBase64Url(map))\n    } else if (sourcemapMethod === \"comment\") {\n      const sourcemapFileRelativePathForModule = urlToRelativeUrl(sourcemapFileUrl, compiledFileUrl)\n      output = setSourceMappingUrl(output, sourcemapFileRelativePathForModule)\n      assets.push(sourcemapFileUrl)\n      assetsContent.push(stringifyMap(map))\n    }\n  } else {\n    sources.push(originalFileUrl)\n    sourcesContent.push(originalFileContent)\n  }\n\n  const { coverage } = metadata\n  if (coverage) {\n    const coverageAssetFileUrl = generateCompiledFileAssetUrl(compiledFileUrl, \"coverage.json\")\n    assets.push(coverageAssetFileUrl)\n    assetsContent.push(stringifyCoverage(coverage))\n  }\n\n  return {\n    compiledSource: output,\n    contentType,\n    sources,\n    sourcesContent,\n    assets,\n    assetsContent,\n  }\n}\n\nconst stringifyMap = (object) => JSON.stringify(object, null, \"  \")\n\nconst stringifyCoverage = (object) => JSON.stringify(object, null, \"  \")\n",
    "import { createRequire } from \"module\"\nimport { urlToContentType } from \"@jsenv/server\"\nimport { urlToFileSystemPath } from \"@jsenv/util\"\nimport { transformResultToCompilationResult } from \"../../../src/internal/compiling/transformResultToCompilationResult.js\"\n\nconst require = createRequire(import.meta.url)\n\nconst sass = require(\"sass\")\n\nexport const jsenvCompilerForSass = ({\n  projectDirectoryUrl,\n  originalFileUrl,\n  compiledFileUrl,\n  writeOnFilesystem,\n  sourcemapExcludeSources,\n}) => {\n  const contentType = urlToContentType(originalFileUrl)\n\n  if (contentType !== \"text/x-sass\" && contentType !== \"text/x-scss\") {\n    return null\n  }\n\n  return {\n    compile: (originalFileContent) => {\n      const result = sass.renderSync({\n        file: urlToFileSystemPath(originalFileUrl),\n        data: originalFileContent,\n        outFile: urlToFileSystemPath(compiledFileUrl),\n        sourceMap: true,\n        sourceMapContents: true,\n      })\n      const css = String(result.css)\n      const map = JSON.parse(String(result.map))\n\n      const sourcemapFileUrl = `${compiledFileUrl}.map`\n      return transformResultToCompilationResult(\n        {\n          code: css,\n          map,\n          contentType: \"text/css\",\n        },\n        {\n          projectDirectoryUrl,\n          originalFileContent,\n          originalFileUrl,\n          compiledFileUrl,\n          sourcemapFileUrl,\n          sourcemapMethod: writeOnFilesystem ? \"comment\" : \"inline\",\n          sourcemapExcludeSources,\n        },\n      )\n    },\n  }\n}\n"
  ],
  "names": [
    "filenameContainsBackSlashes",
    "__filename",
    "indexOf",
    "url",
    "replace",
    "startsWithWindowsDriveLetter",
    "string",
    "firstChar",
    "test",
    "secondChar",
    "windowsFilePathToUrl",
    "windowsFilePath",
    "replaceBackSlashesWithSlashes",
    "setJavaScriptSourceMappingUrl",
    "javaScriptSource",
    "sourceMappingFileUrl",
    "replaced",
    "sourceAfterReplace",
    "replaceSourceMappingUrl",
    "javascriptSourceMappingUrlCommentRegexp",
    "writeJavaScriptSourceMappingURL",
    "setCssSourceMappingUrl",
    "cssSource",
    "cssSourceMappingUrlCommentRegExp",
    "writeCssSourceMappingUrl",
    "value",
    "sourcemapToBase64Url",
    "sourcemap",
    "asBase64",
    "Buffer",
    "from",
    "JSON",
    "stringify",
    "toString",
    "source",
    "regexp",
    "callback",
    "lastSourceMappingUrl",
    "matchSourceMappingUrl",
    "exec",
    "index",
    "before",
    "slice",
    "after",
    "mappedAfter",
    "match",
    "firstGroup",
    "generateCompiledFileAssetUrl",
    "compiledFileUrl",
    "assetName",
    "isWindows",
    "process",
    "platform",
    "transformResultToCompilationResult",
    "code",
    "map",
    "contentType",
    "metadata",
    "projectDirectoryUrl",
    "originalFileContent",
    "originalFileUrl",
    "sourcemapFileUrl",
    "sourcemapEnabled",
    "sourcemapExcludeSources",
    "sourcemapMethod",
    "TypeError",
    "sources",
    "sourcesContent",
    "assets",
    "assetsContent",
    "output",
    "length",
    "push",
    "Promise",
    "all",
    "sourceFileUrl",
    "ensureWindowsDriveLetter",
    "resolveUrl",
    "startsWith",
    "urlToRelativeUrl",
    "sourceFileContent",
    "readFile",
    "sourceRoot",
    "setSourceMappingUrl",
    "sourcemapFileRelativePathForModule",
    "stringifyMap",
    "coverage",
    "coverageAssetFileUrl",
    "stringifyCoverage",
    "compiledSource",
    "object",
    "require",
    "createRequire",
    "sass",
    "jsenvCompilerForSass",
    "writeOnFilesystem",
    "urlToContentType",
    "compile",
    "result",
    "renderSync",
    "file",
    "urlToFileSystemPath",
    "data",
    "outFile",
    "sourceMap",
    "sourceMapContents",
    "css",
    "String",
    "parse"
  ],
  "mappings": "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"
}