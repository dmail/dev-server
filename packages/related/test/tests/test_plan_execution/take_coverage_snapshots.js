import prettier from "prettier";
import { chromium as playwrightChromium } from "playwright";
import { writeFileSync } from "@jsenv/filesystem";

import { reportCoverageAsHtml } from "@jsenv/test";
import { startFileServer } from "@jsenv/core/tests/start_file_server.js";

// take screenshot of coverage generated by istanbul
export const takeCoverageSnapshots = async (
  testPlanResult,
  snapshotDirectoryUrl,
  fileRelativeUrls,
) => {
  const coverageDirectoryUrl = new URL("./.coverage/", snapshotDirectoryUrl);
  reportCoverageAsHtml(testPlanResult, coverageDirectoryUrl);
  const browser = await playwrightChromium.launch();
  const page = await browser.newPage();
  const fileServer = await startFileServer({
    rootDirectoryUrl: coverageDirectoryUrl,
  });
  for (const fileRelativeUrl of fileRelativeUrls) {
    await page.goto(`${fileServer.origin}/${fileRelativeUrl}.html`);
    await page.setViewportSize({ width: 640, height: 670 }); // generate smaller screenshots
    const wrapperLocator = await page.locator(".wrapper");

    // screenshot
    {
      const screenshotFileUrl = new URL(
        `${fileRelativeUrl}.png`,
        snapshotDirectoryUrl,
      );
      const screenshotBuffer = await wrapperLocator.screenshot();
      writeFileSync(screenshotFileUrl, screenshotBuffer);
    }
    // snapshot
    {
      const snapshotFileUrl = new URL(
        `${fileRelativeUrl}.html`,
        snapshotDirectoryUrl,
      );
      const wrapperOuterHtml = await getLocatorOuterHtml(wrapperLocator);
      writeFileSync(snapshotFileUrl, wrapperOuterHtml);
    }
  }

  browser.close();
  fileServer.stop();
};

const getLocatorOuterHtml = async (locator) => {
  const outerHTML = await locator.evaluate((el) => el.outerHTML);
  const outerHTMLFormatted = await prettier.format(outerHTML, {
    parser: "html",
  });
  return outerHTMLFormatted;
};
