import { writeFileSync } from "node:fs"
import { chromium as playwrightChromium } from "playwright"
import { assert } from "@jsenv/assert"
import { startDevServer } from "@jsenv/core"

import { executeTestPlan, chromium, firefox, webkit } from "@jsenv/test"
import { startFileServer } from "@jsenv/core/tests/start_file_server.js"

const devServer = await startDevServer({
  logLevel: "warn",
  sourceDirectoryUrl: new URL("./", import.meta.url),
  keepProcessAlive: false,
  port: 0,
  outDirectoryUrl: new URL("./.jsenv/", import.meta.url),
  clientAutoreload: false,
  ribbon: false,
})
const { testPlanCoverage } = await executeTestPlan({
  logLevel: "warn",
  rootDirectoryUrl: new URL("./", import.meta.url),
  webServer: {
    origin: devServer.origin,
  },
  testPlan: {
    "./client/main.test.html": {
      chromium: {
        runtime: chromium(),
      },
      firefox: {
        runtime: firefox({
          disableOnWindowsBecauseFlaky: true,
        }),
      },
      webkit: {
        runtime: webkit(),
      },
    },
  },
  // keepRunning: true,
  coverageEnabled: true,
  coverageConfig: {
    "./client/file.js": true,
  },
  coverageMethodForBrowsers: "istanbul",
  coverageReportTextLog: false,
})

// take screenshot of coverage generated by istanbul
if (!process.env.CI) {
  const browser = await playwrightChromium.launch()
  const page = await browser.newPage()
  const fileServer = await startFileServer({
    rootDirectoryUrl: new URL("./.coverage/", import.meta.url),
  })
  await page.goto(`${fileServer.origin}/file.js.html`)
  await page.setViewportSize({ width: 640, height: 670 }) // generate smaller screenshots
  const screenshotBuffer = await page.screenshot()
  writeFileSync(
    new URL("./screenshots/file.js.html.png", import.meta.url),
    screenshotBuffer,
  )
  browser.close()
  fileServer.stop()
}

const actual = testPlanCoverage
const expected = {
  "./client/file.js": {
    ...actual["./client/file.js"],
    path: "./client/file.js",
  },
}
assert({ actual, expected })
