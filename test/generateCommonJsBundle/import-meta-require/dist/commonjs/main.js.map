{"version":3,"file":"main.js","sources":["/src/generateBabelPluginMapOption/import-meta-commonjs.js","/test/commonjs/import-meta-require/import-meta-require.js"],"sourcesContent":["// eslint-disable-next-line import/no-unresolved\nimport importMap from \"/importMap.json\"\nimport { normalizeImportMap } from \"@jsenv/import-map/src/normalizeImportMap/normalizeImportMap.js\"\nimport { resolveImport } from \"@jsenv/import-map/src/resolveImport/resolveImport.js\"\n\nconst nodeRequire = require\nexport { nodeRequire as require }\n\nconst filenameContainsBackSlashes = __filename.indexOf(\"\\\\\") > -1\n\nexport const url = filenameContainsBackSlashes\n  ? `file://${__filename.replace(/\\\\/g, \"/\")}`\n  : `file://${__filename}`\n\nexport const resolve = (specifier) => {\n  return resolveImport({\n    specifier,\n    importer: url,\n    importMap: memoizedGetImportMap(),\n    defaultExtension: false,\n  })\n}\n\n// better for perf and helps rollup to tree shake this out\n// when import.meta.resolve is not used\nlet memoizedImportMap\nconst memoizedGetImportMap = () => {\n  if (memoizedImportMap) return memoizedImportMap\n  memoizedImportMap = normalizeImportMap(importMap, url)\n  return memoizedImportMap\n}\n","const { readFile } = import.meta.require(\"fs\")\n\nexport default typeof readFile === \"function\" ? 42 : 40\n"],"names":["nodeRequire","require","filenameContainsBackSlashes","__filename","indexOf","url","replace","_require","readFile"],"mappings":";;AAAA;AACA,AAIA,IAAMA,WAAW,GAAGC,OAApB;AACA,AAEA,IAAMC,2BAA2B,GAAGC,UAAU,CAACC,OAAX,CAAmB,IAAnB,IAA2B,CAAC,CAAhE;AAEA,AAAO,IAAMC,GAAG,GAAGH,2BAA2B,oBAChCC,UAAU,CAACG,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CADgC,qBAEhCH,UAFgC,CAAvC;;gBCVcI,YAAoB,IAApB;IAAbC,qBAAAA;;AAER,wBAAe,OAAOA,QAAP,KAAoB,UAApB,GAAiC,EAAjC,GAAsC,EAArD;;;;"}