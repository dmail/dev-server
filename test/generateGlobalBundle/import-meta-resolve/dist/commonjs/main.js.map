{"version":3,"sources":["file:///.jsenv/BUNDLE_CONSTANTS.js","file:///importMap.json","/node_modules/@jsenv/core/helpers/babel/typeof/typeof.js","/node_modules/@jsenv/import-map/src/assertImportMap.js","/node_modules/@jsenv/import-map/src/hasScheme.js","/node_modules/@jsenv/href/src/hrefToScheme/hrefToScheme.js","/node_modules/@jsenv/href/src/hrefToPathname/hrefToPathname.js","/node_modules/@jsenv/href/src/hrefToOrigin/hrefToOrigin.js","/node_modules/@jsenv/href/src/pathnameToDirname/pathnameToDirname.js","/node_modules/@jsenv/import-map/src/resolveUrl/resolveUrl.js","/node_modules/@jsenv/import-map/src/tryUrlResolution.js","/node_modules/@jsenv/import-map/src/resolveSpecifier/resolveSpecifier.js","/node_modules/@jsenv/import-map/src/sortImportMap/sortImportMap.js","/node_modules/@jsenv/import-map/src/normalizeImportMap/normalizeImportMap.js","/node_modules/@jsenv/href/src/pathnameToExtension/pathnameToExtension.js","/node_modules/@jsenv/import-map/src/applyImportMap/applyImportMap.js","/node_modules/@jsenv/import-map/src/resolveImport/resolveImport.js","/src/generateBabelPluginMapOption/import-meta-global.js","/test/global/import-meta-resolve/import-meta-resolve.js"],"names":["chunkId","nativeTypeOf","customTypeOf","obj","Symbol","assertImportMap","value","type","Array","hasScheme","hrefToScheme","colonIndex","href","hrefToPathname","ressourceToPathname","hrefToRessource","scheme","afterProtocol","pathnameSlashIndex","searchSeparatorIndex","ressource","hrefToOrigin","secondProtocolSlashIndex","pathnameToDirname","slashLastIndex","pathname","resolveUrl","writeBaseUrlMustBeAString","baseUrl","specifier","writeBaseUrlMustBeAbsolute","writeBaseUrlRequired","baseOrigin","basePathname","baseDirname","unresolvedPathname","importerFolders","resolvedPathname","tryUrlResolution","result","resolveSpecifier","sortImports","importsSorted","Object","imports","sortScopes","scopesSorted","scopes","compareLengthOrLocaleCompare","b","a","normalizeImportMap","formulateBaseUrlMustBeAString","importMap","normalizeImports","normalizeScopes","undefined","importsNormalized","address","console","formulateAddressMustBeAString","specifierResolved","addressUrl","formulateAdressResolutionFailed","formulateAddressUrlRequiresTrailingSlash","scopesNormalized","scopeValue","scopeUrl","formulateScopeResolutionFailed","scope","scopeValueNormalized","addressURL","pathnameToExtension","dotLastIndex","applyImportMap","importer","writeSpecifierMustBeAString","writeImporterMustBeAString","writeImporterMustBeAbsolute","specifierUrl","specifierNormalized","scopeKeyMatching","scopeKey","specifierIsPrefixOf","remappingFromScopeImports","applyImports","remappingFromImports","writeBareSpecifierMustBeRemapped","importKeyArray","i","importKey","importValue","afterImportKey","specifierHref","resolveImport","defaultExtension","applyDefaultExtension","url","extension","importerPathname","importerExtension","currentScript","document","resolve","memoizedGetImportMap","memoizedImportMap","basic","_resolve","remapped"],"mappings":";;;AAAO,MAAMA,OAAO,GAAb,SAAA;ACAP,MAAA,SAAA,GAAA,EAAA;;ACAA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,GAAA,EAAA;AAAA,WAAS,OAAT,GAAA;AAArB,GAAA;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,GAAA,EAAS;AAC5B,WAAOC,GAAG,IACR,OAAA,MAAA,KADKA,UAAAA,IAELA,GAAG,CAAHA,WAAAA,KAFKA,MAAAA,IAGLA,GAAG,KAAKC,MAAM,CAHTD,SAAAA,GAAAA,QAAAA,GAKH,OALJ,GAAA;AADF,GAAA;;AASA,MAAA,OAAA,GAAe,OAAA,MAAA,KAAA,UAAA,IAAgC,OAAOC,MAAM,CAAb,QAAA,KAAhC,QAAA,GAAA,YAAA,GAAf,YAAA;;ACXO,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAW;AACxC,QAAIC,KAAK,KAAT,IAAA,EAAoB;AAClB,YAAM,IAAA,SAAA,CAAN,0CAAM,CAAN;AACD;;AAED,QAAMC,IAAI,GAAA,OAAA,CAAV,KAAU,CAAV;;AACA,QAAIA,IAAI,KAAR,QAAA,EAAuB;AACrB,YAAM,IAAA,SAAA,CAAA,4CAAA,MAAA,CAAN,KAAM,CAAA,CAAN;AACD;;AAED,QAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxB,YAAM,IAAA,SAAA,CAAA,kDAAA,MAAA,CAAN,KAAM,CAAA,CAAN;AACD;AAZI,GAAA;;ACAA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,MAAA,EAAY;AACnC,WAAO,iBAAA,IAAA,CAAP,MAAO,CAAP;AADK,GAAA;;ACAA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAU;AACpC,QAAMC,UAAU,GAAGC,IAAI,CAAJA,OAAAA,CAAnB,GAAmBA,CAAnB;AACA,QAAID,UAAU,KAAK,CAAnB,CAAA,EAAuB,OAAA,EAAA;AACvB,WAAOC,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAP,UAAOA,CAAP;AAHK,GAAA;;ACEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAU;AACtC,WAAOC,mBAAmB,CAACC,eAAe,CAA1C,IAA0C,CAAhB,CAA1B;AADK,GAAA;;AAIP,MAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAU;AAChC,QAAMC,MAAM,GAAGN,YAAY,CAA3B,IAA2B,CAA3B;;AAEA,QAAIM,MAAM,KAAV,MAAA,EAAuB;AACrB,aAAOJ,IAAI,CAAJA,KAAAA,CAAW,UAAlB,MAAOA,CAAP;AACD;;AAED,QAAII,MAAM,KAANA,OAAAA,IAAsBA,MAAM,KAAhC,MAAA,EAA6C;AAC3C;AACA,UAAMC,aAAa,GAAGL,IAAI,CAAJA,KAAAA,CAAWI,MAAM,CAANA,MAAAA,GAAgB,MAAjD,MAAsBJ,CAAtB;AACA,UAAMM,kBAAkB,GAAGD,aAAa,CAAbA,OAAAA,CAAAA,GAAAA,EAA2B,MAAtD,MAA2BA,CAA3B;AACA,aAAOA,aAAa,CAAbA,KAAAA,CAAP,kBAAOA,CAAP;AACD;;AAED,WAAOL,IAAI,CAAJA,KAAAA,CAAWI,MAAM,CAANA,MAAAA,GAAlB,CAAOJ,CAAP;AAdF,GAAA;;AAiBA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,SAAA,EAAe;AACzC,QAAMK,oBAAoB,GAAGC,SAAS,CAATA,OAAAA,CAA7B,GAA6BA,CAA7B;AACA,WAAOD,oBAAoB,KAAK,CAAzBA,CAAAA,GAAAA,SAAAA,GAA0CC,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAjD,oBAAiDA,CAAjD;AAFF,GAAA;;ACrBO,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAU;AACpC,QAAML,MAAM,GAAGN,YAAY,CAA3B,IAA2B,CAA3B;;AAEA,QAAIM,MAAM,KAAV,MAAA,EAAuB;AACrB,aAAA,SAAA;AACD;;AAED,QAAIA,MAAM,KAANA,MAAAA,IAAqBA,MAAM,KAA/B,OAAA,EAA6C;AAC3C,UAAMM,wBAAwB,GAAGN,MAAM,CAANA,MAAAA,GAAgB,MAAjD,MAAA;AACA,UAAME,kBAAkB,GAAGN,IAAI,CAAJA,OAAAA,CAAAA,GAAAA,EAA3B,wBAA2BA,CAA3B;AAEA,UAAIM,kBAAkB,KAAK,CAA3B,CAAA,EAA+B,OAAA,IAAA;AAC/B,aAAON,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAP,kBAAOA,CAAP;AACD;;AAED,WAAOA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAcI,MAAM,CAANA,MAAAA,GAArB,CAAOJ,CAAP;AAfK,GAAA;;ACFA,MAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,QAAA,EAAc;AAC7C,QAAMC,cAAc,GAAGC,QAAQ,CAARA,WAAAA,CAAvB,GAAuBA,CAAvB;AACA,QAAID,cAAc,KAAK,CAAvB,CAAA,EAA2B,OAAA,EAAA;AAE3B,WAAOC,QAAQ,CAARA,KAAAA,CAAAA,CAAAA,EAAP,cAAOA,CAAP;AAJK,GAAA,C,CCAP;;;AAQO,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,SAAA,EAAA,OAAA,EAAwB;AAChD,QAAA,OAAA,EAAa;AACX,UAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/B,cAAM,IAAA,SAAA,CAAcC,yBAAyB,CAAC;AAAEC,UAAAA,OAAO,EAAT,OAAA;AAAWC,UAAAA,SAAS,EAATA;AAAX,SAAD,CAAvC,CAAN;AACD;;AACD,UAAI,CAACpB,SAAS,CAAd,OAAc,CAAd,EAAyB;AACvB,cAAM,IAAA,KAAA,CAAUqB,0BAA0B,CAAC;AAAEF,UAAAA,OAAO,EAAT,OAAA;AAAWC,UAAAA,SAAS,EAATA;AAAX,SAAD,CAApC,CAAN;AACD;AACF;;AAED,QAAIpB,SAAS,CAAb,SAAa,CAAb,EAA0B;AACxB,aAAA,SAAA;AACD;;AAED,QAAI,CAAJ,OAAA,EAAc;AACZ,YAAM,IAAA,KAAA,CAAUsB,oBAAoB,CAAC;AAAEH,QAAAA,OAAO,EAAT,OAAA;AAAWC,QAAAA,SAAS,EAATA;AAAX,OAAD,CAA9B,CAAN;AAf8C,KAAA,CAAA;;;AAmBhD,QAAIA,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,IAAA,EAAoC;AAClC,aAAA,GAAA,MAAA,CAAUnB,YAAY,CAAtB,OAAsB,CAAtB,EAAA,GAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AApB8C,KAAA,CAAA;;;AAwBhD,QAAImB,SAAS,CAATA,CAAS,CAATA,KAAJ,GAAA,EAA0B;AACxB,aAAA,GAAA,MAAA,CAAUR,YAAY,CAAtB,OAAsB,CAAtB,EAAA,MAAA,CAAA,SAAA,CAAA;AACD;;AAED,QAAMW,UAAU,GAAGX,YAAY,CAA/B,OAA+B,CAA/B;AACA,QAAMY,YAAY,GAAGpB,cAAc,CAAnC,OAAmC,CAAnC;;AAEA,QAAIgB,SAAS,KAAb,GAAA,EAAuB;AACrB,UAAMK,WAAW,GAAGX,iBAAiB,CAArC,YAAqC,CAArC;AACA,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,WAAA,EAAA,GAAA,CAAA;AAjC8C,KAAA,CAAA;;;AAqChD,QAAIM,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,IAAA,EAAoC;AAClC,UAAMK,YAAW,GAAGX,iBAAiB,CAArC,YAAqC,CAArC;;AACA,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,YAAA,EAAA,GAAA,EAAA,MAAA,CAAsCM,SAAS,CAATA,KAAAA,CAAtC,CAAsCA,CAAtC,CAAA;AAvC8C,KAAA,CAAA;;;AA2ChD,QAAIA,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,KAAA,EAAqC;AACnC,UAAIM,kBAAkB,GAAtB,SAAA;AACA,UAAMC,eAAe,GAAGH,YAAY,CAAZA,KAAAA,CAAxB,GAAwBA,CAAxB;AACAG,MAAAA,eAAe,CAAfA,GAAAA;;AAEA,aAAOD,kBAAkB,CAAlBA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAP,KAAA,EAAiD;AAC/CA,QAAAA,kBAAkB,GAAGA,kBAAkB,CAAlBA,KAAAA,CAD0B,CAC1BA,CAArBA,CAD+C,CAAA;AAG/C;;AACA,YAAIC,eAAe,CAAnB,MAAA,EAA4B;AAC1BA,UAAAA,eAAe,CAAfA,GAAAA;AACD;AACF;;AAED,UAAMC,gBAAgB,GAAA,GAAA,MAAA,CAAMD,eAAe,CAAfA,IAAAA,CAAN,GAAMA,CAAN,EAAA,GAAA,EAAA,MAAA,CAAtB,kBAAsB,CAAtB;AACA,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,gBAAA,CAAA;AA1D8C,KAAA,CAAA;;;AA8DhD,QAAIH,YAAY,KAAhB,EAAA,EAAyB;AACvB,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,GAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AACD;;AACD,QAAIA,YAAY,CAACA,YAAY,CAAzBA,MAAY,CAAZA,KAAJ,GAAA,EAA+C;AAC7C,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,YAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AACD;;AACD,WAAA,GAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAuBV,iBAAiB,CAAxC,YAAwC,CAAxC,EAAA,GAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AApEK,GAAA;;AAuEP,MAAMI,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,IAAA,EAAA;AAAA,QAAGC,OAAH,GAAA,IAAA,CAAA,OAAA;AAAA,QAAYC,SAAZ,GAAA,IAAA,CAAA,SAAA;AAAA,WAAA,gDAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAlC,GAAA;;AAMA,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAA,KAAA,EAAA;AAAA,QAAGF,OAAH,GAAA,KAAA,CAAA,OAAA;AAAA,QAAYC,SAAZ,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,gDAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAnC,GAAA;;AAMA,MAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,KAAA,EAAA;AAAA,QAC3BH,OAD2B,GAAA,KAAA,CAAA,OAAA;AAAA,QAE3BC,SAF2B,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,sEAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAA7B,GAAA;;ACxFO,MAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,MAAA,EAAA,GAAA,EAAiB;AAC/C,QAAMC,MAAM,GAAGb,UAAU,CAAA,MAAA,EAAzB,GAAyB,CAAzB;AACA,WAAOjB,SAAS,CAATA,MAAS,CAATA,GAAAA,MAAAA,GAAP,IAAA;AAFK,GAAA;;ACAA,MAAM+B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,SAAA,EAAA,QAAA,EAAyB;AACvD,QAAIX,SAAS,CAATA,CAAS,CAATA,KAAAA,GAAAA,IAAwBA,SAAS,CAATA,UAAAA,CAAxBA,IAAwBA,CAAxBA,IAAsDA,SAAS,CAATA,UAAAA,CAA1D,KAA0DA,CAA1D,EAAuF;AACrF,aAAOH,UAAU,CAAA,SAAA,EAAjB,QAAiB,CAAjB;AACD;;AAED,QAAIjB,SAAS,CAAb,SAAa,CAAb,EAA0B;AACxB,aAAA,SAAA;AACD;;AAED,WAAA,IAAA;AATK,GAAA;;ACSA,MAAMgC,WAAW,GAAG,SAAdA,WAAc,CAAA,OAAA,EAAa;AACtC,QAAMC,aAAa,GAAnB,EAAA;AACAC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,IAAAA,CAAAA,4BAAAA,EAAAA,OAAAA,CAEW,UAAA,IAAA,EAAU;AACjBD,MAAAA,aAAa,CAAbA,IAAa,CAAbA,GAAsBE,OAAO,CAA7BF,IAA6B,CAA7BA;AAHJC,KAAAA;AAKA,WAAA,aAAA;AAPK,GAAA;;AAUA,MAAME,UAAU,GAAG,SAAbA,UAAa,CAAA,MAAA,EAAY;AACpC,QAAMC,YAAY,GAAlB,EAAA;AACAH,IAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,IAAAA,CAAAA,4BAAAA,EAAAA,OAAAA,CAEW,UAAA,SAAA,EAAe;AACtBG,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAA0BL,WAAW,CAACM,MAAM,CAA5CD,SAA4C,CAAP,CAArCA;AAHJH,KAAAA;AAKA,WAAA,YAAA;AAPK,GAAA;;AAUP,MAAMK,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAA,CAAA,EAAA,CAAA,EAAU;AAC7C,WAAOC,CAAC,CAADA,MAAAA,GAAWC,CAAC,CAAZD,MAAAA,IAAuBC,CAAC,CAADA,aAAAA,CAA9B,CAA8BA,CAA9B;AADF,GAAA;;AC1BO,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,SAAA,EAAA,OAAA,EAAwB;AACxD9C,IAAAA,eAAe,CAAfA,SAAe,CAAfA;;AACA,QAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/B,YAAM,IAAA,SAAA,CAAc+C,6BAA6B,CAAC;AAAExB,QAAAA,OAAO,EAAPA;AAAF,OAAD,CAA3C,CAAN;AACD;;AAJuD,QAMhDgB,OANgD,GAM5BS,SAN4B,CAAA,OAAA;AAAA,QAMvCN,MANuC,GAM5BM,SAN4B,CAAA,MAAA;AAQxD,WAAO;AACLT,MAAAA,OAAO,EAAEA,OAAO,GAAGU,gBAAgB,CAAA,OAAA,EAAnB,OAAmB,CAAnB,GADX,SAAA;AAELP,MAAAA,MAAM,EAAEA,MAAM,GAAGQ,eAAe,CAAA,MAAA,EAAlB,OAAkB,CAAlB,GAAsCC;AAF/C,KAAP;AARK,GAAA;;AAcP,MAAMF,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,OAAA,EAAA,OAAA,EAAsB;AAC7C,QAAMG,iBAAiB,GAAvB,EAAA;AACAd,IAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,CAA6B,UAAA,SAAA,EAAe;AAC1C,UAAMe,OAAO,GAAGd,OAAO,CAAvB,SAAuB,CAAvB;;AAEA,UAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/Be,QAAAA,OAAO,CAAPA,IAAAA,CACEC,6BAA6B,CAAC;AAC5BF,UAAAA,OAAO,EADqB,OAAA;AAE5B7B,UAAAA,SAAS,EAATA;AAF4B,SAAD,CAD/B8B;AAMA;AACD;;AAED,UAAME,iBAAiB,GAAGrB,gBAAgB,CAAA,SAAA,EAAhBA,OAAgB,CAAhBA,IAA1B,SAAA;AAEA,UAAMsB,UAAU,GAAGxB,gBAAgB,CAAA,OAAA,EAAnC,OAAmC,CAAnC;;AACA,UAAIwB,UAAU,KAAd,IAAA,EAAyB;AACvBH,QAAAA,OAAO,CAAPA,IAAAA,CACEI,+BAA+B,CAAC;AAC9BL,UAAAA,OAAO,EADuB,OAAA;AAE9B9B,UAAAA,OAAO,EAFuB,OAAA;AAG9BC,UAAAA,SAAS,EAATA;AAH8B,SAAD,CADjC8B;AAOA;AACD;;AAED,UAAI9B,SAAS,CAATA,QAAAA,CAAAA,GAAAA,KAA2B,CAACiC,UAAU,CAAVA,QAAAA,CAAhC,GAAgCA,CAAhC,EAA0D;AACxDH,QAAAA,OAAO,CAAPA,IAAAA,CACEK,wCAAwC,CAAC;AACvCF,UAAAA,UAAU,EAD6B,UAAA;AAEvCJ,UAAAA,OAAO,EAFgC,OAAA;AAGvC7B,UAAAA,SAAS,EAATA;AAHuC,SAAD,CAD1C8B;AAOA;AACD;;AACDF,MAAAA,iBAAiB,CAAjBA,iBAAiB,CAAjBA,GAAAA,UAAAA;AArCFd,KAAAA;AAuCA,WAAOF,WAAW,CAAlB,iBAAkB,CAAlB;AAzCF,GAAA;;AA4CA,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAA,MAAA,EAAA,OAAA,EAAqB;AAC3C,QAAMU,gBAAgB,GAAtB,EAAA;AACAtB,IAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,KAAA,EAAW;AACrC,UAAMuB,UAAU,GAAGnB,MAAM,CAAzB,KAAyB,CAAzB;AACA,UAAMoB,QAAQ,GAAG7B,gBAAgB,CAAA,KAAA,EAAjC,OAAiC,CAAjC;;AACA,UAAI6B,QAAQ,KAAZ,IAAA,EAAuB;AACrBR,QAAAA,OAAO,CAAPA,IAAAA,CACES,8BAA8B,CAAC;AAC7BC,UAAAA,KAAK,EADwB,KAAA;AAE7BzC,UAAAA,OAAO,EAAPA;AAF6B,SAAD,CADhC+B;AAMA;AACD;;AACD,UAAMW,oBAAoB,GAAGhB,gBAAgB,CAAA,UAAA,EAA7C,OAA6C,CAA7C;AACAW,MAAAA,gBAAgB,CAAhBA,QAAgB,CAAhBA,GAAAA,oBAAAA;AAbFtB,KAAAA;AAeA,WAAOE,UAAU,CAAjB,gBAAiB,CAAjB;AAjBF,GAAA;;AAoBA,MAAMO,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAA,IAAA,EAAA;AAAA,QAAGxB,OAAH,GAAA,IAAA,CAAA,OAAA;AAAA,WAAA,gDAAA,MAAA,CAAA,OAAA,CAAA;AAAtC,GAAA;;AAIA,MAAMgC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAA,KAAA,EAAA;AAAA,QAAG/B,SAAH,GAAA,KAAA,CAAA,SAAA;AAAA,QAAc6B,OAAd,GAAA,KAAA,CAAA,OAAA;AAAA,WAAA,+CAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAtC,GAAA;;AAMA,MAAMK,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAA,KAAA,EAAA;AAAA,QACtCL,OADsC,GAAA,KAAA,CAAA,OAAA;AAAA,QAEtC9B,OAFsC,GAAA,KAAA,CAAA,OAAA;AAAA,QAGtCC,SAHsC,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,oDAAA,MAAA,CAAA,OAAA,EAAA,sBAAA,EAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAxC,GAAA;;AAYA,MAAMmC,wCAAwC,GAAG,SAA3CA,wCAA2C,CAAA,KAAA,EAAA;AAAA,QAC/CO,UAD+C,GAAA,KAAA,CAAA,UAAA;AAAA,QAE/Cb,OAF+C,GAAA,KAAA,CAAA,OAAA;AAAA,QAG/C7B,SAH+C,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,kDAAA,MAAA,CAAA,UAAA,EAAA,qBAAA,EAAA,MAAA,CAAA,OAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAjD,GAAA;;AAYA,MAAMuC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAAA,KAAA,EAAA;AAAA,QAAGC,KAAH,GAAA,KAAA,CAAA,KAAA;AAAA,QAAUzC,OAAV,GAAA,KAAA,CAAA,OAAA;AAAA,WAAA,gDAAA,MAAA,CAAA,KAAA,EAAA,sBAAA,EAAA,MAAA,CAAA,OAAA,CAAA;AAAvC,GAAA;;ACtHO,MAAM4C,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,QAAA,EAAc;AAC/C,QAAMhD,cAAc,GAAGC,QAAQ,CAARA,WAAAA,CAAvB,GAAuBA,CAAvB;;AACA,QAAID,cAAc,KAAK,CAAvB,CAAA,EAA2B;AACzBC,MAAAA,QAAQ,GAAGA,QAAQ,CAARA,KAAAA,CAAeD,cAAc,GAAxCC,CAAWA,CAAXA;AACD;;AAED,QAAMgD,YAAY,GAAGhD,QAAQ,CAARA,WAAAA,CAArB,GAAqBA,CAArB;AACA,QAAIgD,YAAY,KAAK,CAArB,CAAA,EAAyB,OAPsB,EAOtB,CAPsB,CAAA;;AAS/C,WAAOhD,QAAQ,CAARA,KAAAA,CAAP,YAAOA,CAAP;AATK,GAAA;;ACKA,MAAMiD,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAwC;AAAA,QAArCrB,SAAqC,GAAA,IAAA,CAArCA,SAAqC;AAAA,QAA1BxB,SAA0B,GAAA,IAAA,CAA1BA,SAA0B;AAAA,QAAf8C,QAAe,GAAA,IAAA,CAAfA,QAAe;AACpEtE,IAAAA,eAAe,CAAfA,SAAe,CAAfA;;AACA,QAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AACjC,YAAM,IAAA,SAAA,CAAcuE,2BAA2B,CAAC;AAAE/C,QAAAA,SAAS,EAAX,SAAA;AAAa8C,QAAAA,QAAQ,EAARA;AAAb,OAAD,CAAzC,CAAN;AACD;;AACD,QAAA,QAAA,EAAc;AACZ,UAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,cAAM,IAAA,SAAA,CAAcE,0BAA0B,CAAC;AAAEF,UAAAA,QAAQ,EAAV,QAAA;AAAY9C,UAAAA,SAAS,EAATA;AAAZ,SAAD,CAAxC,CAAN;AACD;;AACD,UAAI,CAACpB,SAAS,CAAd,QAAc,CAAd,EAA0B;AACxB,cAAM,IAAA,KAAA,CAAUqE,2BAA2B,CAAC;AAAEH,UAAAA,QAAQ,EAAV,QAAA;AAAY9C,UAAAA,SAAS,EAATA;AAAZ,SAAD,CAArC,CAAN;AACD;AACF;;AAED,QAAMkD,YAAY,GAAGvC,gBAAgB,CAAA,SAAA,EAArC,QAAqC,CAArC;AACA,QAAMwC,mBAAmB,GAAGD,YAAY,IAAxC,SAAA;AAfoE,QAiB5DhC,MAjB4D,GAiBjDM,SAjBiD,CAAA,MAAA;;AAkBpE,QAAIN,MAAM,IAAV,QAAA,EAAwB;AACtB,UAAMkC,gBAAgB,GAAG,MAAM,CAAN,IAAA,CAAA,MAAA,EAAA,IAAA,CAAyB,UAAA,QAAA,EAAc;AAC9D,eAAOC,QAAQ,KAARA,QAAAA,IAAyBC,mBAAmB,CAAA,QAAA,EAAnD,QAAmD,CAAnD;AADF,OAAyB,CAAzB;;AAGA,UAAA,gBAAA,EAAsB;AACpB,YAAMjB,UAAU,GAAGnB,MAAM,CAAzB,gBAAyB,CAAzB;AACA,YAAMqC,yBAAyB,GAAGC,YAAY,CAAA,mBAAA,EAA9C,UAA8C,CAA9C;;AACA,YAAID,yBAAyB,KAA7B,IAAA,EAAwC;AACtC,iBAAA,yBAAA;AACD;AACF;AACF;;AA7BmE,QA+B5DxC,OA/B4D,GA+BhDS,SA/BgD,CAAA,OAAA;;AAgCpE,QAAA,OAAA,EAAa;AACX,UAAMiC,oBAAoB,GAAGD,YAAY,CAAA,mBAAA,EAAzC,OAAyC,CAAzC;;AACA,UAAIC,oBAAoB,KAAxB,IAAA,EAAmC;AACjC,eAAA,oBAAA;AACD;AACF;;AAED,QAAA,YAAA,EAAkB;AAChB,aAAA,YAAA;AACD;;AAED,UAAM,IAAA,KAAA,CAAUC,gCAAgC,CAAC;AAAE1D,MAAAA,SAAS,EAAX,SAAA;AAAa8C,MAAAA,QAAQ,EAARA;AAAb,KAAD,CAA1C,CAAN;AA3CK,GAAA;;AA8CP,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAAA,SAAA,EAAA,OAAA,EAAwB;AAC3C,QAAMG,cAAc,GAAG7C,MAAM,CAANA,IAAAA,CAAvB,OAAuBA,CAAvB;AAEA,QAAI8C,CAAC,GAAL,CAAA;;AACA,WAAOA,CAAC,GAAGD,cAAc,CAAzB,MAAA,EAAkC;AAChC,UAAME,SAAS,GAAGF,cAAc,CAAhC,CAAgC,CAAhC;AACAC,MAAAA,CAAC;;AACD,UAAIC,SAAS,KAAb,SAAA,EAA6B;AAC3B,YAAMC,WAAW,GAAG/C,OAAO,CAA3B,SAA2B,CAA3B;AACA,eAAA,WAAA;AACD;;AACD,UAAIuC,mBAAmB,CAAA,SAAA,EAAvB,SAAuB,CAAvB,EAA+C;AAC7C,YAAMQ,YAAW,GAAG/C,OAAO,CAA3B,SAA2B,CAA3B;AACA,YAAMgD,cAAc,GAAG/D,SAAS,CAATA,KAAAA,CAAgB6D,SAAS,CAAhD,MAAuB7D,CAAvB;AAEA,eAAOS,gBAAgB,CAAA,cAAA,EAAvB,YAAuB,CAAvB;AACD;AACF;;AAED,WAAA,IAAA;AAnBF,GAAA;;AAsBA,MAAM6C,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,aAAA,EAAA,IAAA,EAAyB;AACnD,WAAOU,aAAa,CAACA,aAAa,CAAbA,MAAAA,GAAdA,CAAa,CAAbA,KAAAA,GAAAA,IAAmDjF,IAAI,CAAJA,UAAAA,CAA1D,aAA0DA,CAA1D;AADF,GAAA;;AAIA,MAAMgE,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAA,KAAA,EAAA;AAAA,QAAG/C,SAAH,GAAA,KAAA,CAAA,SAAA;AAAA,QAAc8C,QAAd,GAAA,KAAA,CAAA,QAAA;AAAA,WAAA,mDAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,MAAA,CAAA,QAAA,CAAA;AAApC,GAAA;;AAMA,MAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAA,KAAA,EAAA;AAAA,QAAGF,QAAH,GAAA,KAAA,CAAA,QAAA;AAAA,QAAa9C,SAAb,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,iDAAA,MAAA,CAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAAnC,GAAA;;AAMA,MAAMiD,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAA,KAAA,EAAA;AAAA,QAAGH,QAAH,GAAA,KAAA,CAAA,QAAA;AAAA,QAAa9C,SAAb,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,wDAAA,MAAA,CAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,SAAA,CAAA;AAApC,GAAA;;AAMA,MAAM0D,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAA,KAAA,EAAA;AAAA,QAAG1D,SAAH,GAAA,KAAA,CAAA,SAAA;AAAA,QAAc8C,QAAd,GAAA,KAAA,CAAA,QAAA;AAAA,WAAA,gDAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,MAAA,CAAA,QAAA,CAAA;AAAzC,GAAA,C,CC/FA;;;AASO,MAAMmB,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAiE;AAAA,QAA9DjE,SAA8D,GAAA,IAAA,CAA9DA,SAA8D;AAAA,QAAnD8C,QAAmD,GAAA,IAAA,CAAnDA,QAAmD;AAAA,QAAzCtB,SAAyC,GAAA,IAAA,CAAzCA,SAAyC;AAAA,QAAA,qBAAA,GAAA,IAAA,CAA9B0C,gBAA8B;AAAA,QAA9BA,gBAA8B,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAX,IAAW,GAAA,qBAAA;AAC5F,WAAOC,qBAAqB,CAAC;AAC3BC,MAAAA,GAAG,EAAE5C,SAAS,GACVqB,cAAc,CAAC;AAAErB,QAAAA,SAAS,EAAX,SAAA;AAAaxB,QAAAA,SAAS,EAAtB,SAAA;AAAwB8C,QAAAA,QAAQ,EAARA;AAAxB,OAAD,CADJ,GAEVjD,UAAU,CAAA,SAAA,EAHa,QAGb,CAHa;AAI3BiD,MAAAA,QAAQ,EAJmB,QAAA;AAK3BoB,MAAAA,gBAAgB,EAAhBA;AAL2B,KAAD,CAA5B;AADK,GAAA;;AAUP,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,KAAA,EAAyC;AAAA,QAAtCC,GAAsC,GAAA,KAAA,CAAtCA,GAAsC;AAAA,QAAjCtB,QAAiC,GAAA,KAAA,CAAjCA,QAAiC;AAAA,QAAvBoB,gBAAuB,GAAA,KAAA,CAAvBA,gBAAuB;;AACrE,QAAIlF,cAAc,CAAdA,GAAc,CAAdA,KAAJ,GAAA,EAAiC;AAC/B,aAAA,GAAA;AACD;;AAED,QAAIoF,GAAG,CAAHA,QAAAA,CAAJ,GAAIA,CAAJ,EAAuB;AACrB,aAAA,GAAA;AACD;;AAED,QAAI,OAAA,gBAAA,KAAJ,QAAA,EAA0C;AACxC,UAAMC,SAAS,GAAG1B,mBAAmB,CAArC,GAAqC,CAArC;;AACA,UAAI0B,SAAS,KAAb,EAAA,EAAsB;AACpB,eAAA,GAAA,MAAA,CAAA,GAAA,EAAA,MAAA,CAAA,gBAAA,CAAA;AACD;;AACD,aAAA,GAAA;AACD;;AAED,QAAIH,gBAAgB,KAApB,IAAA,EAA+B;AAC7B,UAAMG,UAAS,GAAG1B,mBAAmB,CAArC,GAAqC,CAArC;;AACA,UAAI0B,UAAS,KAATA,EAAAA,IAAJ,QAAA,EAAkC;AAChC,YAAMC,gBAAgB,GAAGtF,cAAc,CAAvC,QAAuC,CAAvC;AACA,YAAMuF,iBAAiB,GAAG5B,mBAAmB,CAA7C,gBAA6C,CAA7C;AACA,eAAA,GAAA,MAAA,CAAA,GAAA,EAAA,MAAA,CAAA,iBAAA,CAAA;AACD;AACF;;AACD,WAAA,GAAA;AAzBF,GAAA,C,CCnBA;;;AACA,MAAA,SAAA,GAM0B8B,QAN1B;AAAA,MAMQD,aAAAA,GAAAA,SAAAA,CAAAA,aANR;AAQO,MAAMJ,GAAG,GAAII,aAAa,IAAIA,aAAa,CAA/B,GAACA,IAAuC,IAAA,GAAA,CAAA,OAAA,EAAiBC,QAAQ,CAAzB,OAAA,EAApD,IAAA;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,SAAA,EAAe;AACpC,WAAOT,aAAa,CAAC;AACnBjE,MAAAA,SAAS,EADU,SAAA;AAEnB8C,MAAAA,QAAQ,EAFW,GAAA;AAGnBtB,MAAAA,SAAS,EAAEmD,oBAHQ,EAAA;AAInBT,MAAAA,gBAAgB,EAAE;AAJC,KAAD,CAApB;AADK,GAAA,C,CAAA;AAUP;;;AACA,MAAA,iBAAA;;AACA,MAAMS,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,QAAA,iBAAA,EAAuB,OAAA,iBAAA;AACvBC,IAAAA,iBAAiB,GAAGtD,kBAAkB,CAAA,SAAA,EAAtCsD,GAAsC,CAAtCA;AACA,WAAA,iBAAA;AAHF,GAAA;;MCvBaC,KAAK,GAAGC,OAAAA,CAAd,WAAcA,C;AAErB,MAAaC,QAAQ,GAAGD,OAAAA,CAAjB,KAAiBA,CAAxB","sourcesContent":["export const chunkId = \"main.js\"","export default {}","const nativeTypeOf = (obj) => typeof obj\n\nconst customTypeOf = (obj) => {\n  return obj &&\n    typeof Symbol === \"function\" &&\n    obj.constructor === Symbol &&\n    obj !== Symbol.prototype\n    ? \"symbol\"\n    : typeof obj\n}\n\nexport default typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\"\n  ? nativeTypeOf\n  : customTypeOf\n","export const assertImportMap = (value) => {\n  if (value === null) {\n    throw new TypeError(`an importMap must be an object, got null`)\n  }\n\n  const type = typeof value\n  if (type !== \"object\") {\n    throw new TypeError(`an importMap must be an object, received ${value}`)\n  }\n\n  if (Array.isArray(value)) {\n    throw new TypeError(`an importMap must be an object, received array ${value}`)\n  }\n}\n","export const hasScheme = (string) => {\n  return /^[a-zA-Z]{2,}:/.test(string)\n}\n","export const hrefToScheme = (href) => {\n  const colonIndex = href.indexOf(\":\")\n  if (colonIndex === -1) return \"\"\n  return href.slice(0, colonIndex)\n}\n","import { hrefToScheme } from \"../hrefToScheme/hrefToScheme.js\"\n\nexport const hrefToPathname = (href) => {\n  return ressourceToPathname(hrefToRessource(href))\n}\n\nconst hrefToRessource = (href) => {\n  const scheme = hrefToScheme(href)\n\n  if (scheme === \"file\") {\n    return href.slice(\"file://\".length)\n  }\n\n  if (scheme === \"https\" || scheme === \"http\") {\n    // remove origin\n    const afterProtocol = href.slice(scheme.length + \"://\".length)\n    const pathnameSlashIndex = afterProtocol.indexOf(\"/\", \"://\".length)\n    return afterProtocol.slice(pathnameSlashIndex)\n  }\n\n  return href.slice(scheme.length + 1)\n}\n\nconst ressourceToPathname = (ressource) => {\n  const searchSeparatorIndex = ressource.indexOf(\"?\")\n  return searchSeparatorIndex === -1 ? ressource : ressource.slice(0, searchSeparatorIndex)\n}\n","import { hrefToScheme } from \"../hrefToScheme/hrefToScheme.js\"\n\nexport const hrefToOrigin = (href) => {\n  const scheme = hrefToScheme(href)\n\n  if (scheme === \"file\") {\n    return \"file://\"\n  }\n\n  if (scheme === \"http\" || scheme === \"https\") {\n    const secondProtocolSlashIndex = scheme.length + \"://\".length\n    const pathnameSlashIndex = href.indexOf(\"/\", secondProtocolSlashIndex)\n\n    if (pathnameSlashIndex === -1) return href\n    return href.slice(0, pathnameSlashIndex)\n  }\n\n  return href.slice(0, scheme.length + 1)\n}\n","export const pathnameToDirname = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex === -1) return \"\"\n\n  return pathname.slice(0, slashLastIndex)\n}\n","// could be useful: https://url.spec.whatwg.org/#url-miscellaneous\n\nimport { hasScheme } from \"../hasScheme.js\"\nimport { hrefToScheme } from \"@jsenv/href/src/hrefToScheme/hrefToScheme.js\"\nimport { hrefToPathname } from \"@jsenv/href/src/hrefToPathname/hrefToPathname.js\"\nimport { hrefToOrigin } from \"@jsenv/href/src/hrefToOrigin/hrefToOrigin.js\"\nimport { pathnameToDirname } from \"@jsenv/href/src/pathnameToDirname/pathnameToDirname.js\"\n\nexport const resolveUrl = (specifier, baseUrl) => {\n  if (baseUrl) {\n    if (typeof baseUrl !== \"string\") {\n      throw new TypeError(writeBaseUrlMustBeAString({ baseUrl, specifier }))\n    }\n    if (!hasScheme(baseUrl)) {\n      throw new Error(writeBaseUrlMustBeAbsolute({ baseUrl, specifier }))\n    }\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  if (!baseUrl) {\n    throw new Error(writeBaseUrlRequired({ baseUrl, specifier }))\n  }\n\n  // scheme relative\n  if (specifier.slice(0, 2) === \"//\") {\n    return `${hrefToScheme(baseUrl)}:${specifier}`\n  }\n\n  // origin relative\n  if (specifier[0] === \"/\") {\n    return `${hrefToOrigin(baseUrl)}${specifier}`\n  }\n\n  const baseOrigin = hrefToOrigin(baseUrl)\n  const basePathname = hrefToPathname(baseUrl)\n\n  if (specifier === \".\") {\n    const baseDirname = pathnameToDirname(basePathname)\n    return `${baseOrigin}${baseDirname}/`\n  }\n\n  // pathname relative inside\n  if (specifier.slice(0, 2) === \"./\") {\n    const baseDirname = pathnameToDirname(basePathname)\n    return `${baseOrigin}${baseDirname}/${specifier.slice(2)}`\n  }\n\n  // pathname relative outside\n  if (specifier.slice(0, 3) === \"../\") {\n    let unresolvedPathname = specifier\n    const importerFolders = basePathname.split(\"/\")\n    importerFolders.pop()\n\n    while (unresolvedPathname.slice(0, 3) === \"../\") {\n      unresolvedPathname = unresolvedPathname.slice(3)\n      // when there is no folder left to resolved\n      // we just ignore '../'\n      if (importerFolders.length) {\n        importerFolders.pop()\n      }\n    }\n\n    const resolvedPathname = `${importerFolders.join(\"/\")}/${unresolvedPathname}`\n    return `${baseOrigin}${resolvedPathname}`\n  }\n\n  // bare\n  if (basePathname === \"\") {\n    return `${baseOrigin}/${specifier}`\n  }\n  if (basePathname[basePathname.length] === \"/\") {\n    return `${baseOrigin}${basePathname}${specifier}`\n  }\n  return `${baseOrigin}${pathnameToDirname(basePathname)}/${specifier}`\n}\n\nconst writeBaseUrlMustBeAString = ({ baseUrl, specifier }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlMustBeAbsolute = ({ baseUrl, specifier }) => `baseUrl must be absolute.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst writeBaseUrlRequired = ({\n  baseUrl,\n  specifier,\n}) => `baseUrl required to resolve relative specifier.\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n","import { hasScheme } from \"./hasScheme.js\"\nimport { resolveUrl } from \"./resolveUrl/resolveUrl.js\"\n\nexport const tryUrlResolution = (string, url) => {\n  const result = resolveUrl(string, url)\n  return hasScheme(result) ? result : null\n}\n","import { hasScheme } from \"../hasScheme.js\"\nimport { resolveUrl } from \"../resolveUrl/resolveUrl.js\"\n\nexport const resolveSpecifier = (specifier, importer) => {\n  if (specifier[0] === \"/\" || specifier.startsWith(\"./\") || specifier.startsWith(\"../\")) {\n    return resolveUrl(specifier, importer)\n  }\n\n  if (hasScheme(specifier)) {\n    return specifier\n  }\n\n  return null\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\n\nexport const sortImportMap = (importMap) => {\n  assertImportMap(importMap)\n\n  const { imports, scopes } = importMap\n  return {\n    imports: imports ? sortImports(imports) : undefined,\n    scopes: scopes ? sortScopes(scopes) : undefined,\n  }\n}\n\nexport const sortImports = (imports) => {\n  const importsSorted = {}\n  Object.keys(imports)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((name) => {\n      importsSorted[name] = imports[name]\n    })\n  return importsSorted\n}\n\nexport const sortScopes = (scopes) => {\n  const scopesSorted = {}\n  Object.keys(scopes)\n    .sort(compareLengthOrLocaleCompare)\n    .forEach((scopeName) => {\n      scopesSorted[scopeName] = sortImports(scopes[scopeName])\n    })\n  return scopesSorted\n}\n\nconst compareLengthOrLocaleCompare = (a, b) => {\n  return b.length - a.length || a.localeCompare(b)\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\nimport { tryUrlResolution } from \"../tryUrlResolution.js\"\nimport { resolveSpecifier } from \"../resolveSpecifier/resolveSpecifier.js\"\n\nimport { sortImports, sortScopes } from \"../sortImportMap/sortImportMap.js\"\n\nexport const normalizeImportMap = (importMap, baseUrl) => {\n  assertImportMap(importMap)\n  if (typeof baseUrl !== \"string\") {\n    throw new TypeError(formulateBaseUrlMustBeAString({ baseUrl }))\n  }\n\n  const { imports, scopes } = importMap\n\n  return {\n    imports: imports ? normalizeImports(imports, baseUrl) : undefined,\n    scopes: scopes ? normalizeScopes(scopes, baseUrl) : undefined,\n  }\n}\n\nconst normalizeImports = (imports, baseUrl) => {\n  const importsNormalized = {}\n  Object.keys(imports).forEach((specifier) => {\n    const address = imports[specifier]\n\n    if (typeof address !== \"string\") {\n      console.warn(\n        formulateAddressMustBeAString({\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    const specifierResolved = resolveSpecifier(specifier, baseUrl) || specifier\n\n    const addressUrl = tryUrlResolution(address, baseUrl)\n    if (addressUrl === null) {\n      console.warn(\n        formulateAdressResolutionFailed({\n          address,\n          baseUrl,\n          specifier,\n        }),\n      )\n      return\n    }\n\n    if (specifier.endsWith(\"/\") && !addressUrl.endsWith(\"/\")) {\n      console.warn(\n        formulateAddressUrlRequiresTrailingSlash({\n          addressUrl,\n          address,\n          specifier,\n        }),\n      )\n      return\n    }\n    importsNormalized[specifierResolved] = addressUrl\n  })\n  return sortImports(importsNormalized)\n}\n\nconst normalizeScopes = (scopes, baseUrl) => {\n  const scopesNormalized = {}\n  Object.keys(scopes).forEach((scope) => {\n    const scopeValue = scopes[scope]\n    const scopeUrl = tryUrlResolution(scope, baseUrl)\n    if (scopeUrl === null) {\n      console.warn(\n        formulateScopeResolutionFailed({\n          scope,\n          baseUrl,\n        }),\n      )\n      return\n    }\n    const scopeValueNormalized = normalizeImports(scopeValue, baseUrl)\n    scopesNormalized[scopeUrl] = scopeValueNormalized\n  })\n  return sortScopes(scopesNormalized)\n}\n\nconst formulateBaseUrlMustBeAString = ({ baseUrl }) => `baseUrl must be a string.\n--- base url ---\n${baseUrl}`\n\nconst formulateAddressMustBeAString = ({ specifier, address }) => `Address must be a string.\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateAdressResolutionFailed = ({\n  address,\n  baseUrl,\n  specifier,\n}) => `Address url resolution failed.\n--- address ---\n${address}\n--- base url ---\n${baseUrl}\n--- specifier ---\n${specifier}`\n\nconst formulateAddressUrlRequiresTrailingSlash = ({\n  addressURL,\n  address,\n  specifier,\n}) => `Address must end with /.\n--- address url ---\n${addressURL}\n--- address ---\n${address}\n--- specifier ---\n${specifier}`\n\nconst formulateScopeResolutionFailed = ({ scope, baseUrl }) => `Scope url resolution failed.\n--- scope ---\n${scope}\n--- base url ---\n${baseUrl}`\n","export const pathnameToExtension = (pathname) => {\n  const slashLastIndex = pathname.lastIndexOf(\"/\")\n  if (slashLastIndex !== -1) {\n    pathname = pathname.slice(slashLastIndex + 1)\n  }\n\n  const dotLastIndex = pathname.lastIndexOf(\".\")\n  if (dotLastIndex === -1) return \"\"\n  // if (dotLastIndex === pathname.length - 1) return \"\"\n  return pathname.slice(dotLastIndex)\n}\n","import { assertImportMap } from \"../assertImportMap.js\"\nimport { hasScheme } from \"../hasScheme.js\"\nimport { tryUrlResolution } from \"../tryUrlResolution.js\"\nimport { resolveSpecifier } from \"../resolveSpecifier/resolveSpecifier.js\"\n\nexport const applyImportMap = ({ importMap, specifier, importer }) => {\n  assertImportMap(importMap)\n  if (typeof specifier !== \"string\") {\n    throw new TypeError(writeSpecifierMustBeAString({ specifier, importer }))\n  }\n  if (importer) {\n    if (typeof importer !== \"string\") {\n      throw new TypeError(writeImporterMustBeAString({ importer, specifier }))\n    }\n    if (!hasScheme(importer)) {\n      throw new Error(writeImporterMustBeAbsolute({ importer, specifier }))\n    }\n  }\n\n  const specifierUrl = resolveSpecifier(specifier, importer)\n  const specifierNormalized = specifierUrl || specifier\n\n  const { scopes } = importMap\n  if (scopes && importer) {\n    const scopeKeyMatching = Object.keys(scopes).find((scopeKey) => {\n      return scopeKey === importer || specifierIsPrefixOf(scopeKey, importer)\n    })\n    if (scopeKeyMatching) {\n      const scopeValue = scopes[scopeKeyMatching]\n      const remappingFromScopeImports = applyImports(specifierNormalized, scopeValue)\n      if (remappingFromScopeImports !== null) {\n        return remappingFromScopeImports\n      }\n    }\n  }\n\n  const { imports } = importMap\n  if (imports) {\n    const remappingFromImports = applyImports(specifierNormalized, imports)\n    if (remappingFromImports !== null) {\n      return remappingFromImports\n    }\n  }\n\n  if (specifierUrl) {\n    return specifierUrl\n  }\n\n  throw new Error(writeBareSpecifierMustBeRemapped({ specifier, importer }))\n}\n\nconst applyImports = (specifier, imports) => {\n  const importKeyArray = Object.keys(imports)\n\n  let i = 0\n  while (i < importKeyArray.length) {\n    const importKey = importKeyArray[i]\n    i++\n    if (importKey === specifier) {\n      const importValue = imports[importKey]\n      return importValue\n    }\n    if (specifierIsPrefixOf(importKey, specifier)) {\n      const importValue = imports[importKey]\n      const afterImportKey = specifier.slice(importKey.length)\n\n      return tryUrlResolution(afterImportKey, importValue)\n    }\n  }\n\n  return null\n}\n\nconst specifierIsPrefixOf = (specifierHref, href) => {\n  return specifierHref[specifierHref.length - 1] === \"/\" && href.startsWith(specifierHref)\n}\n\nconst writeSpecifierMustBeAString = ({ specifier, importer }) => `specifier must be a string.\n--- specifier ---\n${specifier}\n--- importer ---\n${importer}`\n\nconst writeImporterMustBeAString = ({ importer, specifier }) => `importer must be a string.\n--- importer ---\n${importer}\n--- specifier ---\n${specifier}`\n\nconst writeImporterMustBeAbsolute = ({ importer, specifier }) => `importer must be an absolute url.\n--- importer ---\n${importer}\n--- specifier ---\n${specifier}`\n\nconst writeBareSpecifierMustBeRemapped = ({ specifier, importer }) => `Unmapped bare specifier.\n--- specifier ---\n${specifier}\n--- importer ---\n${importer}`\n","// directly target the files because this code\n// will be executed either on node or browser\n// and also we don't want to pull more code than necessary\n// when this one gets bundled\nimport { hrefToPathname } from \"@jsenv/href/src/hrefToPathname/hrefToPathname.js\"\nimport { pathnameToExtension } from \"@jsenv/href/src/pathnameToExtension/pathnameToExtension.js\"\nimport { resolveUrl } from \"../resolveUrl/resolveUrl.js\"\nimport { applyImportMap } from \"../applyImportMap/applyImportMap.js\"\n\nexport const resolveImport = ({ specifier, importer, importMap, defaultExtension = true }) => {\n  return applyDefaultExtension({\n    url: importMap\n      ? applyImportMap({ importMap, specifier, importer })\n      : resolveUrl(specifier, importer),\n    importer,\n    defaultExtension,\n  })\n}\n\nconst applyDefaultExtension = ({ url, importer, defaultExtension }) => {\n  if (hrefToPathname(url) === \"/\") {\n    return url\n  }\n\n  if (url.endsWith(\"/\")) {\n    return url\n  }\n\n  if (typeof defaultExtension === \"string\") {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\") {\n      return `${url}${defaultExtension}`\n    }\n    return url\n  }\n\n  if (defaultExtension === true) {\n    const extension = pathnameToExtension(url)\n    if (extension === \"\" && importer) {\n      const importerPathname = hrefToPathname(importer)\n      const importerExtension = pathnameToExtension(importerPathname)\n      return `${url}${importerExtension}`\n    }\n  }\n  return url\n}\n","// eslint-disable-next-line import/no-unresolved\nimport { chunkId } from \"/.jsenv/BUNDLE_CONSTANTS.js\"\n// eslint-disable-next-line import/no-unresolved\nimport importMap from \"/importMap.json\"\nimport { normalizeImportMap } from \"@jsenv/import-map/src/normalizeImportMap/normalizeImportMap.js\"\nimport { resolveImport } from \"@jsenv/import-map/src/resolveImport/resolveImport.js\"\n\nconst { currentScript } = document\n\nexport const url = (currentScript && currentScript.src) || new URL(chunkId, document.baseURI).href\n\nexport const resolve = (specifier) => {\n  return resolveImport({\n    specifier,\n    importer: url,\n    importMap: memoizedGetImportMap(),\n    defaultExtension: false,\n  })\n}\n\n// better for perf and helps rollup to tree shake this out\n// when import.meta.resolve is not used\nlet memoizedImportMap\nconst memoizedGetImportMap = () => {\n  if (memoizedImportMap) return memoizedImportMap\n  memoizedImportMap = normalizeImportMap(importMap, url)\n  return memoizedImportMap\n}\n","export const basic = import.meta.resolve(\"./file.js\")\n\nexport const remapped = import.meta.resolve(\"foo\")\n"]}